{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///release/doppio.js","webpack:///webpack/bootstrap 13765c460d8dad63bb85","webpack:///../../../src/index.ts","webpack:///../../../src/doppiojvm.ts","webpack:///../../../src/testing.ts","webpack:///./shims/process.js","webpack:///external \"BrowserFS\"","webpack:///../../../src/jvm.ts","webpack:///../../../src/util.ts","webpack:///./shims/BFSBuffer.js","webpack:///../../../src/gLong.ts","webpack:///../../../src/enums.ts","webpack:///../../../src/SafeMap.ts","webpack:///../../../src/methods.ts","webpack:///../../../src/attributes.ts","webpack:///../../../src/assert.ts","webpack:///../../../src/global.ts","webpack:///../../../src/threading.ts","webpack:///../../../src/opcodes.ts","webpack:///../../../src/logging.ts","webpack:///../../../src/StringOutputStream.ts","webpack:///../../../src/jit.ts","webpack:///../../../src/ClassLoader.ts","webpack:///../../../src/ClassData.ts","webpack:///../../../src/ByteStream.ts","webpack:///../../../src/ConstantPool.ts","webpack:///../../../src/ClassLock.ts","webpack:///../../../src/Monitor.ts","webpack:///../../../src/classpath.ts","webpack:///./shims/fs.js","webpack:///./shims/path.js","webpack:///./shims/buffer.js","webpack:///../../../src/heap.ts","webpack:///../../../src/parker.ts","webpack:///../../../src/threadpool.ts","webpack:///./vendor/java_home/jdk.json","webpack:///./~/pako/lib/zlib/deflate.js","webpack:///./~/pako/lib/utils/common.js","webpack:///./~/pako/lib/zlib/trees.js","webpack:///./~/pako/lib/zlib/adler32.js","webpack:///./~/pako/lib/zlib/crc32.js","webpack:///./~/pako/lib/zlib/messages.js","webpack:///./~/pako/lib/zlib/inflate.js","webpack:///./~/pako/lib/zlib/inffast.js","webpack:///./~/pako/lib/zlib/inftrees.js","webpack:///./~/pako/lib/zlib/zstream.js","webpack:///./package.json","webpack:///../../../src/difflib.ts","webpack:///../../../src/VM.ts","webpack:///../../../src/java_cli.ts","webpack:///../../../src/option_parser.ts","webpack:///../../../src/ClassFile.ts","webpack:///../../../src/Debug.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_4__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","doppiojvm","Testing","Heap","VM","Debug","process","makeTestingError","a","b","d","Error","originalError","fatal","findTestClasses","path","resolve","join","fs","readdir","filter","extname","map","basename","getTests","testClasses","length","doppioHomePath","DoppioTest","diff","split","e","difflib","text_diff","runTests","f","g","stdout","write","util","asyncForEach","cls","run","h","i","message","stack","JVM","OutputCapturer","_stdoutWrite","_stderrWrite","stderr","_data","_isCapturing","prototype","debugWrite","apply","start","toString","stop","getOutput","outputCapturer","opts","indexOf","descriptor2typestr","int_classname","outFile","constructJVM","merge","getDefaultOptions","classpath","enableAssertions","enableSystemAssertions","halt","runClass","readFile","encoding","BrowserFS","BFSRequire","SafeMap","methods","ClassLoader","buffer","threading_1","enums_1","assert","Parker","threadpool_1","JDKInfo","deflate","inflate","zstream","crc32","adler32","pkg","are_in_browser","coreClasses","systemProperties","internedStrings","bsCl","threadPool","natives","heap","nativeClasspath","startupTime","Date","terminationCb","firstThread","responsiveness","enabledAssertions","disabledAssertions","printJITCompilation","systemClassLoader","nextRef","vtraceMethods","dumpCompiledCodeDir","parker","status","JVMStatus","BOOTING","exitCode","jitDisabled","dumpJITStats","TypeError","intMode","bootstrapClasspath","Array","isArray","javaHomePath","disableAssertions","_initSystemProperties","tmpDir","properties","push","initializeNatives","BootstrapClassLoader","threadPoolIsEmpty","resolveClass","getConstructor","$thread","JVMThread","ref","initCarr","getResolvedClass","initializeClass","getInitializedClass","$loader","asyncSeries","setImmediate","TERMINATED","BOOTED","getResponsiveness","getCompiledJDKURL","url","getJDKInfo","getSystemClassLoader","isReleaseBuild","getNextRef","getParker","RUNNING","TERMINATING","array","initString","throwNewException","getExternalName","ext_classname","isJITDisabled","shouldVtrace","vtraceMethod","runJar","close","hasVMBooted","getThreads","forEach","setStatus","ThreadStatus","getSystemProperty","getSystemPropertyNames","Object","keys","getHeap","internString","has","get","set","evalNativeModule","mod","rv","DoppioJVM","Buffer","process2","savedRequire","registerNatives","eval","hasOwnProperty","registerNative","clsName","methSig","getNative","getNatives","substring","java.class.path","java.home","java.ext.dirs","java.io.tmpdir","sun.boot.class.path","file.encoding","java.vendor","java.version","java.vendor.url","java.class.version","java.specification.version","line.separator","file.separator","sep","path.separator","user.dir","user.home","user.name","os.name","os.arch","os.version","java.vm.name","java.vm.version","version","java.vm.vendor","java.awt.headless","java.awt.graphicsenv","jline.terminal","sun.arch.data.model","sun.jnu.encoding","getBootstrapClassLoader","getStartupTime","areSystemAssertionsEnabled","getEnabledAssertions","getDisabledAssertions","setPrintJITCompilation","shouldPrintJITCompilation","dumpCompiledCode","shouldDumpCompiledCode","dumpObjectDefinition","writeFile","dumpBridgeMethod","appendFile","dumpState","getRef","getPrintableStackTrace","arguments","platform","jvmName2JSName","slice","replace","reescapeJVMName","asyncFind","checkAccess","isPublic","isProtected","getPackageName","isSubclass","isPrivate","float2int","enums","Constants","INT_MAX","INT_MIN","byteArray2Buffer","supportsArrayBuffers","ArrayBuffer","isView","byteOffset","writeInt8","isUint8Array","Uint8Array","isInt8Array","Int8Array","i82u8","u82i8","buff2i8","BFSUtils","buffer2Arrayish","wrapFloat","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","chars2jsStr","String","fromCharCode","bytestr2Array","charCodeAt","array2bytestr","initialValue","gLong","ZERO","typestr2descriptor","verify_int_classname","match","internal2external","getTypes","charAt","get_component_type","is_array_type","is_primitive_type","is_reference_type","carr2descriptor","shift","unshift","external2internal","unboxArguments","unbox","createMethodType","resolveClasses","getClassObject","pop","getMethodDescriptorWordSize","getDescriptorString","$cls","getInternalName","getLoader","getBsCl","arraycopyNoCheck","arraycopyCheck","getClass","getComponentClass","j","isCastable","newArrayFromClass","newArray","multiNewArray","newObjectFromClass","newObject","getStaticFields","newArrayFromDataWithClass","newArrayFromData","boxClassName","className","boxPrimitiveValue","box","boxArguments","k","l","forwardResult","throwException","asyncReturn","typedArraysSupported","Math","imul","expm1","abs","exp","sinh","floor","max","PUBLIC","PRIVATE","PROTECTED","STATIC","FINAL","SYNCHRONIZED","SUPER","VOLATILE","TRANSIENT","VARARGS","NATIVE","INTERFACE","ABSTRACT","STRICT","FlagMasks","Flags","isStatic","isFinal","isSynchronized","isSuper","isVolatile","isTransient","isNative","isInterface","isAbstract","isStrict","setNative","isVarArgs","getRawByte","B","C","D","F","I","J","S","V","Z","low_","high_","fromInt","IntCache_","fromNumber","isNaN","isFinite","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","fromString","pow","min","parseInt","multiply","add","toInt","toNumber","getLowBitsUnsigned","isZero","isNegative","equals","div","subtract","getHighBits","getLowBits","getNumBitsAbs","isOdd","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","not","ONE","n","TWO_PWR_24_","NEG_ONE","shiftRight","shiftLeft","ceil","log","LN2","modulo","and","or","xor","shiftRightUnsigned","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","assignOpcodeLayout","olt","NOT_LOADED","LOADED","RESOLVED","INITIALIZED","ClassState","NEW","RUNNABLE","BLOCKED","UNINTERRUPTABLY_BLOCKED","WAITING","TIMED_WAITING","ASYNC_WAITING","PARKED","ALIVE","BLOCKED_ON_MONITOR_ENTER","WAITING_INDEFINITELY","WAITING_WITH_TIMEOUT","JVMTIThreadState","TRUE","FALSE","INDETERMINATE","TriState","INTERNAL","BYTECODE","StackFrameType","FLOAT_POS_INFINITY","FLOAT_NEG_INFINITY","FLOAT_POS_INFINITY_AS_INT","FLOAT_NEG_INFINITY_AS_INT","FLOAT_NaN_AS_INT","CLASS","FIELDREF","METHODREF","INTERFACE_METHODREF","STRING","INTEGER","FLOAT","LONG","DOUBLE","NAME_AND_TYPE","UTF8","METHOD_HANDLE","METHOD_TYPE","INVOKE_DYNAMIC","ConstantPoolItemType","SAME_FRAME","SAME_LOCALS_1_STACK_ITEM_FRAME","SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED","CHOP_FRAME","SAME_FRAME_EXTENDED","APPEND_FRAME","FULL_FRAME","StackMapTableEntryType","GETFIELD","GETSTATIC","PUTFIELD","PUTSTATIC","INVOKEVIRTUAL","INVOKESTATIC","INVOKESPECIAL","NEWINVOKESPECIAL","INVOKEINTERFACE","MethodHandleReferenceKind","AALOAD","AASTORE","ACONST_NULL","ALOAD","ALOAD_0","ALOAD_1","ALOAD_2","ALOAD_3","ANEWARRAY","ARETURN","ARRAYLENGTH","ASTORE","ASTORE_0","ASTORE_1","ASTORE_2","ASTORE_3","ATHROW","BALOAD","BASTORE","BIPUSH","BREAKPOINT","CALOAD","CASTORE","CHECKCAST","D2F","D2I","D2L","DADD","DALOAD","DASTORE","DCMPG","DCMPL","DCONST_0","DCONST_1","DDIV","DLOAD","DLOAD_0","DLOAD_1","DLOAD_2","DLOAD_3","DMUL","DNEG","DREM","DRETURN","DSTORE","DSTORE_0","DSTORE_1","DSTORE_2","DSTORE_3","DSUB","DUP","DUP_X1","DUP_X2","DUP2","DUP2_X1","DUP2_X2","F2D","F2I","F2L","FADD","FALOAD","FASTORE","FCMPG","FCMPL","FCONST_0","FCONST_1","FCONST_2","FDIV","FLOAD","FLOAD_0","FLOAD_1","FLOAD_2","FLOAD_3","FMUL","FNEG","FREM","FRETURN","FSTORE","FSTORE_0","FSTORE_1","FSTORE_2","FSTORE_3","FSUB","GOTO","GOTO_W","I2B","I2C","I2D","I2F","I2L","I2S","IADD","IALOAD","IAND","IASTORE","ICONST_M1","ICONST_0","ICONST_1","ICONST_2","ICONST_3","ICONST_4","ICONST_5","IDIV","IF_ACMPEQ","IF_ACMPNE","IF_ICMPEQ","IF_ICMPGE","IF_ICMPGT","IF_ICMPLE","IF_ICMPLT","IF_ICMPNE","IFEQ","IFGE","IFGT","IFLE","IFLT","IFNE","IFNONNULL","IFNULL","IINC","ILOAD","ILOAD_0","ILOAD_1","ILOAD_2","ILOAD_3","IMUL","INEG","INSTANCEOF","INVOKEDYNAMIC","IOR","IREM","IRETURN","ISHL","ISHR","ISTORE","ISTORE_0","ISTORE_1","ISTORE_2","ISTORE_3","ISUB","IUSHR","IXOR","JSR","JSR_W","L2D","L2F","L2I","LADD","LALOAD","LAND","LASTORE","LCMP","LCONST_0","LCONST_1","LDC","LDC_W","LDC2_W","LDIV","LLOAD","LLOAD_0","LLOAD_1","LLOAD_2","LLOAD_3","LMUL","LNEG","LOOKUPSWITCH","LOR","LREM","LRETURN","LSHL","LSHR","LSTORE","LSTORE_0","LSTORE_1","LSTORE_2","LSTORE_3","LSUB","LUSHR","LXOR","MONITORENTER","MONITOREXIT","MULTIANEWARRAY","NEWARRAY","NOP","POP","POP2","RET","RETURN","SALOAD","SASTORE","SIPUSH","SWAP","TABLESWITCH","WIDE","GETSTATIC_FAST32","GETSTATIC_FAST64","NEW_FAST","ANEWARRAY_FAST","CHECKCAST_FAST","INSTANCEOF_FAST","MULTIANEWARRAY_FAST","PUTSTATIC_FAST32","PUTSTATIC_FAST64","GETFIELD_FAST32","GETFIELD_FAST64","PUTFIELD_FAST32","PUTFIELD_FAST64","INVOKENONVIRTUAL_FAST","INVOKESTATIC_FAST","INVOKEVIRTUAL_FAST","INVOKEINTERFACE_FAST","INVOKEHANDLE","INVOKEBASIC","LINKTOSPECIAL","LINKTOVIRTUAL","INVOKEDYNAMIC_FAST","OpCode","OPCODE_ONLY","CONSTANT_POOL_UINT8","CONSTANT_POOL","CONSTANT_POOL_AND_UINT8_VALUE","UINT8_VALUE","UINT8_AND_INT8_VALUE","INT8_VALUE","INT16_VALUE","INT32_VALUE","ARRAY_TYPE","OpcodeLayoutType","OpcodeLayouts","cache","create","fixKey","getTrappedMethod","trapped_methods","makeOnError","dumpStats","sort","statTraceCloser","console","__extends","constructor","attributes","StringOutputStream","jit_1","java/lang/ref/Reference","<clinit>()V","java/lang/System","loadLibrary(Ljava/lang/String;)V","java/lang/Terminator","setup()V","java/nio/charset/Charset$3","run()Ljava/lang/Object;","sun/nio/fs/DefaultFileSystemProvider","create()Ljava/nio/file/spi/FileSystemProvider;","getJVM","AbstractMethodField","slot","accessFlags","getUint16","name","value","rawDescriptor","attrs","makeAttributes","getAttribute","getName","getAttributes","getAnnotationType","rawBytes","readInt8","parseDescriptor","Field","fullName","reflector","sig","getDefaultFieldValue","outputJavaScriptField","opcodeSize","TraceInfo","pc","jitInfo","pops","pushes","prefixEmit","Trace","startPC","code","method","infos","endPc","emitEndPC","addOp","onErrorPushes","emit","Function","Method","numBBEntries","compiledFunctions","failedCompile","signature","fullSignature","returnType","parameterTypes","parameterWords","getFullSignature","incrBBEntries","isDefault","isHidden","isCallerSensitive","getParamWordSize","getCodeAttribute","getOp","jitCompileFrom","readUInt8","makeInvokeStaticJitInfo","readUInt16BE","constantPool","paramWordSize","jsConstructor","hasBranch","reduce","reverse","makeInvokeVirtualJitInfo","makeInvokeNonVirtualJitInfo","getCode","opJitInfo","getNativeFunction","_resolveReferencedClasses","concat","exceptionHandlers","catchType","exceptions","o","q","r","s","convertArgs","isSignaturePolymorphic","methodLock","getMonitor","locals","getVMTargetBridgeMethod","flush","outputJavaScriptFunction","Code","LineNumberTable","SourceFile","StackMapTable","LocalVariableTable","LocalVariableTypeTable","ConstantValue","Exceptions","InnerClasses","Synthetic","Deprecated","Signature","RuntimeVisibleAnnotations","AnnotationDefault","EnclosingMethod","BootstrapMethods","RuntimeVisibleParameterAnnotations","getUint32","size","parse","skip","ExceptionHandler","endPC","handlerPC","maxStack","maxLocals","getMaxStack","getBuffer","entries","getLineNumber","lineNumber","filename","parseEntry","getUint8","type","offsetDelta","parseVerificationTypeInfo","numLocals","numStackItems","test","parseEntries","descriptor","parseTableEntry","index","classes","parseClass","innerInfoIndex","outerInfoIndex","innerNameIndex","innerAccessFlags","isCompiled","read","seek","pos","encClass","encMethod","bootstrapMethods","global","toExport","window","self","printConstantPoolItem","getType","classInfo","nameAndTypeInfo","logging","debug_var","annotateOpcode","OpcodeLayoutPrinters","opcodes","maxMethodResumes","debug","vtrace","trace","methodResumesLeft","numSamples","PreAllocatedStack","curr","store","pushAll","pushWithNull","push6","swap","dup","dup2","dup_x1","dup_x2","dup2_x1","pop2","bottom","top","fromTop","sliceFromBottom","sliceFromTop","dropFromTop","sliceAndDropFromTop","getRaw","clear","jitUtil","isNull","resolveCPItem","BytecodeStackFrame","returnToThreadLoop","lockedMethodLock","opStack","LookupTable","enter","scheduleResume","scheduleException","exit","getStackTraceFrame","NativeStackFrame","args","nativeMethod","getStatus","currentMethod","InternalStackFrame","isException","cb","framePop","val","interrupted","monitor","jvm","tpool","jvmThreadObj","getJVMObject","isDaemon","getPriority","setJVMObject","isInterrupted","setInterrupted","_import","getThreadPool","getStackTrace","getTime","quantumOver","sanityCheck","rawSetStatus","log_level","VTRACE","statusChange","isBlocked","getOwner","notifyAll","signalPriorityChange","priorityChange","getMonitorBlock","handleUncaughtException","validTransitions","toLowerCase","readInt16BE","readInt32BE","ArrayTypes","initializeClassFromClass","initialize","isResolved","4","5","6","7","8","9","10","11","Opcodes","_aload_32","_aload_64","_astore_32","_astore_64","aconst_null","_const_0_32","_const_1_32","_const_2_32","iconst_m1","iconst_3","iconst_4","iconst_5","lconst_0","lconst_1","dconst_0","dconst_1","_load_32","_load_0_32","_load_1_32","_load_2_32","_load_3_32","_load_64","_load_0_64","_load_1_64","_load_2_64","_load_3_64","_store_32","_store_0_32","_store_1_32","_store_2_32","_store_3_32","_store_64","_store_0_64","_store_1_64","_store_2_64","_store_3_64","sipush","bipush","dup2_x2","iadd","ladd","fadd","dadd","isub","fsub","dsub","lsub","lmul","fmul","dmul","idiv","ldiv","fdiv","ddiv","irem","lrem","frem","drem","ineg","lneg","fneg","dneg","ishl","lshl","ishr","lshr","iushr","lushr","iand","land","ior","lor","ixor","lxor","iinc","i2l","i2f","i2d","l2i","l2f","l2d","f2i","f2l","f2d","d2i","d2l","d2f","i2b","i2c","i2s","lcmp","fcmpl","fcmpg","dcmpl","dcmpg","ifeq","ifne","iflt","ifge","ifgt","ifle","if_icmpeq","if_icmpne","if_icmplt","if_icmpge","if_icmpgt","if_icmple","if_acmpeq","if_acmpne","jsr","ret","tableswitch","lookupswitch","_return_32","_return_64","getstatic","field","isInitialized","writeUInt8","fieldOwnerConstructor","getstatic_fast32","fullFieldName","getstatic_fast64","putstatic","putstatic_fast32","putstatic_fast64","getfield","getfield_fast32","getfield_fast64","putfield","putfield_fast32","putfield_fast64","invokevirtual","invokeinterface","invokedynamic","constructCallSiteObject","invokespecial","invokestatic","invokenonvirtual_fast","invokestatic_fast","invokevirtual_fast","invokedynamic_fast","getCallSiteObject","vmtarget","invokehandle","memberName","appendix","invokebasic","linktospecial","linktovirtual","breakpoint","new_fast","clsConstructor","newarray","anewarray","arrayClass","arrayClassConstructor","anewarray_fast","arraylength","athrow","checkcast","checkcast_fast","instanceof_fast","monitorenter","monitorexit","multianewarray","multianewarray_fast","ifnull","ifnonnull","goto_w","jsr_w","nop","ldc","getConstant","ldc_w","ldc2_w","wide","iaload","faload","aaload","baload","caload","saload","daload","laload","iastore","fastore","aastore","bastore","castore","sastore","lastore","dastore","iconst_0","iconst_1","iconst_2","fconst_0","fconst_1","fconst_2","iload","iload_0","iload_1","iload_2","iload_3","fload","fload_0","fload_1","fload_2","fload_3","aload","aload_0","aload_1","aload_2","aload_3","lload","lload_0","lload_1","lload_2","lload_3","dload","dload_0","dload_1","dload_2","dload_3","istore","istore_0","istore_1","istore_2","istore_3","fstore","fstore_0","fstore_1","fstore_2","fstore_3","astore","astore_0","astore_1","astore_2","astore_3","lstore","lstore_0","lstore_1","lstore_2","lstore_3","dstore","dstore_0","dstore_1","dstore_2","dstore_3","ireturn","freturn","areturn","lreturn","dreturn","invokeinterface_fast","debug_vars","error","TRACE","DEBUG","ERROR","escapeStringRegEx","t","u","v","w","x","y","z","A","E","G","ClassData_1","ClassLock","classpath_1","ClassLocks","locks","tryLock","unlock","bootstrap","loadedClasses","loadClassLocks","getLoadedClassNames","addClass","defineClass","ReferenceClassData","defineArrayClass","ArrayClassData","getLoadedClass","getPrimitiveClass","tryToResolve","tryToInitialize","loadClass","_loadClass","throwClassNotFoundException","loadedPackages","ClasspathFactory","_registerLoadedClass","lastIndexOf","getPackages","getPath","PrimitiveClassData","hasClass","getLoadedClassFiles","getLoaderObject","getClassPath","getClassPathItems","CustomClassLoader","loaderObj","extendClass","ByteStream","ConstantPool","injectedFields","Ljava/lang/invoke/MemberName;","vmindex","Ljava/lang/Object;","$monitor","Ljava/net/PlainSocketImpl;","$is_shutdown","$ws","Ljava/io/FileDescriptor;","$pos","Ljava/lang/Class;","Ljava/lang/ClassLoader;","Ljava/lang/Thread;","injectedMethods","Ljava/lang/String;","Ljava/lang/Byte;","Ljava/lang/Character;","Ljava/lang/Double;","Ljava/lang/Float;","Ljava/lang/Integer;","Ljava/lang/Long;","Ljava/lang/Short;","Ljava/lang/Boolean;","Ljava/lang/Void;","Ljava/lang/invoke/MethodType;","injectedStaticMethods","ClassData","state","jco","superClass","loader","getSuperClass","getInterfaces","getInjectedFields","getInjectedMethods","getInjectedStaticMethods","getProtectionDomain","getMethod","getMethods","getFields","setState","getState","isSubinterface","outputInjectedMethods","createWrapperObject","_constructor","componentClassName","methodLookup","fieldLookup","setResolved","componentClass","getJSArrayConstructor","getJSDefaultArrayElement","_getSliceMethod","_constructConstructor","outputInjectedFields","interfaceClasses","superClassRef","initLock","_fieldLookup","_objectFields","_staticFields","_methodLookup","_vmTable","_uninheritedDefaultMethods","_protectionDomain","minorVersion","majorVersion","interfaceRefs","fields","hasBytes","getSuperClassReference","getInterfaceClassReferences","getVMTable","getVMIndexForMethod","getMethodFromVMIndex","getVMIndexForField","getStaticFieldFromVMIndex","getObjectFieldFromVMIndex","getFieldFromSlot","getMethodFromSlot","getSpecificMethod","getUninheritedDefaultMethods","_resolveMethods","_resolveFields","signaturePolymorphicAwareMethodLookup","getBootstrapMethod","_getInitialStaticFieldValue","stringValue","tryResolve","_initialize","getMirandaAndDefaultMethods","_index","incIndex","rewind","getFloat","readFloatBE","getDouble","readDoubleBE","getUint","getInt","getInt8","getInt16","getInt32","readUInt32BE","getInt64","peek","CP_CLASSES","ConstUTF8","bytes2str","fromBytes","infoByteSize","ConstInt32","ConstFloat","ConstLong","ConstDouble","ClassReference","NameAndTypeInfo","ConstString","MethodType","methodType","MethodReference","hasAccess","resolveMemberName","InterfaceMethodReference","FieldReference","InvokeDynamic","callSiteObjects","bootstrapMethodAttrIndex","methodHandle","MethodHandle","reference","referenceType","constructMethodHandleType","getDefiningClassObj","CONSTANT_POOL_TIER","offset","each","queue","thread","Monitor","owner","count","blocked","waiting","contendForLock","appointNewOwner","random","unblock","wait","isTimed","timer","setTimeout","unwait","clearTimeout","notify","isWaiting","isTimedWaiting","win2nix","parseMetaIndex","relative","stat","ClasspathNotFound","isDirectory","ClasspathFolder","IndexedClasspathJar","UnindexedClasspathJar","BFSFS","ZipFS","FileSystem","AbstractClasspathJar","_fs","FS","_jarRead","_path","loadJar","computeIndex","tryLoadClassSync","readFileSync","_wrapOp","_wrapSyncOp","statResource","tryReaddirSync","readdirSync","tryStatSync","statSync","getFS","getRootFS","_classList","_hasClass","initializeWithClasslist","_metaIndex","_metaName","_notFoundError","_sizeMap","_buffer","_remaining","_offset","_freeLists","_numSizeClasses","malloc","size_to_class","refill","free","_chunkSize","store_word","writeInt32LE","get_byte","get_word","readInt32LE","get_buffer","get_signed_byte","set_byte","set_signed_byte","memcpy","copy","cl_to_size","ilog2","_parkCounts","_parkCallbacks","park","_mutateParkCount","isParked","unpark","completelyUnpark","isRunnable","WeightedRoundRobinScheduler","_count","_queue","_threadScheduled","scheduleThread","runThread","unscheduleThread","splice","getRunningThread","ThreadPool","threads","scheduler","emptyCallback","anyNonDaemonicThreads","threadTerminated","__esModule","err","strm","errorCode","msg","rank","zero","buf","len","flush_pending","pending","avail_out","utils","arraySet","output","pending_buf","pending_out","next_out","total_out","flush_block_only","last","trees","_tr_flush_block","block_start","strstart","put_byte","putShortMSB","read_buf","avail_in","input","next_in","wrap","adler","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","MIN_LOOKAHEAD","_win","wmask","w_mask","prev","strend","MAX_MATCH","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","str","_w_size","window_size","hash_size","head","insert","MIN_MATCH","ins_h","hash_shift","hash_mask","deflate_stored","max_block_size","pending_buf_size","Z_NO_FLUSH","BS_NEED_MORE","max_start","Z_FINISH","BS_FINISH_STARTED","BS_FINISH_DONE","deflate_fast","hash_head","bflush","match_length","_tr_tally","max_lazy_match","last_lit","BS_BLOCK_DONE","deflate_slow","max_insert","prev_match","strategy","Z_FILTERED","match_available","deflate_rle","deflate_huff","Config","good_length","max_lazy","nice_length","max_chain","func","lm_init","configuration_table","level","DeflateState","gzhead","gzindex","Z_DEFLATED","last_flush","w_bits","hash_bits","dyn_ltree","Buf16","HEAP_SIZE","dyn_dtree","D_CODES","bl_tree","BL_CODES","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","L_CODES","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","data_type","Z_UNKNOWN","INIT_STATE","BUSY_STATE","_tr_init","Z_OK","Z_STREAM_ERROR","deflateReset","deflateSetHeader","deflateInit2","windowBits","memLevel","Z_DEFAULT_COMPRESSION","MAX_MEM_LEVEL","Z_FIXED","Buf8","deflateInit","MAX_WBITS","DEF_MEM_LEVEL","Z_DEFAULT_STRATEGY","old_flush","beg","Z_BLOCK","FINISH_STATE","Z_BUF_ERROR","text","hcrc","extra","comment","time","Z_HUFFMAN_ONLY","os","EXTRA_STATE","OS_CODE","header","level_flags","PRESET_DICT","NAME_STATE","COMMENT_STATE","HCRC_STATE","bstate","Z_RLE","Z_PARTIAL_FLUSH","_tr_align","_tr_stored_block","Z_FULL_FLUSH","Z_STREAM_END","deflateEnd","Z_DATA_ERROR","deflateSetDictionary","dictionary","avail","next","tmpDict","dictLength","LENGTH_CODES","LITERALS","deflateInfo","TYPED_OK","Uint16Array","Int32Array","assign","obj","sources","source","shrinkBuf","subarray","fnTyped","dest","src","src_offs","dest_offs","flattenChunks","chunks","chunk","result","fnUntyped","setTyped","on","Buf32","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","_dist_code","put_short","send_bits","Buf_size","send_code","tree","bi_reverse","res","bi_flush","gen_bitlen","desc","bits","xbits","stree","base","overflow","gen_codes","next_code","tr_static_init","base_length","extra_lbits","_length_code","base_dist","extra_dbits","static_ltree","static_dtree","static_l_desc","static_d_desc","static_bl_desc","extra_blbits","MAX_BL_BITS","init_block","END_BLOCK","bi_windup","copy_block","smaller","_n2","_m2","pqdownheap","compress_block","ltree","dtree","lc","lx","build_tree","node","scan_tree","curlen","prevlen","nextlen","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","build_bl_tree","max_blindex","bl_order","send_all_trees","lcodes","dcodes","blcodes","detect_data_type","black_mask","Z_BINARY","Z_TEXT","static_init_done","stored_len","STORED_BLOCK","STATIC_TREES","opt_lenb","static_lenb","DYN_TREES","DIST_CODE_LEN","s1","s2","makeTable","table","crc","crcTable","end","2","1","0","-1","-2","-3","-4","-5","-6","zswap32","InflateState","mode","havedict","flags","dmax","check","total","wbits","wsize","whave","wnext","hold","lencode","distcode","lenbits","distbits","ncode","nlen","ndist","have","lens","work","lendyn","distdyn","sane","back","was","inflateResetKeep","HEAD","ENOUGH_LENS","ENOUGH_DISTS","inflateReset","inflateReset2","inflateInit2","inflateInit","DEF_WBITS","fixedtables","virgin","sym","lenfix","distfix","inflate_table","LENS","DISTS","updatewindow","put","left","_in","_out","from","from_source","here_bits","here_op","here_val","last_bits","last_op","last_val","here","hbuf","order","TYPE","TYPEDO","inf_leave","FLAGS","done","BAD","DICTID","TIME","OS","xflags","EXLEN","extra_len","EXTRA","NAME","COMMENT","HCRC","DICT","Z_NEED_DICT","Z_TREES","CHECK","STORED","LEN_","TABLE","COPY_","COPY","LENLENS","CODES","CODELENS","LEN","inflate_fast","LIT","LENEXT","DIST","DISTEXT","MATCH","LENGTH","DONE","MEM","Z_MEM_ERROR","SYNC","inflateEnd","inflateGetHeader","inflateSetDictionary","dictid","inflateInfo","s_window","lcode","dcode","lmask","dmask","op","dolen","dodist","MAXBITS","lbase","lext","dbase","dext","lens_index","codes","table_index","incr","fill","low","mask","drop","used","huff","base_index","offs","extra_index","ZStream","engine","license","main","typings","dependencies","async","browserfs","glob","gunzip-maybe","optimist","pako","rimraf","source-map-support","tar-fs","devDependencies","bfs-buffer","bfs-path","bfs-process","body-parser","cpr","detect-browser","escodegen","esprima","estraverse","express","grunt","grunt-cli","grunt-contrib-compress","grunt-contrib-connect","grunt-contrib-copy","grunt-contrib-uglify","grunt-karma","grunt-lineending","grunt-merge-source-maps","grunt-newer","grunt-ts","grunt-webpack","imports-loader","jasmine-core","json-loader","karma","karma-chrome-launcher","karma-firefox-launcher","karma-ie-launcher","karma-jasmine","karma-opera-launcher","karma-safari-launcher","locate-java-home","semver","source-map-loader","typescript","uglify-js","underscore","webpack","webpack-dev-server","scripts","prepublish","install","appveyor-test","repository","bin","doppio","doppioh","doppio-dev","doppio-fast-dev","SequenceMatcher","__ntuplecomp","__dictget","b2j","find_longest_match","get_matching_blocks","matching_blocks","get_opcodes","CLI","ClassFile","Threading","Long","Util","Enums","Interfaces","java","parser","X","mapOption","flag","printHelp","launcherName","help","printNonStandardHelp","stringOption","toUpperCase","cwd","launchJvm","unparsedArgs","option_parser_1","OptionParser","default","alias","optDesc","jar","stopParsing","enableassertions","disableassertions","enablesystemassertions","disablesystemassertions","int","dump-JIT-stats","vtrace-methods","list-class-cache","dump-compiled-code","native-classpath","bootclasspath/a","bootclasspath/p","bootclasspath","X:+PrintCompilation","getOptName","printCol","_showHelp","PrefixParseResult","_result","_unparsedArgs","_parseMap","_prefixes","_mapArgs","_rawDesc","prefix","trim","__export","Attributes","Assert","Logging","Difflib"],"mappings":"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","file":"release/doppio.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"BrowserFS\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"BrowserFS\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Doppio\"] = factory(require(\"BrowserFS\"));\n\telse\n\t\troot[\"Doppio\"] = factory(root[\"BrowserFS\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"BrowserFS\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"BrowserFS\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Doppio\"] = factory(require(\"BrowserFS\"));\n\telse\n\t\troot[\"Doppio\"] = factory(root[\"BrowserFS\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var doppiojvm=__webpack_require__(1);module.exports=doppiojvm;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var Testing=__webpack_require__(2);exports.Testing=Testing;var Heap=__webpack_require__(30);exports.Heap=Heap;var VM=__webpack_require__(46);exports.VM=VM;var Debug=__webpack_require__(51);exports.Debug=Debug;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {\"use strict\";function makeTestingError(a,b,c){var d=new Error(a);return d.originalError=b,d.fatal=c,d}function findTestClasses(a,b){var c=path.resolve(a,path.join(\"classes\",\"test\"));fs.readdir(c,function(a,c){b(a?[]:c.filter(function(a){return\".java\"===path.extname(a)}).map(function(a){return path.join(\"classes\",\"test\",path.basename(a,\".java\"))}))})}function getTests(a,b){var c=a.testClasses;null==c||0===c.length?findTestClasses(a.doppioHomePath,function(c){a.testClasses=c,getTests(a,b)}):b(c.map(function(b){return new DoppioTest(a,b)}))}function diff(a,b){var c=a.split(/\\n/),d=b.split(/\\n/),e=difflib.text_diff(c,d,2);return e.length>0?\"Doppio | Java\\n\"+e.join(\"\\n\"):null}function runTests(a,b,c,d,e,f){function g(a){b||process.stdout.write(a)}getTests(a,function(a){util.asyncForEach(a,function(a,b){g(\"[\"+a.cls+\"]: Running... \"),a.run(e,function(e,f,h,i){e&&!d&&i&&(e.message+=\"\\n\"+i),e?(g(\"fail.\\n\t\"+e.message+\"\\n\"),e.originalError&&e.originalError.stack&&g(e.stack+\"\\n\"),!c||e.fatal?(e.message=\"Failed \"+a.cls+\": \"+e.message,b(e)):b()):(g(\"pass.\\n\"),b())})},f)})}var JVM=__webpack_require__(5),util=__webpack_require__(6),difflib=__webpack_require__(45),path=__webpack_require__(28),fs=__webpack_require__(27),OutputCapturer=function(){function a(){this._stdoutWrite=process.stdout.write,this._stderrWrite=process.stderr.write,this._data=\"\",this._isCapturing=!1}return a.prototype.debugWrite=function(a){this._stdoutWrite.apply(process.stdout,[a,\"utf8\"])},a.prototype.start=function(a){var b=this;if(this._isCapturing)throw new Error(\"Already capturing.\");this._isCapturing=!0,a&&(this._data=\"\"),process.stderr.write=process.stdout.write=function(a,c,d){return\"string\"!=typeof a&&(a=a.toString()),b._data+=a,!0}},a.prototype.stop=function(){this._isCapturing&&(this._isCapturing=!1,process.stderr.write=this._stderrWrite,process.stdout.write=this._stdoutWrite)},a.prototype.getOutput=function(a){var b=this._data;return a&&(this._data=\"\"),b},a}(),DoppioTest=function(){function a(a,b){this.outputCapturer=new OutputCapturer,this.opts=a,-1!==b.indexOf(\".\")&&(b=util.descriptor2typestr(util.int_classname(b))),this.cls=b,this.outFile=path.resolve(a.doppioHomePath,b)+\".runout\"}return a.prototype.constructJVM=function(a){new JVM(util.merge(JVM.getDefaultOptions(this.opts.doppioHomePath),this.opts,{classpath:[this.opts.doppioHomePath],enableAssertions:!0,enableSystemAssertions:!0}),a)},a.prototype.run=function(a,b){var c=this,d=this.outputCapturer,e=null,f=!1,g=!1,h=!1;a(function(a){if(e)try{e.halt(1)}catch(c){a.message+=\"\\n\\nAdditionally, test runner received the following error while trying to halt the JVM: \"+c+(c.stack?\"\\n\\n\"+c.stack:\"\")+\"\\n\\nOriginal error's stack trace:\"}d.stop(),b(makeTestingError(\"Uncaught error. Aborting further tests.\\n\t\"+a+(a.stack?\"\\n\\n\"+a.stack:\"\"),a,!0))}),this.constructJVM(function(a,i){if(e=i,!f){if(g)return b(makeTestingError(\"constructJVM returned twice. Aborting further tests.\",null,!0));g=!0,a?b(makeTestingError(\"Could not construct JVM:\\n\"+a,a)):(d.start(!0),i.runClass(c.cls,[],function(a){if(!f){if(d.stop(),h)return b(makeTestingError(\"JVM triggered completion callback twice. Aborting further tests.\",null,!0));h=!0;var e=d.getOutput(!0);fs.readFile(c.outFile,{encoding:\"utf8\"},function(a,c){if(a)b(makeTestingError(\"Could not read runout file:\\n\"+a,a));else{var d=diff(e,c),f=null;null!==d&&(f=\"Output does not match native JVM.\"),b(f?makeTestingError(f):null,e,c,d)}})}}))}})},a}();exports.DoppioTest=DoppioTest,exports.getTests=getTests,exports.diff=diff,exports.runTests=runTests;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BrowserFS = __webpack_require__(4);module.exports=BrowserFS.BFSRequire('process');\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar require;/* WEBPACK VAR INJECTION */(function(process) {\"use strict\";var util=__webpack_require__(6),SafeMap=__webpack_require__(10),methods=__webpack_require__(11),ClassLoader=__webpack_require__(20),fs=__webpack_require__(27),path=__webpack_require__(28),buffer=__webpack_require__(29),threading_1=__webpack_require__(15),enums_1=__webpack_require__(9),Heap=__webpack_require__(30),assert=__webpack_require__(13),Parker=__webpack_require__(31),threadpool_1=__webpack_require__(32),JDKInfo=__webpack_require__(33),BrowserFS=__webpack_require__(4),deflate=__webpack_require__(34),inflate=__webpack_require__(40),zstream=__webpack_require__(43),crc32=__webpack_require__(38),adler32=__webpack_require__(37),pkg;pkg=util.are_in_browser()?__webpack_require__(44):__webpack_require__(44);var coreClasses=[\"Ljava/lang/String;\",\"Ljava/lang/Class;\",\"Ljava/lang/ClassLoader;\",\"Ljava/lang/reflect/Constructor;\",\"Ljava/lang/reflect/Field;\",\"Ljava/lang/reflect/Method;\",\"Ljava/lang/Error;\",\"Ljava/lang/StackTraceElement;\",\"Ljava/lang/System;\",\"Ljava/lang/Thread;\",\"Ljava/lang/ThreadGroup;\",\"Ljava/lang/Throwable;\",\"Ljava/nio/ByteOrder;\",\"Lsun/misc/VM;\",\"Lsun/reflect/ConstantPool;\",\"Ljava/lang/Byte;\",\"Ljava/lang/Character;\",\"Ljava/lang/Double;\",\"Ljava/lang/Float;\",\"Ljava/lang/Integer;\",\"Ljava/lang/Long;\",\"Ljava/lang/Short;\",\"Ljava/lang/Void;\",\"Ljava/io/FileDescriptor;\",\"Ljava/lang/Boolean;\",\"[Lsun/management/MemoryManagerImpl;\",\"[Lsun/management/MemoryPoolImpl;\",\"Lsun/nio/fs/UnixConstants;\"],JVM=function(){function JVM(a,b){var c=this;if(this.systemProperties=null,this.internedStrings=new SafeMap,this.bsCl=null,this.threadPool=null,this.natives={},this.heap=new Heap(20971520),this.nativeClasspath=null,this.startupTime=new Date,this.terminationCb=null,this.firstThread=null,this.responsiveness=null,this.enableSystemAssertions=!1,this.enabledAssertions=!1,this.disabledAssertions=[],this.printJITCompilation=!1,this.systemClassLoader=null,this.nextRef=0,this.vtraceMethods={},this.dumpCompiledCodeDir=null,this.parker=new Parker,this.status=enums_1.JVMStatus.BOOTING,this.exitCode=0,this.jitDisabled=!1,this.dumpJITStats=!1,\"string\"!=typeof a.doppioHomePath)throw new TypeError(\"opts.doppioHomePath *must* be specified.\");a=util.merge(JVM.getDefaultOptions(a.doppioHomePath),a),this.jitDisabled=a.intMode,this.dumpJITStats=a.dumpJITStats;var d,e,f=a.bootstrapClasspath.map(function(a){return path.resolve(a)}),g=[];if(!Array.isArray(a.bootstrapClasspath)||0===a.bootstrapClasspath.length)throw new TypeError(\"opts.bootstrapClasspath must be specified as an array of file paths.\");if(!Array.isArray(a.classpath))throw new TypeError(\"opts.classpath must be specified as an array of file paths.\");if(\"string\"!=typeof a.javaHomePath)throw new TypeError(\"opts.javaHomePath must be specified.\");if(!Array.isArray(a.nativeClasspath)||0===a.nativeClasspath.length)throw new TypeError(\"opts.nativeClasspath must be specified as an array of file paths.\");this.nativeClasspath=a.nativeClasspath,a.enableSystemAssertions&&(this.enableSystemAssertions=a.enableSystemAssertions),a.enableAssertions&&(this.enabledAssertions=a.enableAssertions),a.disableAssertions&&(this.disabledAssertions=a.disableAssertions),this.responsiveness=a.responsiveness,this._initSystemProperties(f,a.classpath.map(function(a){return path.resolve(a)}),path.resolve(a.javaHomePath),path.resolve(a.tmpDir),a.properties),g.push(function(a){c.initializeNatives(a)}),g.push(function(a){c.bsCl=new ClassLoader.BootstrapClassLoader(c.systemProperties[\"java.home\"],f,a)}),g.push(function(a){c.threadPool=new threadpool_1[\"default\"](function(){return c.threadPoolIsEmpty()}),c.bsCl.resolveClass(null,\"Ljava/lang/Thread;\",function(b){null==b?a(\"Failed to resolve java/lang/Thread.\"):(e=new(b.getConstructor(null))(null),e.$thread=d=c.firstThread=new threading_1.JVMThread(c,c.threadPool,e),e.ref=1,e[\"java/lang/Thread/priority\"]=5,e[\"java/lang/Thread/name\"]=util.initCarr(c.bsCl,\"main\"),e[\"java/lang/Thread/blockerLock\"]=new(c.bsCl.getResolvedClass(\"Ljava/lang/Object;\").getConstructor(d))(d),a())})}),g.push(function(a){util.asyncForEach(coreClasses,function(a,b){c.bsCl.initializeClass(d,a,function(c){if(null==c)b(\"Failed to initialize \"+a);else if(\"Ljava/lang/ThreadGroup;\"===a){var f=c.getConstructor(d),g=new f(d);g[\"<init>()V\"](d,null,function(a){e[\"java/lang/Thread/group\"]=g,b(a)})}else b()})},a)}),g.push(function(a){var b=c.bsCl.getInitializedClass(d,\"Ljava/lang/System;\").getConstructor(d);b[\"java/lang/System/initializeSystemClass()V\"](d,null,a)}),g.push(function(a){var b=c.bsCl.getInitializedClass(d,\"Ljava/lang/ClassLoader;\").getConstructor(d);b[\"java/lang/ClassLoader/getSystemClassLoader()Ljava/lang/ClassLoader;\"](d,null,function(b,f){if(b)a(b);else{c.systemClassLoader=f.$loader,e[\"java/lang/Thread/contextClassLoader\"]=f;var g=c.enabledAssertions===!0?1:0;f[\"java/lang/ClassLoader/setDefaultAssertionStatus(Z)V\"](d,[g],a)}})}),g.push(function(a){c.bsCl.initializeClass(d,\"Ldoppio/security/DoppioProvider;\",function(b){a(b?null:new Error(\"Failed to initialize DoppioProvider.\"))})}),util.asyncSeries(g,function(a){setImmediate(function(){a?(c.status=enums_1.JVMStatus.TERMINATED,b(a)):(c.status=enums_1.JVMStatus.BOOTED,b(null,c))})})}return JVM.prototype.getResponsiveness=function(){var a=this.responsiveness;return\"number\"==typeof a?a:\"function\"==typeof a?a():void 0},JVM.getDefaultOptions=function(a){var b=path.join(a,\"vendor\",\"java_home\");return{doppioHomePath:a,classpath:[\".\"],bootstrapClasspath:JDKInfo.classpath.map(function(a){return path.join(b,a)}),javaHomePath:b,nativeClasspath:[path.join(a,\"natives\")],enableSystemAssertions:!1,enableAssertions:!1,disableAssertions:null,properties:{},tmpDir:\"/tmp\",responsiveness:1e3,intMode:!1,dumpJITStats:!1}},JVM.getCompiledJDKURL=function(){return JDKInfo.url},JVM.getJDKInfo=function(){return JDKInfo},JVM.prototype.getSystemClassLoader=function(){return this.systemClassLoader},JVM.isReleaseBuild=function(){return!0},JVM.prototype.getNextRef=function(){return this.nextRef++},JVM.prototype.getParker=function(){return this.parker},JVM.prototype.runClass=function(a,b,c){var d=this;if(this.status!==enums_1.JVMStatus.BOOTED)switch(this.status){case enums_1.JVMStatus.BOOTING:throw new Error(\"JVM is currently booting up. Please wait for it to call the bootup callback, which you passed to the constructor.\");case enums_1.JVMStatus.RUNNING:throw new Error(\"JVM is already running.\");case enums_1.JVMStatus.TERMINATED:throw new Error(\"This JVM has already terminated. Please create a new JVM.\");case enums_1.JVMStatus.TERMINATING:throw new Error(\"This JVM is currently terminating. You should create a new JVM for each class you wish to run.\")}this.terminationCb=c;var e=this.firstThread;a=util.int_classname(a),this.systemClassLoader.initializeClass(e,a,function(c){if(null!=c){var f,g=d.bsCl.getInitializedClass(e,\"[Ljava/lang/String;\").getConstructor(e),h=new g(e,b.length);for(f=0;f<b.length;f++)h.array[f]=util.initString(d.bsCl,b[f]);d.status=enums_1.JVMStatus.RUNNING;var i=c.getConstructor(e);i[\"main([Ljava/lang/String;)V\"]?i[\"main([Ljava/lang/String;)V\"](e,[h]):e.throwNewException(\"Ljava/lang/NoSuchMethodError;\",\"Could not find main method in class \"+c.getExternalName()+\".\")}else process.stdout.write(\"Error: Could not find or load main class \"+util.ext_classname(a)+\"\\n\"),d.terminationCb(1)})},JVM.prototype.isJITDisabled=function(){return this.jitDisabled},JVM.prototype.shouldVtrace=function(a){return this.vtraceMethods[a]===!0},JVM.prototype.vtraceMethod=function(a){this.vtraceMethods[a]=!0},JVM.prototype.runJar=function(a,b){this.runClass(\"doppio.JarLauncher\",a,b)},JVM.prototype.threadPoolIsEmpty=function(){var a,b;switch(this.status){case enums_1.JVMStatus.BOOTING:return!1;case enums_1.JVMStatus.BOOTED:return!1;case enums_1.JVMStatus.RUNNING:return this.status=enums_1.JVMStatus.TERMINATING,a=this.bsCl.getInitializedClass(this.firstThread,\"Ljava/lang/System;\"),b=a.getConstructor(this.firstThread),b[\"java/lang/System/exit(I)V\"](this.firstThread,[0]),!1;case enums_1.JVMStatus.TERMINATED:return!1;case enums_1.JVMStatus.TERMINATING:return this.status=enums_1.JVMStatus.TERMINATED,this.terminationCb&&this.terminationCb(this.exitCode),this.firstThread.close(),!0}},JVM.prototype.hasVMBooted=function(){return!(this.status===enums_1.JVMStatus.BOOTING||this.status===enums_1.JVMStatus.BOOTED)},JVM.prototype.halt=function(a){this.exitCode=a,this.status=enums_1.JVMStatus.TERMINATING,this.threadPool.getThreads().forEach(function(a){a.setStatus(enums_1.ThreadStatus.TERMINATED)})},JVM.prototype.getSystemProperty=function(a){return this.systemProperties[a]},JVM.prototype.getSystemPropertyNames=function(){return Object.keys(this.systemProperties)},JVM.prototype.getHeap=function(){return this.heap},JVM.prototype.internString=function(a,b){return this.internedStrings.has(a)?this.internedStrings.get(a):(b||(b=util.initString(this.bsCl,a)),this.internedStrings.set(a,b),b)},JVM.prototype.evalNativeModule=function(mod){var rv,DoppioJVM=__webpack_require__(1),Buffer=buffer.Buffer,process2=process,savedRequire=\"undefined\"!=typeof require?require:function(a){throw new Error(\"Cannot find module \"+a)};return function(){function registerNatives(a){rv=a}eval(\"\\nvar process = process2;\\nfunction require(name) {\\n  switch(name) {\\n    case 'doppiojvm':\\n    case '../doppiojvm':\\n      return DoppioJVM;\\n    case 'fs':\\n      return fs;\\n    case 'path':\\n      return path;\\n    case 'buffer':\\n      return buffer;\\n    case 'browserfs':\\n      return BrowserFS;\\n    case 'pako/lib/zlib/zstream':\\n      return zstream;\\n    case 'pako/lib/zlib/inflate':\\n      return inflate;\\n    case 'pako/lib/zlib/deflate':\\n      return deflate;\\n    case 'pako/lib/zlib/crc32':\\n      return crc32;\\n    case 'pako/lib/zlib/adler32':\\n      return adler32;\\n    case 'crypto':\\n      return util.are_in_browser() ? null : savedRequire('crypto');\\n    default:\\n      return savedRequire(name);\\n  }\\n}\\n/**\\n * Emulate AMD module 'define' function for natives compiled as AMD modules.\\n */\\nfunction define(resources, module) {\\n  var args = [];\\n  resources.forEach(function(resource) {\\n    switch (resource) {\\n      case 'require':\\n        args.push(require);\\n        break;\\n      case 'exports':\\n        args.push({});\\n        break;\\n      default:\\n        args.push(require(resource));\\n        break;\\n    }\\n  });\\n  module.apply(null, args);\\n}\\neval(mod);\\n\")}(),rv},JVM.prototype.registerNatives=function(a){var b,c;for(b in a)if(a.hasOwnProperty(b)){this.natives.hasOwnProperty(b)||(this.natives[b]={});var d=a[b];for(c in d)d.hasOwnProperty(c)&&(this.natives[b][c]=d[c])}},JVM.prototype.registerNative=function(a,b,c){this.registerNatives({clsName:{methSig:c}})},JVM.prototype.getNative=function(a,b){if(a=util.descriptor2typestr(a),this.natives.hasOwnProperty(a)){var c=this.natives[a];if(c.hasOwnProperty(b))return c[b]}return null},JVM.prototype.getNatives=function(){return this.natives},JVM.prototype.initializeNatives=function(a){var b=this,c=function(){if(d===b.nativeClasspath.length){var f=e.length;e.forEach(function(c){fs.readFile(c,function(c,d){c||b.registerNatives(b.evalNativeModule(d.toString())),0===--f&&a()})})}else{var g=b.nativeClasspath[d++];fs.readdir(g,function(b,d){if(b)return a();var f,h;for(f=0;f<d.length;f++)h=d[f],\".js\"===h.substring(h.length-3,h.length)&&e.push(path.join(g,h));c()})}},d=0,e=[];c()},JVM.prototype._initSystemProperties=function(a,b,c,d,e){this.systemProperties=util.merge({\"java.class.path\":b.join(\":\"),\"java.home\":c,\"java.ext.dirs\":path.join(c,\"lib\",\"ext\"),\"java.io.tmpdir\":d,\"sun.boot.class.path\":a.join(\":\"),\"file.encoding\":\"UTF-8\",\"java.vendor\":\"Doppio\",\"java.version\":\"1.8\",\"java.vendor.url\":\"https://github.com/plasma-umass/doppio\",\"java.class.version\":\"52.0\",\"java.specification.version\":\"1.8\",\"line.separator\":\"\\n\",\"file.separator\":path.sep,\"path.separator\":\":\",\"user.dir\":path.resolve(\".\"),\"user.home\":\".\",\"user.name\":\"DoppioUser\",\"os.name\":\"doppio\",\"os.arch\":\"js\",\"os.version\":\"0\",\"java.vm.name\":\"DoppioJVM 32-bit VM\",\"java.vm.version\":pkg.version,\"java.vm.vendor\":\"PLASMA@UMass\",\"java.awt.headless\":util.are_in_browser().toString(),\"java.awt.graphicsenv\":\"classes.awt.CanvasGraphicsEnvironment\",\"jline.terminal\":\"jline.UnsupportedTerminal\",\"sun.arch.data.model\":\"32\",\"sun.jnu.encoding\":\"UTF-8\"},e)},JVM.prototype.getBootstrapClassLoader=function(){return this.bsCl},JVM.prototype.getStartupTime=function(){return this.startupTime},JVM.prototype.areSystemAssertionsEnabled=function(){return this.enableSystemAssertions},JVM.prototype.getEnabledAssertions=function(){return this.enabledAssertions},JVM.prototype.getDisabledAssertions=function(){return this.disabledAssertions},JVM.prototype.setPrintJITCompilation=function(a){this.printJITCompilation=a},JVM.prototype.shouldPrintJITCompilation=function(){return this.printJITCompilation},JVM.prototype.dumpCompiledCode=function(a){this.dumpCompiledCodeDir=a},JVM.prototype.shouldDumpCompiledCode=function(){return null!==this.dumpCompiledCodeDir},JVM.prototype.dumpObjectDefinition=function(a,b){this.shouldDumpCompiledCode()&&fs.writeFile(path.resolve(this.dumpCompiledCodeDir,a.getExternalName()+\"_object.dump\"),b,function(){})},JVM.prototype.dumpBridgeMethod=function(a,b){this.shouldDumpCompiledCode()&&fs.appendFile(path.resolve(this.dumpCompiledCodeDir,\"vmtarget_bridge_methods.dump\"),a+\":\\n\"+b+\"\\n\\n\",function(){})},JVM.prototype.dumpState=function(a,b){fs.appendFile(a,this.threadPool.getThreads().map(function(a){return\"Thread \"+a.getRef()+\":\\n\"+a.getPrintableStackTrace()}).join(\"\\n\\n\"),b)},JVM}();module.exports=JVM;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, Buffer) {\"use strict\";function merge(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];var c={};return a.forEach(function(a){Object.keys(a).forEach(function(b){c[b]=a[b]})}),c}function are_in_browser(){return\"browser\"===process.platform}function jvmName2JSName(a){switch(a[0]){case\"L\":return a.slice(1,a.length-1).replace(/_/g,\"__\").replace(/[\\/.;$<>\\[\\]:\\\\=^-]/g,\"_\");case\"[\":return\"ARR_\"+jvmName2JSName(a.slice(1));default:return a}}function reescapeJVMName(a){return a.replace(/\\\\/g,\"\\\\\\\\\")}function asyncForEach(a,b,c){function d(f){f?c(f):(e++,e<a.length?b(a[e],d):c())}var e=-1;d()}function asyncSeries(a,b){function c(e){e?b(e):(d++,d<a.length?a[d](c):b())}var d=-1;c()}function asyncFind(a,b,c){function d(f){f?c(a[e]):(e++,e<a.length?b(a[e],d):c())}var e=-1;d(!1)}function checkAccess(a,b,c){return c.isPublic()?!0:c.isProtected()?a.getPackageName()===b.getPackageName()||a.isSubclass(b):c.isPrivate()?a===b:a.getPackageName()===b.getPackageName()}function float2int(a){return a>enums.Constants.INT_MAX?enums.Constants.INT_MAX:a<enums.Constants.INT_MIN?enums.Constants.INT_MIN:0|a}function byteArray2Buffer(a,b,c){if(void 0===b&&(b=0),void 0===c&&(c=a.length),supportsArrayBuffers&&ArrayBuffer.isView(a)){var d=a.byteOffset;return new Buffer(a.buffer.slice(d,d+a.length))}var e,f=new Buffer(c);for(e=0;c>e;e++)f.writeInt8(a[b+e],e);return f}function isUint8Array(a){return!!(a&&\"undefined\"!=typeof Uint8Array&&a instanceof Uint8Array)}function isInt8Array(a){return!!(a&&\"undefined\"!=typeof Int8Array&&a instanceof Int8Array)}function i82u8(a,b,c){if(isInt8Array(a))return new Uint8Array(a.buffer,a.byteOffset+b,c);if(Array.isArray(a)){if(\"undefined\"!=typeof Uint8Array){var d=new Int8Array(c);return 0===b&&c===a.length?d.set(a,0):d.set(a.slice(b,b+c),0),new Uint8Array(d.buffer)}for(var e=new Array(c),f=0;c>f;f++)e[f]=255&a[b+f];return e}throw new TypeError(\"Invalid array.\")}function u82i8(a,b,c){if(isUint8Array(a))return new Int8Array(a.buffer,a.byteOffset+b,c);if(Array.isArray(a)){if(\"undefined\"!=typeof Int8Array){var d=new Uint8Array(c);return 0===b&&c===a.length?d.set(a,0):d.set(a.slice(b,b+c),0),new Int8Array(d.buffer)}for(var e=new Array(c),f=0;c>f;f++)e[f]=a[b+f],e[f]>127&&(e[f]|=4294967168);return e}throw new TypeError(\"Invalid array.\")}function buff2i8(a){var b=BFSUtils.buffer2Arrayish(a);return u82i8(b,0,b.length)}function wrapFloat(a){return a>3.4028234663852886e38?Number.POSITIVE_INFINITY:a>0&&1.401298464324817e-45>a?0:-3.4028234663852886e38>a?Number.NEGATIVE_INFINITY:0>a&&a>-1.401298464324817e-45?0:a}function chars2jsStr(a,b,c){void 0===b&&(b=0),void 0===c&&(c=a.array.length);var d,e=a.array,f=\"\",g=b+c;for(d=b;g>d;d++)f+=String.fromCharCode(e[d]);return f}function bytestr2Array(a){for(var b=[],c=0;c<a.length;c++)b.push(a.charCodeAt(c));return b}function array2bytestr(a){for(var b=\"\",c=0;c<a.length;c++)b+=String.fromCharCode(a[c]);return b}function initialValue(a){if(\"J\"===a)return gLong.ZERO;var b=a[0];return\"[\"===b||\"L\"===b?null:0}function ext_classname(a){return descriptor2typestr(a).replace(/\\//g,\".\")}function int_classname(a){return typestr2descriptor(a.replace(/\\./g,\"/\"))}function verify_int_classname(a){var b=a.match(/^\\[*/)[0].length;if(b>255)return!1;if(b>0&&(a=a.slice(b)),\"L\"===a[0]){if(\";\"!==a[a.length-1])return!1;a=a.slice(1,-1)}if(a in exports.internal2external)return!0;if(a.match(/\\/{2,}/))return!1;for(var c=a.split(\"/\"),d=0;d<c.length;d++)if(c[d].match(/[^$_a-z0-9]/i))return!1;return!0}function getTypes(a){var b,c=0,d=[];for(c=0;c<a.length;c++)switch(a.charAt(c)){case\"(\":case\")\":break;case\"L\":b=a.indexOf(\";\",c),d.push(a.slice(c,b+1)),c=b;break;case\"[\":for(b=c+1;\"[\"===a.charAt(b);)b++;\"L\"===a.charAt(b)?(b=a.indexOf(\";\",b),d.push(a.slice(c,b+1))):d.push(a.slice(c,b+1)),c=b;break;default:d.push(a.charAt(c))}return d}function get_component_type(a){return a.slice(1)}function is_array_type(a){return\"[\"===a[0]}function is_primitive_type(a){return a in exports.internal2external}function is_reference_type(a){return\"L\"===a[0]}function descriptor2typestr(a){var b=a[0];if(b in exports.internal2external)return exports.internal2external[b];if(\"L\"===b)return a.slice(1,-1);if(\"[\"===b)return a;throw new Error(\"Unrecognized type string: \"+a)}function carr2descriptor(a){var b=a.shift();if(null==b)return null;if(void 0!==exports.internal2external[b])return b;if(\"L\"===b){for(var c=\"L\";\";\"!==(b=a.shift());)c+=b;return c+\";\"}if(\"[\"===b)return\"[\"+carr2descriptor(a);throw a.unshift(b),new Error(\"Unrecognized descriptor: \"+a.join(\"\"))}function typestr2descriptor(a){return void 0!==exports.external2internal[a]?exports.external2internal[a]:\"[\"===a[0]?a:\"L\"+a+\";\"}function unboxArguments(a,b,c){var d,e,f,g=[];for(d=0;d<b.length;d++)e=b[d],f=c[d],is_primitive_type(e)?(g.push(f.unbox()),\"J\"!==e&&\"D\"!==e||g.push(null)):g.push(f);return g}function createMethodType(a,b,c,d){b.initializeClass(a,\"Ljava/lang/invoke/MethodHandleNatives;\",function(e){if(null!==e){var f=e.getConstructor(a),g=getTypes(c);g.push(\"[Ljava/lang/Class;\"),b.resolveClasses(a,g,function(b){var c=g.map(function(c){return b[c].getClassObject(a)});c.pop();var e=c.pop(),h=b[\"[Ljava/lang/Class;\"].getConstructor(a),i=new h(a,c.length);i.array=c,f[\"java/lang/invoke/MethodHandleNatives/findMethodHandleType(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;\"](a,[e,i],d)})}})}function getMethodDescriptorWordSize(a){var b,c,d=getTypes(a),e=d.length-1;for(d.pop(),b=0;b<d.length;b++)c=d[b],\"D\"!==c&&\"J\"!==c||e++;return e}function getDescriptorString(a,b){var c=\"(\";return void 0!==b&&null!==b&&b.array.forEach(function(a){c+=a.$cls.getInternalName()}),c+=\")\"+a.$cls.getInternalName()}function getLoader(a,b){return null!=b&&null!=b.$loader?b.$loader:a.getBsCl()}function arraycopyNoCheck(a,b,c,d,e){for(var f=d,g=b+e,h=b;g>h;h++)c.array[f++]=a.array[h]}function arraycopyCheck(a,b,c,d,e,f){for(var g=e,h=c+f,i=d.getClass().getComponentClass(),j=c;h>j;j++){if(null!==b.array[j]&&!b.array[j].getClass().isCastable(i))return void a.throwNewException(\"Ljava/lang/ArrayStoreException;\",\"Array element in src cannot be cast to dest array type.\");d.array[g]=b.array[j],g++}}function initString(a,b){var c=initCarr(a,b),d=a.getResolvedClass(\"Ljava/lang/String;\").getConstructor(null),e=new d(null);return e[\"java/lang/String/value\"]=c,e}function initCarr(a,b){for(var c=a.getInitializedClass(null,\"[C\").getConstructor(null),d=new c(null,b.length),e=d.array,f=0;f<b.length;f++)e[f]=b.charCodeAt(f);return d}function newArrayFromClass(a,b,c){return new(b.getConstructor(a))(a,c)}function newArray(a,b,c,d){var e=b.getInitializedClass(a,c);return newArrayFromClass(a,e,d)}function multiNewArray(a,b,c,d){var e=b.getInitializedClass(a,c);return new(e.getConstructor(a))(a,d)}function newObjectFromClass(a,b){return new(b.getConstructor(a))(a)}function newObject(a,b,c){var d=b.getInitializedClass(a,c);return newObjectFromClass(a,d)}function getStaticFields(a,b,c){return b.getInitializedClass(a,c).getConstructor(a)}function newArrayFromDataWithClass(a,b,c){var d=newArrayFromClass(a,b,0);return d.array=c,d}function newArrayFromData(a,b,c,d){var e=newArray(a,b,c,0);return e.array=d,e}function boxClassName(a){switch(a){case\"B\":return\"Ljava/lang/Byte;\";case\"C\":return\"Ljava/lang/Character;\";case\"D\":return\"Ljava/lang/Double;\";case\"F\":return\"Ljava/lang/Float;\";case\"I\":return\"Ljava/lang/Integer;\";case\"J\":return\"Ljava/lang/Long;\";case\"S\":return\"Ljava/lang/Short;\";case\"Z\":return\"Ljava/lang/Boolean;\";case\"V\":return\"Ljava/lang/Void;\";default:throw new Error(\"Tried to box a non-primitive class: \"+this.className)}}function boxPrimitiveValue(a,b,c){var d=a.getBsCl().getInitializedClass(a,boxClassName(b)),e=d.getConstructor(a);return e.box(c)}function boxArguments(a,b,c,d,e,f){void 0===f&&(f=0);var g,h,i=getTypes(c),j=newArrayFromClass(a,b,i.length-(e?1:2)-f),k=0,l=j.array;for(i.pop(),e||i.shift(),f>0&&(i=i.slice(f),d=d.slice(f)),g=0;g<i.length;g++){switch(h=i[g],h[0]){case\"[\":case\"L\":l[g]=d[k];break;case\"J\":case\"D\":l[g]=boxPrimitiveValue(a,h,d[k]),k++;break;default:l[g]=boxPrimitiveValue(a,h,d[k])}k++}return j}function forwardResult(a){return function(b,c){b?a.throwException(b):a.asyncReturn(c)}}var gLong=__webpack_require__(8),enums=__webpack_require__(9),BrowserFS=__webpack_require__(4),BFSUtils=BrowserFS.BFSRequire(\"bfs_utils\");exports.merge=merge,exports.are_in_browser=are_in_browser,exports.typedArraysSupported=\"undefined\"!=typeof ArrayBuffer,exports.jvmName2JSName=jvmName2JSName,exports.reescapeJVMName=reescapeJVMName,exports.asyncForEach=asyncForEach,exports.asyncSeries=asyncSeries,exports.asyncFind=asyncFind,Math.imul||(Math.imul=function(a,b){var c=a>>>16&65535,d=65535&a,e=b>>>16&65535,f=65535&b;return d*f+(c*f+d*e<<16>>>0)|0}),Math.expm1||(Math.expm1=function(a){return Math.abs(a)<1e-5?a+.5*a*a:Math.exp(a)-1}),Math.sinh||(Math.sinh=function(a){var b=Math.exp(a);return(b-1/b)/2}),Array.prototype.indexOf||(Array.prototype.indexOf=function(a,b){if(null==this)throw new TypeError;var c=Object(this),d=c.length>>>0;if(0===d)return-1;var e=0;if(void 0!==b&&(e=Number(b),e!=e?e=0:0!=e&&e!=1/0&&e!=-(1/0)&&(e=((e>0?1:0)||-1)*Math.floor(Math.abs(e)))),e>=d)return-1;for(var f=e>=0?e:Math.max(d-Math.abs(e),0);d>f;f++)if(f in c&&c[f]===a)return f;return-1}),exports.checkAccess=checkAccess,exports.float2int=float2int;var supportsArrayBuffers=\"undefined\"!=typeof ArrayBuffer;exports.byteArray2Buffer=byteArray2Buffer,exports.isUint8Array=isUint8Array,exports.isInt8Array=isInt8Array,exports.i82u8=i82u8,exports.u82i8=u82i8,exports.buff2i8=buff2i8,exports.wrapFloat=wrapFloat,exports.chars2jsStr=chars2jsStr,exports.bytestr2Array=bytestr2Array,exports.array2bytestr=array2bytestr,function(a){a[a.PUBLIC=1]=\"PUBLIC\",a[a.PRIVATE=2]=\"PRIVATE\",a[a.PROTECTED=4]=\"PROTECTED\",a[a.STATIC=8]=\"STATIC\",a[a.FINAL=16]=\"FINAL\",a[a.SYNCHRONIZED=32]=\"SYNCHRONIZED\",a[a.SUPER=32]=\"SUPER\",a[a.VOLATILE=64]=\"VOLATILE\",a[a.TRANSIENT=128]=\"TRANSIENT\",a[a.VARARGS=128]=\"VARARGS\",a[a.NATIVE=256]=\"NATIVE\",a[a.INTERFACE=512]=\"INTERFACE\",a[a.ABSTRACT=1024]=\"ABSTRACT\",a[a.STRICT=2048]=\"STRICT\"}(exports.FlagMasks||(exports.FlagMasks={}));var FlagMasks=exports.FlagMasks,Flags=function(){function a(a){this[\"byte\"]=a}return a.prototype.isPublic=function(){return(this[\"byte\"]&FlagMasks.PUBLIC)>0},a.prototype.isPrivate=function(){return(this[\"byte\"]&FlagMasks.PRIVATE)>0},a.prototype.isProtected=function(){return(this[\"byte\"]&FlagMasks.PROTECTED)>0},a.prototype.isStatic=function(){return(this[\"byte\"]&FlagMasks.STATIC)>0},a.prototype.isFinal=function(){return(this[\"byte\"]&FlagMasks.FINAL)>0},a.prototype.isSynchronized=function(){return(this[\"byte\"]&FlagMasks.SYNCHRONIZED)>0},a.prototype.isSuper=function(){return(this[\"byte\"]&FlagMasks.SUPER)>0},a.prototype.isVolatile=function(){return(this[\"byte\"]&FlagMasks.VOLATILE)>0},a.prototype.isTransient=function(){return(this[\"byte\"]&FlagMasks.TRANSIENT)>0},a.prototype.isNative=function(){return(this[\"byte\"]&FlagMasks.NATIVE)>0},a.prototype.isInterface=function(){return(this[\"byte\"]&FlagMasks.INTERFACE)>0},a.prototype.isAbstract=function(){return(this[\"byte\"]&FlagMasks.ABSTRACT)>0},a.prototype.isStrict=function(){return(this[\"byte\"]&FlagMasks.STRICT)>0},a.prototype.setNative=function(a){a?this[\"byte\"]=this[\"byte\"]|FlagMasks.NATIVE:this[\"byte\"]=this[\"byte\"]&~FlagMasks.NATIVE},a.prototype.isVarArgs=function(){return(this[\"byte\"]&FlagMasks.VARARGS)>0},a.prototype.getRawByte=function(){return this[\"byte\"]},a}();exports.Flags=Flags,exports.initialValue=initialValue,exports.ext_classname=ext_classname,exports.int_classname=int_classname,exports.verify_int_classname=verify_int_classname,exports.internal2external={B:\"byte\",C:\"char\",D:\"double\",F:\"float\",I:\"int\",J:\"long\",S:\"short\",V:\"void\",Z:\"boolean\"},exports.external2internal={};for(var k in exports.internal2external)exports.external2internal[exports.internal2external[k]]=k;exports.getTypes=getTypes,exports.get_component_type=get_component_type,exports.is_array_type=is_array_type,exports.is_primitive_type=is_primitive_type,exports.is_reference_type=is_reference_type,exports.descriptor2typestr=descriptor2typestr,exports.carr2descriptor=carr2descriptor,exports.typestr2descriptor=typestr2descriptor,exports.unboxArguments=unboxArguments,exports.createMethodType=createMethodType,exports.getMethodDescriptorWordSize=getMethodDescriptorWordSize,exports.getDescriptorString=getDescriptorString,exports.getLoader=getLoader,exports.arraycopyNoCheck=arraycopyNoCheck,exports.arraycopyCheck=arraycopyCheck,exports.initString=initString,exports.initCarr=initCarr,exports.newArrayFromClass=newArrayFromClass,exports.newArray=newArray,exports.multiNewArray=multiNewArray,exports.newObjectFromClass=newObjectFromClass,exports.newObject=newObject,exports.getStaticFields=getStaticFields,exports.newArrayFromDataWithClass=newArrayFromDataWithClass,exports.newArrayFromData=newArrayFromData,exports.boxClassName=boxClassName,exports.boxPrimitiveValue=boxPrimitiveValue,exports.boxArguments=boxArguments,exports.forwardResult=forwardResult;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(7)))\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BrowserFS = __webpack_require__(4);module.exports=BrowserFS.BFSRequire('buffer').Buffer;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";var gLong=function(){function a(a,b){this.low_=0|a,this.high_=0|b}return a.fromInt=function(b){if(b>=-128&&128>b){var c=a.IntCache_[b];if(c)return c}var d=new a(b,0>b?-1:0);return b>=-128&&128>b&&(a.IntCache_[b]=d),d},a.fromNumber=function(b){return isNaN(b)||!isFinite(b)?a.ZERO:b<=-a.TWO_PWR_63_DBL_?a.MIN_VALUE:b+1>=a.TWO_PWR_63_DBL_?a.MAX_VALUE:0>b?a.fromNumber(-b).negate():new a(b%a.TWO_PWR_32_DBL_|0,b/a.TWO_PWR_32_DBL_|0)},a.fromBits=function(b,c){return new a(b,c)},a.fromString=function(b,c){if(0==b.length)throw Error(\"number format error: empty string\");var d=c||10;if(2>d||d>36)throw Error(\"radix out of range: \"+d);if(\"-\"==b.charAt(0))return a.fromString(b.substring(1),d).negate();if(b.indexOf(\"-\")>=0)throw Error('number format error: interior \"-\" character: '+b);for(var e=a.fromNumber(Math.pow(d,8)),f=a.ZERO,g=0;g<b.length;g+=8){var h=Math.min(8,b.length-g),i=parseInt(b.substring(g,g+h),d);if(8>h){var j=a.fromNumber(Math.pow(d,h));f=f.multiply(j).add(a.fromNumber(i))}else f=f.multiply(e),f=f.add(a.fromNumber(i))}return f},a.prototype.toInt=function(){return this.low_},a.prototype.toNumber=function(){return this.high_*a.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()},a.prototype.toString=function(b){var c=b||10;if(2>c||c>36)throw Error(\"radix out of range: \"+c);if(this.isZero())return\"0\";if(this.isNegative()){if(this.equals(a.MIN_VALUE)){var d=a.fromNumber(c),e=this.div(d),f=e.multiply(d).subtract(this);return e.toString(c)+f.toInt().toString(c)}return\"-\"+this.negate().toString(c)}for(var g=a.fromNumber(Math.pow(c,6)),f=this,h=\"\";;){var i=f.div(g),j=f.subtract(i.multiply(g)).toInt(),k=j.toString(c);if(f=i,f.isZero())return k+h;for(;k.length<6;)k=\"0\"+k;h=\"\"+k+h}},a.prototype.getHighBits=function(){return this.high_},a.prototype.getLowBits=function(){return this.low_},a.prototype.getLowBitsUnsigned=function(){return this.low_>=0?this.low_:a.TWO_PWR_32_DBL_+this.low_},a.prototype.getNumBitsAbs=function(){if(this.isNegative())return this.equals(a.MIN_VALUE)?64:this.negate().getNumBitsAbs();for(var b=0!=this.high_?this.high_:this.low_,c=31;c>0&&0==(b&1<<c);c--);return 0!=this.high_?c+33:c+1},a.prototype.isZero=function(){return 0==this.high_&&0==this.low_},a.prototype.isNegative=function(){return this.high_<0},a.prototype.isOdd=function(){return 1==(1&this.low_)},a.prototype.equals=function(a){return this.high_==a.high_&&this.low_==a.low_},a.prototype.notEquals=function(a){return this.high_!=a.high_||this.low_!=a.low_},a.prototype.lessThan=function(a){return this.compare(a)<0},a.prototype.lessThanOrEqual=function(a){return this.compare(a)<=0},a.prototype.greaterThan=function(a){return this.compare(a)>0},a.prototype.greaterThanOrEqual=function(a){return this.compare(a)>=0},a.prototype.compare=function(a){if(this.equals(a))return 0;var b=this.isNegative(),c=a.isNegative();return b&&!c?-1:!b&&c?1:this.subtract(a).isNegative()?-1:1},a.prototype.negate=function(){return this.equals(a.MIN_VALUE)?a.MIN_VALUE:this.not().add(a.ONE)},a.prototype.add=function(b){var c=this.high_>>>16,d=65535&this.high_,e=this.low_>>>16,f=65535&this.low_,g=b.high_>>>16,h=65535&b.high_,i=b.low_>>>16,j=65535&b.low_,k=0,l=0,m=0,n=0;return n+=f+j,m+=n>>>16,n&=65535,m+=e+i,l+=m>>>16,m&=65535,l+=d+h,k+=l>>>16,l&=65535,k+=c+g,k&=65535,a.fromBits(m<<16|n,k<<16|l)},a.prototype.subtract=function(a){return this.add(a.negate())},a.prototype.multiply=function(b){if(this.isZero())return a.ZERO;if(b.isZero())return a.ZERO;if(this.equals(a.MIN_VALUE))return b.isOdd()?a.MIN_VALUE:a.ZERO;if(b.equals(a.MIN_VALUE))return this.isOdd()?a.MIN_VALUE:a.ZERO;if(this.isNegative())return b.isNegative()?this.negate().multiply(b.negate()):this.negate().multiply(b).negate();if(b.isNegative())return this.multiply(b.negate()).negate();if(this.lessThan(a.TWO_PWR_24_)&&b.lessThan(a.TWO_PWR_24_))return a.fromNumber(this.toNumber()*b.toNumber());var c=this.high_>>>16,d=65535&this.high_,e=this.low_>>>16,f=65535&this.low_,g=b.high_>>>16,h=65535&b.high_,i=b.low_>>>16,j=65535&b.low_,k=0,l=0,m=0,n=0;return n+=f*j,m+=n>>>16,n&=65535,m+=e*j,l+=m>>>16,m&=65535,m+=f*i,l+=m>>>16,m&=65535,l+=d*j,k+=l>>>16,l&=65535,l+=e*i,k+=l>>>16,l&=65535,l+=f*h,k+=l>>>16,l&=65535,k+=c*j+d*i+e*h+f*g,k&=65535,a.fromBits(m<<16|n,k<<16|l)},a.prototype.div=function(b){if(b.isZero())throw Error(\"division by zero\");if(this.isZero())return a.ZERO;if(this.equals(a.MIN_VALUE)){if(b.equals(a.ONE)||b.equals(a.NEG_ONE))return a.MIN_VALUE;if(b.equals(a.MIN_VALUE))return a.ONE;var c=this.shiftRight(1),d=c.div(b).shiftLeft(1);if(d.equals(a.ZERO))return b.isNegative()?a.ONE:a.NEG_ONE;var e=this.subtract(b.multiply(d)),f=d.add(e.div(b));return f}if(b.equals(a.MIN_VALUE))return a.ZERO;if(this.isNegative())return b.isNegative()?this.negate().div(b.negate()):this.negate().div(b).negate();if(b.isNegative())return this.div(b.negate()).negate();for(var g=a.ZERO,e=this;e.greaterThanOrEqual(b);){var h=Math.max(1,Math.floor(e.toNumber()/b.toNumber())),i=Math.ceil(Math.log(h)/Math.LN2),j=1;i>48&&(j=Math.pow(2,i-48));for(var k=a.fromNumber(h),l=k.multiply(b);l.isNegative()||l.greaterThan(e);)h-=j,k=a.fromNumber(h),l=k.multiply(b);k.isZero()&&(k=a.ONE),g=g.add(k),e=e.subtract(l)}return g},a.prototype.modulo=function(a){return this.subtract(this.div(a).multiply(a))},a.prototype.not=function(){return a.fromBits(~this.low_,~this.high_)},a.prototype.and=function(b){return a.fromBits(this.low_&b.low_,this.high_&b.high_)},a.prototype.or=function(b){return a.fromBits(this.low_|b.low_,this.high_|b.high_)},a.prototype.xor=function(b){return a.fromBits(this.low_^b.low_,this.high_^b.high_)},a.prototype.shiftLeft=function(b){if(b&=63,0==b)return this;var c=this.low_;if(32>b){var d=this.high_;return a.fromBits(c<<b,d<<b|c>>>32-b)}return a.fromBits(0,c<<b-32)},a.prototype.shiftRight=function(b){if(b&=63,0==b)return this;var c=this.high_;if(32>b){var d=this.low_;return a.fromBits(d>>>b|c<<32-b,c>>b)}return a.fromBits(c>>b-32,c>=0?0:-1)},a.prototype.shiftRightUnsigned=function(b){if(b&=63,0==b)return this;var c=this.high_;if(32>b){var d=this.low_;return a.fromBits(d>>>b|c<<32-b,c>>>b)}return 32==b?a.fromBits(c,0):a.fromBits(c>>>b-32,0)},a.IntCache_={},a.TWO_PWR_16_DBL_=65536,a.TWO_PWR_24_DBL_=1<<24,a.TWO_PWR_32_DBL_=a.TWO_PWR_16_DBL_*a.TWO_PWR_16_DBL_,a.TWO_PWR_31_DBL_=a.TWO_PWR_32_DBL_/2,a.TWO_PWR_48_DBL_=a.TWO_PWR_32_DBL_*a.TWO_PWR_16_DBL_,a.TWO_PWR_64_DBL_=a.TWO_PWR_32_DBL_*a.TWO_PWR_32_DBL_,a.TWO_PWR_63_DBL_=a.TWO_PWR_64_DBL_/2,a.ZERO=a.fromInt(0),a.ONE=a.fromInt(1),a.NEG_ONE=a.fromInt(-1),a.MAX_VALUE=a.fromBits(4294967295,2147483647),a.MIN_VALUE=a.fromBits(0,2147483648),a.TWO_PWR_24_=a.fromInt(a.TWO_PWR_24_DBL_),a}();module.exports=gLong;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function assignOpcodeLayout(a,b){b.forEach(function(b){olt[b]=a})}!function(a){a[a.NOT_LOADED=0]=\"NOT_LOADED\",a[a.LOADED=1]=\"LOADED\",a[a.RESOLVED=2]=\"RESOLVED\",a[a.INITIALIZED=3]=\"INITIALIZED\"}(exports.ClassState||(exports.ClassState={}));var ClassState=exports.ClassState;!function(a){a[a.NEW=0]=\"NEW\",a[a.RUNNABLE=1]=\"RUNNABLE\",a[a.BLOCKED=2]=\"BLOCKED\",a[a.UNINTERRUPTABLY_BLOCKED=3]=\"UNINTERRUPTABLY_BLOCKED\",a[a.WAITING=4]=\"WAITING\",a[a.TIMED_WAITING=5]=\"TIMED_WAITING\",a[a.ASYNC_WAITING=6]=\"ASYNC_WAITING\",a[a.PARKED=7]=\"PARKED\",a[a.TERMINATED=8]=\"TERMINATED\"}(exports.ThreadStatus||(exports.ThreadStatus={}));var ThreadStatus=exports.ThreadStatus;!function(a){a[a.ALIVE=1]=\"ALIVE\",a[a.TERMINATED=2]=\"TERMINATED\",a[a.RUNNABLE=4]=\"RUNNABLE\",a[a.BLOCKED_ON_MONITOR_ENTER=1024]=\"BLOCKED_ON_MONITOR_ENTER\",a[a.WAITING_INDEFINITELY=16]=\"WAITING_INDEFINITELY\",a[a.WAITING_WITH_TIMEOUT=32]=\"WAITING_WITH_TIMEOUT\"}(exports.JVMTIThreadState||(exports.JVMTIThreadState={}));var JVMTIThreadState=exports.JVMTIThreadState;!function(a){a[a.TRUE=0]=\"TRUE\",a[a.FALSE=1]=\"FALSE\",a[a.INDETERMINATE=2]=\"INDETERMINATE\"}(exports.TriState||(exports.TriState={}));var TriState=exports.TriState;!function(a){a[a.BOOTING=0]=\"BOOTING\",a[a.BOOTED=1]=\"BOOTED\",a[a.RUNNING=2]=\"RUNNING\",a[a.TERMINATING=3]=\"TERMINATING\",a[a.TERMINATED=4]=\"TERMINATED\"}(exports.JVMStatus||(exports.JVMStatus={}));var JVMStatus=exports.JVMStatus;!function(a){a[a.INTERNAL=0]=\"INTERNAL\",a[a.BYTECODE=1]=\"BYTECODE\",a[a.NATIVE=2]=\"NATIVE\"}(exports.StackFrameType||(exports.StackFrameType={}));var StackFrameType=exports.StackFrameType;!function(a){a[a.INT_MAX=Math.pow(2,31)-1]=\"INT_MAX\",a[a.INT_MIN=-a.INT_MAX-1]=\"INT_MIN\",a[a.FLOAT_POS_INFINITY=Math.pow(2,128)]=\"FLOAT_POS_INFINITY\",a[a.FLOAT_NEG_INFINITY=-1*a.FLOAT_POS_INFINITY]=\"FLOAT_NEG_INFINITY\",a[a.FLOAT_POS_INFINITY_AS_INT=2139095040]=\"FLOAT_POS_INFINITY_AS_INT\",a[a.FLOAT_NEG_INFINITY_AS_INT=-8388608]=\"FLOAT_NEG_INFINITY_AS_INT\",a[a.FLOAT_NaN_AS_INT=2143289344]=\"FLOAT_NaN_AS_INT\"}(exports.Constants||(exports.Constants={}));var Constants=exports.Constants;!function(a){a[a.CLASS=7]=\"CLASS\",a[a.FIELDREF=9]=\"FIELDREF\",a[a.METHODREF=10]=\"METHODREF\",a[a.INTERFACE_METHODREF=11]=\"INTERFACE_METHODREF\",a[a.STRING=8]=\"STRING\",a[a.INTEGER=3]=\"INTEGER\",a[a.FLOAT=4]=\"FLOAT\",a[a.LONG=5]=\"LONG\",a[a.DOUBLE=6]=\"DOUBLE\",a[a.NAME_AND_TYPE=12]=\"NAME_AND_TYPE\",a[a.UTF8=1]=\"UTF8\",a[a.METHOD_HANDLE=15]=\"METHOD_HANDLE\",a[a.METHOD_TYPE=16]=\"METHOD_TYPE\",a[a.INVOKE_DYNAMIC=18]=\"INVOKE_DYNAMIC\"}(exports.ConstantPoolItemType||(exports.ConstantPoolItemType={}));var ConstantPoolItemType=exports.ConstantPoolItemType;!function(a){a[a.SAME_FRAME=0]=\"SAME_FRAME\",a[a.SAME_LOCALS_1_STACK_ITEM_FRAME=1]=\"SAME_LOCALS_1_STACK_ITEM_FRAME\",a[a.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED=2]=\"SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED\",a[a.CHOP_FRAME=3]=\"CHOP_FRAME\",a[a.SAME_FRAME_EXTENDED=4]=\"SAME_FRAME_EXTENDED\",a[a.APPEND_FRAME=5]=\"APPEND_FRAME\",a[a.FULL_FRAME=6]=\"FULL_FRAME\"}(exports.StackMapTableEntryType||(exports.StackMapTableEntryType={}));var StackMapTableEntryType=exports.StackMapTableEntryType;!function(a){a[a.GETFIELD=1]=\"GETFIELD\",a[a.GETSTATIC=2]=\"GETSTATIC\",a[a.PUTFIELD=3]=\"PUTFIELD\",a[a.PUTSTATIC=4]=\"PUTSTATIC\",a[a.INVOKEVIRTUAL=5]=\"INVOKEVIRTUAL\",a[a.INVOKESTATIC=6]=\"INVOKESTATIC\",a[a.INVOKESPECIAL=7]=\"INVOKESPECIAL\",a[a.NEWINVOKESPECIAL=8]=\"NEWINVOKESPECIAL\",a[a.INVOKEINTERFACE=9]=\"INVOKEINTERFACE\"}(exports.MethodHandleReferenceKind||(exports.MethodHandleReferenceKind={}));var MethodHandleReferenceKind=exports.MethodHandleReferenceKind;!function(a){a[a.AALOAD=50]=\"AALOAD\",a[a.AASTORE=83]=\"AASTORE\",a[a.ACONST_NULL=1]=\"ACONST_NULL\",a[a.ALOAD=25]=\"ALOAD\",a[a.ALOAD_0=42]=\"ALOAD_0\",a[a.ALOAD_1=43]=\"ALOAD_1\",a[a.ALOAD_2=44]=\"ALOAD_2\",a[a.ALOAD_3=45]=\"ALOAD_3\",a[a.ANEWARRAY=189]=\"ANEWARRAY\",a[a.ARETURN=176]=\"ARETURN\",a[a.ARRAYLENGTH=190]=\"ARRAYLENGTH\",a[a.ASTORE=58]=\"ASTORE\",a[a.ASTORE_0=75]=\"ASTORE_0\",a[a.ASTORE_1=76]=\"ASTORE_1\",a[a.ASTORE_2=77]=\"ASTORE_2\",a[a.ASTORE_3=78]=\"ASTORE_3\",a[a.ATHROW=191]=\"ATHROW\",a[a.BALOAD=51]=\"BALOAD\",a[a.BASTORE=84]=\"BASTORE\",a[a.BIPUSH=16]=\"BIPUSH\",a[a.BREAKPOINT=202]=\"BREAKPOINT\",a[a.CALOAD=52]=\"CALOAD\",a[a.CASTORE=85]=\"CASTORE\",a[a.CHECKCAST=192]=\"CHECKCAST\",a[a.D2F=144]=\"D2F\",a[a.D2I=142]=\"D2I\",a[a.D2L=143]=\"D2L\",a[a.DADD=99]=\"DADD\",a[a.DALOAD=49]=\"DALOAD\",a[a.DASTORE=82]=\"DASTORE\",a[a.DCMPG=152]=\"DCMPG\",a[a.DCMPL=151]=\"DCMPL\",a[a.DCONST_0=14]=\"DCONST_0\",a[a.DCONST_1=15]=\"DCONST_1\",a[a.DDIV=111]=\"DDIV\",a[a.DLOAD=24]=\"DLOAD\",a[a.DLOAD_0=38]=\"DLOAD_0\",a[a.DLOAD_1=39]=\"DLOAD_1\",a[a.DLOAD_2=40]=\"DLOAD_2\",a[a.DLOAD_3=41]=\"DLOAD_3\",a[a.DMUL=107]=\"DMUL\",a[a.DNEG=119]=\"DNEG\",a[a.DREM=115]=\"DREM\",a[a.DRETURN=175]=\"DRETURN\",a[a.DSTORE=57]=\"DSTORE\",a[a.DSTORE_0=71]=\"DSTORE_0\",a[a.DSTORE_1=72]=\"DSTORE_1\",a[a.DSTORE_2=73]=\"DSTORE_2\",a[a.DSTORE_3=74]=\"DSTORE_3\",a[a.DSUB=103]=\"DSUB\",a[a.DUP=89]=\"DUP\",a[a.DUP_X1=90]=\"DUP_X1\",a[a.DUP_X2=91]=\"DUP_X2\",a[a.DUP2=92]=\"DUP2\",a[a.DUP2_X1=93]=\"DUP2_X1\",a[a.DUP2_X2=94]=\"DUP2_X2\",a[a.F2D=141]=\"F2D\",a[a.F2I=139]=\"F2I\",a[a.F2L=140]=\"F2L\",a[a.FADD=98]=\"FADD\",a[a.FALOAD=48]=\"FALOAD\",a[a.FASTORE=81]=\"FASTORE\",a[a.FCMPG=150]=\"FCMPG\",a[a.FCMPL=149]=\"FCMPL\",a[a.FCONST_0=11]=\"FCONST_0\",a[a.FCONST_1=12]=\"FCONST_1\",a[a.FCONST_2=13]=\"FCONST_2\",a[a.FDIV=110]=\"FDIV\",a[a.FLOAD=23]=\"FLOAD\",a[a.FLOAD_0=34]=\"FLOAD_0\",a[a.FLOAD_1=35]=\"FLOAD_1\",a[a.FLOAD_2=36]=\"FLOAD_2\",a[a.FLOAD_3=37]=\"FLOAD_3\",a[a.FMUL=106]=\"FMUL\",a[a.FNEG=118]=\"FNEG\",a[a.FREM=114]=\"FREM\",a[a.FRETURN=174]=\"FRETURN\",a[a.FSTORE=56]=\"FSTORE\",a[a.FSTORE_0=67]=\"FSTORE_0\",a[a.FSTORE_1=68]=\"FSTORE_1\",a[a.FSTORE_2=69]=\"FSTORE_2\",a[a.FSTORE_3=70]=\"FSTORE_3\",a[a.FSUB=102]=\"FSUB\",a[a.GETFIELD=180]=\"GETFIELD\",a[a.GETSTATIC=178]=\"GETSTATIC\",a[a.GOTO=167]=\"GOTO\",a[a.GOTO_W=200]=\"GOTO_W\",a[a.I2B=145]=\"I2B\",a[a.I2C=146]=\"I2C\",a[a.I2D=135]=\"I2D\",a[a.I2F=134]=\"I2F\",a[a.I2L=133]=\"I2L\",a[a.I2S=147]=\"I2S\",a[a.IADD=96]=\"IADD\",a[a.IALOAD=46]=\"IALOAD\",a[a.IAND=126]=\"IAND\",a[a.IASTORE=79]=\"IASTORE\",a[a.ICONST_M1=2]=\"ICONST_M1\",a[a.ICONST_0=3]=\"ICONST_0\",a[a.ICONST_1=4]=\"ICONST_1\",a[a.ICONST_2=5]=\"ICONST_2\",a[a.ICONST_3=6]=\"ICONST_3\",a[a.ICONST_4=7]=\"ICONST_4\",a[a.ICONST_5=8]=\"ICONST_5\",a[a.IDIV=108]=\"IDIV\",a[a.IF_ACMPEQ=165]=\"IF_ACMPEQ\",a[a.IF_ACMPNE=166]=\"IF_ACMPNE\",a[a.IF_ICMPEQ=159]=\"IF_ICMPEQ\",a[a.IF_ICMPGE=162]=\"IF_ICMPGE\",a[a.IF_ICMPGT=163]=\"IF_ICMPGT\",a[a.IF_ICMPLE=164]=\"IF_ICMPLE\",a[a.IF_ICMPLT=161]=\"IF_ICMPLT\",a[a.IF_ICMPNE=160]=\"IF_ICMPNE\",a[a.IFEQ=153]=\"IFEQ\",a[a.IFGE=156]=\"IFGE\",a[a.IFGT=157]=\"IFGT\",a[a.IFLE=158]=\"IFLE\",a[a.IFLT=155]=\"IFLT\",a[a.IFNE=154]=\"IFNE\",a[a.IFNONNULL=199]=\"IFNONNULL\",a[a.IFNULL=198]=\"IFNULL\",a[a.IINC=132]=\"IINC\",a[a.ILOAD=21]=\"ILOAD\",a[a.ILOAD_0=26]=\"ILOAD_0\",a[a.ILOAD_1=27]=\"ILOAD_1\",a[a.ILOAD_2=28]=\"ILOAD_2\",a[a.ILOAD_3=29]=\"ILOAD_3\",a[a.IMUL=104]=\"IMUL\",a[a.INEG=116]=\"INEG\",a[a.INSTANCEOF=193]=\"INSTANCEOF\",a[a.INVOKEDYNAMIC=186]=\"INVOKEDYNAMIC\",a[a.INVOKEINTERFACE=185]=\"INVOKEINTERFACE\",a[a.INVOKESPECIAL=183]=\"INVOKESPECIAL\",a[a.INVOKESTATIC=184]=\"INVOKESTATIC\",a[a.INVOKEVIRTUAL=182]=\"INVOKEVIRTUAL\",a[a.IOR=128]=\"IOR\",a[a.IREM=112]=\"IREM\",a[a.IRETURN=172]=\"IRETURN\",a[a.ISHL=120]=\"ISHL\",a[a.ISHR=122]=\"ISHR\",a[a.ISTORE=54]=\"ISTORE\",a[a.ISTORE_0=59]=\"ISTORE_0\",a[a.ISTORE_1=60]=\"ISTORE_1\",a[a.ISTORE_2=61]=\"ISTORE_2\",a[a.ISTORE_3=62]=\"ISTORE_3\",a[a.ISUB=100]=\"ISUB\",a[a.IUSHR=124]=\"IUSHR\",a[a.IXOR=130]=\"IXOR\",a[a.JSR=168]=\"JSR\",a[a.JSR_W=201]=\"JSR_W\",a[a.L2D=138]=\"L2D\",a[a.L2F=137]=\"L2F\",a[a.L2I=136]=\"L2I\",a[a.LADD=97]=\"LADD\",a[a.LALOAD=47]=\"LALOAD\",a[a.LAND=127]=\"LAND\",a[a.LASTORE=80]=\"LASTORE\",a[a.LCMP=148]=\"LCMP\",a[a.LCONST_0=9]=\"LCONST_0\",a[a.LCONST_1=10]=\"LCONST_1\",a[a.LDC=18]=\"LDC\",a[a.LDC_W=19]=\"LDC_W\",a[a.LDC2_W=20]=\"LDC2_W\",a[a.LDIV=109]=\"LDIV\",a[a.LLOAD=22]=\"LLOAD\",a[a.LLOAD_0=30]=\"LLOAD_0\",a[a.LLOAD_1=31]=\"LLOAD_1\",a[a.LLOAD_2=32]=\"LLOAD_2\",a[a.LLOAD_3=33]=\"LLOAD_3\",a[a.LMUL=105]=\"LMUL\",a[a.LNEG=117]=\"LNEG\",a[a.LOOKUPSWITCH=171]=\"LOOKUPSWITCH\",a[a.LOR=129]=\"LOR\",a[a.LREM=113]=\"LREM\",a[a.LRETURN=173]=\"LRETURN\",a[a.LSHL=121]=\"LSHL\",a[a.LSHR=123]=\"LSHR\",a[a.LSTORE=55]=\"LSTORE\",a[a.LSTORE_0=63]=\"LSTORE_0\",a[a.LSTORE_1=64]=\"LSTORE_1\",a[a.LSTORE_2=65]=\"LSTORE_2\",a[a.LSTORE_3=66]=\"LSTORE_3\",a[a.LSUB=101]=\"LSUB\",a[a.LUSHR=125]=\"LUSHR\",a[a.LXOR=131]=\"LXOR\",a[a.MONITORENTER=194]=\"MONITORENTER\",a[a.MONITOREXIT=195]=\"MONITOREXIT\",a[a.MULTIANEWARRAY=197]=\"MULTIANEWARRAY\",a[a.NEW=187]=\"NEW\",a[a.NEWARRAY=188]=\"NEWARRAY\",a[a.NOP=0]=\"NOP\",a[a.POP=87]=\"POP\",a[a.POP2=88]=\"POP2\",a[a.PUTFIELD=181]=\"PUTFIELD\",a[a.PUTSTATIC=179]=\"PUTSTATIC\",a[a.RET=169]=\"RET\",a[a.RETURN=177]=\"RETURN\",a[a.SALOAD=53]=\"SALOAD\",a[a.SASTORE=86]=\"SASTORE\",a[a.SIPUSH=17]=\"SIPUSH\",a[a.SWAP=95]=\"SWAP\",a[a.TABLESWITCH=170]=\"TABLESWITCH\",a[a.WIDE=196]=\"WIDE\",a[a.GETSTATIC_FAST32=208]=\"GETSTATIC_FAST32\",a[a.GETSTATIC_FAST64=209]=\"GETSTATIC_FAST64\",a[a.NEW_FAST=210]=\"NEW_FAST\",a[a.ANEWARRAY_FAST=213]=\"ANEWARRAY_FAST\",a[a.CHECKCAST_FAST=214]=\"CHECKCAST_FAST\",a[a.INSTANCEOF_FAST=215]=\"INSTANCEOF_FAST\",a[a.MULTIANEWARRAY_FAST=216]=\"MULTIANEWARRAY_FAST\",a[a.PUTSTATIC_FAST32=217]=\"PUTSTATIC_FAST32\",a[a.PUTSTATIC_FAST64=218]=\"PUTSTATIC_FAST64\",a[a.GETFIELD_FAST32=219]=\"GETFIELD_FAST32\",a[a.GETFIELD_FAST64=220]=\"GETFIELD_FAST64\",a[a.PUTFIELD_FAST32=221]=\"PUTFIELD_FAST32\",a[a.PUTFIELD_FAST64=222]=\"PUTFIELD_FAST64\",a[a.INVOKENONVIRTUAL_FAST=223]=\"INVOKENONVIRTUAL_FAST\",a[a.INVOKESTATIC_FAST=240]=\"INVOKESTATIC_FAST\",a[a.INVOKEVIRTUAL_FAST=241]=\"INVOKEVIRTUAL_FAST\",a[a.INVOKEINTERFACE_FAST=242]=\"INVOKEINTERFACE_FAST\",a[a.INVOKEHANDLE=243]=\"INVOKEHANDLE\",a[a.INVOKEBASIC=244]=\"INVOKEBASIC\",a[a.LINKTOSPECIAL=245]=\"LINKTOSPECIAL\",a[a.LINKTOVIRTUAL=247]=\"LINKTOVIRTUAL\",a[a.INVOKEDYNAMIC_FAST=248]=\"INVOKEDYNAMIC_FAST\"}(exports.OpCode||(exports.OpCode={}));var OpCode=exports.OpCode;!function(a){a[a.OPCODE_ONLY=0]=\"OPCODE_ONLY\",a[a.CONSTANT_POOL_UINT8=1]=\"CONSTANT_POOL_UINT8\",a[a.CONSTANT_POOL=2]=\"CONSTANT_POOL\",a[a.CONSTANT_POOL_AND_UINT8_VALUE=3]=\"CONSTANT_POOL_AND_UINT8_VALUE\",a[a.UINT8_VALUE=4]=\"UINT8_VALUE\",a[a.UINT8_AND_INT8_VALUE=5]=\"UINT8_AND_INT8_VALUE\",a[a.INT8_VALUE=6]=\"INT8_VALUE\",a[a.INT16_VALUE=7]=\"INT16_VALUE\",a[a.INT32_VALUE=8]=\"INT32_VALUE\",a[a.ARRAY_TYPE=9]=\"ARRAY_TYPE\",a[a.WIDE=10]=\"WIDE\"}(exports.OpcodeLayoutType||(exports.OpcodeLayoutType={}));var OpcodeLayoutType=exports.OpcodeLayoutType,olt=new Array(255);!function(){for(var a=0;255>a;a++)olt[a]=OpcodeLayoutType.OPCODE_ONLY}(),assignOpcodeLayout(OpcodeLayoutType.UINT8_VALUE,[OpCode.ALOAD,OpCode.ASTORE,OpCode.DLOAD,OpCode.DSTORE,OpCode.FLOAD,OpCode.FSTORE,OpCode.ILOAD,OpCode.ISTORE,OpCode.LLOAD,OpCode.LSTORE,OpCode.RET]),assignOpcodeLayout(OpcodeLayoutType.CONSTANT_POOL_UINT8,[OpCode.LDC]),assignOpcodeLayout(OpcodeLayoutType.CONSTANT_POOL,[OpCode.LDC_W,OpCode.LDC2_W,OpCode.ANEWARRAY,OpCode.CHECKCAST,OpCode.GETFIELD,OpCode.GETSTATIC,OpCode.INSTANCEOF,OpCode.INVOKEDYNAMIC,OpCode.INVOKESPECIAL,OpCode.INVOKESTATIC,OpCode.INVOKEVIRTUAL,OpCode.NEW,OpCode.PUTFIELD,OpCode.PUTSTATIC,OpCode.MULTIANEWARRAY_FAST,OpCode.INVOKENONVIRTUAL_FAST,OpCode.INVOKESTATIC_FAST,OpCode.CHECKCAST_FAST,OpCode.NEW_FAST,OpCode.ANEWARRAY_FAST,OpCode.INSTANCEOF_FAST,OpCode.GETSTATIC_FAST32,OpCode.GETSTATIC_FAST64,OpCode.PUTSTATIC_FAST32,OpCode.PUTSTATIC_FAST64,OpCode.PUTFIELD_FAST32,OpCode.PUTFIELD_FAST64,OpCode.GETFIELD_FAST32,OpCode.GETFIELD_FAST64,OpCode.INVOKEVIRTUAL_FAST]),assignOpcodeLayout(OpcodeLayoutType.CONSTANT_POOL_AND_UINT8_VALUE,[OpCode.INVOKEINTERFACE,OpCode.INVOKEINTERFACE_FAST,OpCode.MULTIANEWARRAY]),assignOpcodeLayout(OpcodeLayoutType.INT8_VALUE,[OpCode.BIPUSH]),assignOpcodeLayout(OpcodeLayoutType.INT16_VALUE,[OpCode.SIPUSH,OpCode.GOTO,OpCode.IFGT,OpCode.IFEQ,OpCode.IFGE,OpCode.IFLE,OpCode.IFLT,OpCode.IFNE,OpCode.IFNULL,OpCode.IFNONNULL,OpCode.IF_ICMPLE,OpCode.IF_ACMPEQ,OpCode.IF_ACMPNE,OpCode.IF_ICMPEQ,OpCode.IF_ICMPGE,OpCode.IF_ICMPGT,OpCode.IF_ICMPLT,OpCode.IF_ICMPNE,OpCode.JSR]),assignOpcodeLayout(OpcodeLayoutType.INT32_VALUE,[OpCode.GOTO_W,OpCode.JSR_W]),assignOpcodeLayout(OpcodeLayoutType.UINT8_AND_INT8_VALUE,[OpCode.IINC]),assignOpcodeLayout(OpcodeLayoutType.ARRAY_TYPE,[OpCode.NEWARRAY]),exports.OpcodeLayouts=olt;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";var SafeMap=function(){function a(){this.cache=Object.create(null)}return a.prototype.fixKey=function(a){return\";\"+a},a.prototype.get=function(a){return a=this.fixKey(a),void 0!==this.cache[a]?this.cache[a]:void 0},a.prototype.has=function(a){return void 0!==this.get(a)},a.prototype.set=function(a,b){this.cache[this.fixKey(a)]=b},a}();module.exports=SafeMap;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function getTrappedMethod(a,b){return a=util.descriptor2typestr(a),trapped_methods.hasOwnProperty(a)&&trapped_methods[a].hasOwnProperty(b)?trapped_methods[a][b]:null}function makeOnError(a){return a.length>0?\"f.opStack.pushAll(\"+a.join(\",\")+\");\":\"\"}function dumpStats(){for(var a=new Array(256),b=0;256>b;b++)a[b]=b;a.sort(function(a,b){return statTraceCloser[b]-statTraceCloser[a]});var c=a.slice(0,24);console.log(\"Opcodes that closed a trace (number of times encountered):\");for(var b=0;b<c.length;b++){var d=c[b];statTraceCloser[d]>0&&console.log(enums.OpCode[d],statTraceCloser[d])}}var __extends=this&&this.__extends||function(a,b){function c(){this.constructor=a}for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d]);a.prototype=null===b?Object.create(b):(c.prototype=b.prototype,new c)},util=__webpack_require__(6),attributes=__webpack_require__(12),threading=__webpack_require__(15),assert=__webpack_require__(13),enums=__webpack_require__(9),StringOutputStream=__webpack_require__(18),global=__webpack_require__(14),jit_1=__webpack_require__(19),trapped_methods={\"java/lang/ref/Reference\":{\"<clinit>()V\":function(a){}},\"java/lang/System\":{\"loadLibrary(Ljava/lang/String;)V\":function(a,b){var c=b.toString();switch(c){case\"zip\":case\"net\":case\"nio\":case\"awt\":case\"fontmanager\":case\"management\":return;default:a.throwNewException(\"Ljava/lang/UnsatisfiedLinkError;\",\"no \"+c+\" in java.library.path\")}}},\"java/lang/Terminator\":{\"setup()V\":function(a){}},\"java/nio/charset/Charset$3\":{\"run()Ljava/lang/Object;\":function(a,b){return null}},\"sun/nio/fs/DefaultFileSystemProvider\":{\"create()Ljava/nio/file/spi/FileSystemProvider;\":function(a){a.setStatus(enums.ThreadStatus.ASYNC_WAITING);var b=a.getBsCl().getInitializedClass(a,\"Lsun/nio/fs/DefaultFileSystemProvider;\"),c=b.getConstructor(a);c[\"createProvider(Ljava/lang/String;)Ljava/nio/file/spi/FileSystemProvider;\"](a,[a.getJVM().internString(\"sun.nio.fs.LinuxFileSystemProvider\")],util.forwardResult(a))}}},AbstractMethodField=function(){function a(a,b,c,d){this.cls=a,this.slot=c,this.accessFlags=new util.Flags(d.getUint16()),this.name=b.get(d.getUint16()).value,this.rawDescriptor=b.get(d.getUint16()).value,this.attrs=attributes.makeAttributes(d,b)}return a.prototype.getAttribute=function(a){for(var b=0;b<this.attrs.length;b++){var c=this.attrs[b];if(c.getName()===a)return c}return null},a.prototype.getAttributes=function(a){return this.attrs.filter(function(b){return b.getName()===a})},a.prototype.getAnnotationType=function(a,b){var c=this.getAttribute(b);if(null===c)return null;var d,e=a.getBsCl().getInitializedClass(a,\"[B\").getConstructor(a),f=new e(a,0),g=c.rawBytes.length,h=new Array(g);for(d=0;g>d;d++)h[d]=c.rawBytes.readInt8(d);return f.array=h,f},a.prototype.parseDescriptor=function(a){throw new Error(\"Unimplemented error.\")},a}();exports.AbstractMethodField=AbstractMethodField;var Field=function(a){function b(b,c,d,e){a.call(this,b,c,d,e),this.fullName=util.descriptor2typestr(b.getInternalName())+\"/\"+this.name}return __extends(b,a),b.prototype.reflector=function(a,b){var c=this,d=this.getAttribute(\"Signature\"),e=a.getJVM(),f=a.getBsCl(),g=function(b){var g=f.getInitializedClass(a,\"Ljava/lang/reflect/Field;\"),h=new(g.getConstructor(a))(a);return h[\"java/lang/reflect/Field/clazz\"]=c.cls.getClassObject(a),h[\"java/lang/reflect/Field/name\"]=e.internString(c.name),h[\"java/lang/reflect/Field/type\"]=b,h[\"java/lang/reflect/Field/modifiers\"]=c.accessFlags.getRawByte(),h[\"java/lang/reflect/Field/slot\"]=c.slot,h[\"java/lang/reflect/Field/signature\"]=null!==d?util.initString(f,d.sig):null,h[\"java/lang/reflect/Field/annotations\"]=c.getAnnotationType(a,\"RuntimeVisibleAnnotations\"),h};this.cls.getLoader().resolveClass(a,this.rawDescriptor,function(c){b(null!=c?g(c.getClassObject(a)):null)})},b.prototype.getDefaultFieldValue=function(){var a=this.rawDescriptor;if(\"J\"===a)return\"gLongZero\";var b=a[0];return\"[\"===b||\"L\"===b?\"null\":\"0\"},b.prototype.outputJavaScriptField=function(a,b){this.accessFlags.isStatic()?b.write(a+'[\"'+util.reescapeJVMName(this.fullName)+'\"] = cls._getInitialStaticFieldValue(thread, \"'+util.reescapeJVMName(this.name)+'\");\\n'):b.write('this[\"'+util.reescapeJVMName(this.fullName)+'\"] = '+this.getDefaultFieldValue()+\";\\n\")},b}(AbstractMethodField);exports.Field=Field;var opcodeSize=function(){var a=[],b=enums.OpcodeLayoutType;return a[b.OPCODE_ONLY]=1,a[b.CONSTANT_POOL_UINT8]=2,a[b.CONSTANT_POOL]=3,a[b.CONSTANT_POOL_AND_UINT8_VALUE]=4,a[b.UINT8_VALUE]=2,a[b.UINT8_AND_INT8_VALUE]=3,a[b.INT8_VALUE]=2,a[b.INT16_VALUE]=3,a[b.INT32_VALUE]=5,a[b.ARRAY_TYPE]=2,a[b.WIDE]=1,a}(),TraceInfo=function(){function a(a,b){this.pc=a,this.jitInfo=b,this.pops=[],this.pushes=[],this.prefixEmit=\"\"}return a}(),Trace=function(){function a(a,b,c){this.startPC=a,this.code=b,this.method=c,this.infos=[],this.endPc=-1}return a.prototype.emitEndPC=function(a){this.endPc=a},a.prototype.addOp=function(a,b){this.infos.push(new TraceInfo(a,b))},a.prototype.close=function(a){if(this.infos.length>1){for(var b=[],c=0,d=this.endPc>-1?\"f.pc=\"+this.endPc+\";\":\"\",e=0;e<this.infos.length;e++){for(var f=this.infos[e],g=f.jitInfo,h=f.pops,i=g.pops<0?Math.min(-g.pops,b.length):g.pops,j=0;i>j;j++)if(b.length>0)h.push(b.pop());else{var k=\"s\"+c++;f.prefixEmit+=\"var \"+k+\" = f.opStack.pop();\",h.push(k)}f.onErrorPushes=b.slice();for(var l=f.pushes,j=0;j<g.pushes;j++){var k=\"s\"+c++;b.push(k),l.push(k)}}1===b.length?d+=\"f.opStack.push(\"+b[0]+\");\":b.length>1&&(d+=\"f.opStack.pushAll(\"+b.join(\",\")+\");\");for(var e=this.infos.length-1;e>=0;e--){var f=this.infos[e],g=f.jitInfo;d=f.prefixEmit+g.emit(f.pops,f.pushes,\"\"+e,d,this.code,f.pc,f.onErrorPushes,this.method)}return new Function(\"f\",\"t\",\"u\",d)}return null},a}(),Method=function(a){function b(b,c,d,e){a.call(this,b,c,d,e),this.numBBEntries=0,this.compiledFunctions=[],this.failedCompile=[];var f,g,h=util.getTypes(this.rawDescriptor);for(this.signature=this.name+this.rawDescriptor,this.fullSignature=util.descriptor2typestr(this.cls.getInternalName())+\"/\"+this.signature,this.returnType=h.pop(),this.parameterTypes=h,this.parameterWords=h.length,f=0;f<this.parameterTypes.length;f++)g=this.parameterTypes[f],\"D\"!==g&&\"J\"!==g||this.parameterWords++;var i=this.cls.getInternalName();if(null!==getTrappedMethod(i,this.signature))this.code=getTrappedMethod(i,this.signature),this.accessFlags.setNative(!0);else if(this.accessFlags.isNative())if(this.signature.indexOf(\"registerNatives()V\",0)<0&&this.signature.indexOf(\"initIDs()V\",0)<0){var j=this;this.code=function(a){var b=a.getJVM(),c=b.getNative(i,j.signature);return null!=c?(j.code=c,c.apply(j,arguments)):void a.throwNewException(\"Ljava/lang/UnsatisfiedLinkError;\",\"Native method '\"+j.getFullSignature()+\"' not implemented.\\nPlease fix or file a bug at https://github.com/plasma-umass/doppio/issues\")}}else this.code=function(){};else if(!this.accessFlags.isAbstract()){this.code=this.getAttribute(\"Code\");var k=this.code.code.length;this.numBBEntries=k>3?200:1e3*k}}return __extends(b,a),b.prototype.incrBBEntries=function(){this.numBBEntries--},b.prototype.isDefault=function(){return this.accessFlags.isPublic()&&!this.accessFlags.isAbstract()&&!this.accessFlags.isStatic()&&this.cls.accessFlags.isInterface()},b.prototype.getFullSignature=function(){return this.cls.getExternalName()+\".\"+this.name+this.rawDescriptor},b.prototype.isHidden=function(){var a=this.getAttribute(\"RuntimeVisibleAnnotations\");return null!==a&&a.isHidden},b.prototype.isCallerSensitive=function(){var a=this.getAttribute(\"RuntimeVisibleAnnotations\");return null!==a&&a.isCallerSensitive},b.prototype.getParamWordSize=function(){return this.parameterWords},b.prototype.getCodeAttribute=function(){return this.code},b.prototype.getOp=function(a,b,c){if(this.numBBEntries<=0&&!this.failedCompile[a]){var d=this.compiledFunctions[a];if(d)return d;var e=this.jitCompileFrom(a,c);if(e)return e;this.failedCompile[a]=!0}return b.readUInt8(a)},b.prototype.makeInvokeStaticJitInfo=function(a,b){var c=a.readUInt16BE(b+1),d=this.cls.constantPool.get(c),e=d.paramWordSize;d.jsConstructor[d.fullSignature];return{hasBranch:!0,pops:-e,pushes:0,emit:function(a,d,f,g){var h=e>a.length?\"f.opStack.sliceAndDropFromTop(\"+(e-a.length)+\");\":\"[\"+a.reduce(function(a,b){return b+\",\"+a},\"\")+\"];\",i=\"var args\"+f+\"=\"+h;return e>a.length&&a.length>0&&(i+=\"args\"+f+\".push(\"+a.slice().reverse().join(\",\")+\");\"),i+(\"\\nvar methodReference\"+f+\"=f.method.cls.constantPool.get(\"+c+\");\\nf.pc=\"+b+\";\\nmethodReference\"+f+\".jsConstructor[methodReference\"+f+\".fullSignature](t,args\"+f+\");\\nf.returnToThreadLoop=true;\\n\"+g)}}},b.prototype.makeInvokeVirtualJitInfo=function(a,b){var c=a.readUInt16BE(b+1),d=this.cls.constantPool.get(c),e=d.paramWordSize;return{hasBranch:!0,pops:-(e+1),pushes:0,emit:function(a,b,c,f,g,h,i){var j=makeOnError(i),k=e>a.length?\"f.opStack.sliceAndDropFromTop(\"+(e-a.length)+\");\":\"[\"+a.slice(0,e).reduce(function(a,b){return b+\",\"+a},\"\")+\"];\",l=\"var args\"+c+\"=\"+k;return e>a.length&&a.length>0&&(l+=\"args\"+c+\".push(\"+a.slice().reverse().join(\",\")+\");\"),l+(\"var obj\"+c+\"=\"+(e+1===a.length?a[e]:\"f.opStack.pop()\")+\";f.pc=\"+h+\";\\nif(!u.isNull(t,f,obj\"+c+\")){obj\"+c+\"['\"+d.signature+\"'](t,args\"+c+\");f.returnToThreadLoop=true;\"+f+\"}else{\"+j+\"}\")}}},b.prototype.makeInvokeNonVirtualJitInfo=function(a,b){var c=a.readUInt16BE(b+1),d=this.cls.constantPool.get(c),e=d.paramWordSize;return{hasBranch:!0,pops:-(e+1),pushes:0,emit:function(a,b,c,f,g,h,i){var j=makeOnError(i),k=e>a.length?\"f.opStack.sliceAndDropFromTop(\"+(e-a.length)+\");\":\"[\"+a.slice(0,e).reduce(function(a,b){return b+\",\"+a},\"\")+\"];\",l=\"var args\"+c+\"=\"+k;return e>a.length&&a.length>0&&(l+=\"args\"+c+\".push(\"+a.slice().reverse().join(\",\")+\");\"),l+(\"var obj\"+c+\"=\"+(e+1===a.length?a[e]:\"f.opStack.pop()\")+\";f.pc=\"+h+\";\\nif(!u.isNull(t,f,obj\"+c+\")){obj\"+c+\"['\"+d.fullSignature+\"'](t, args\"+c+\");f.returnToThreadLoop=true;\"+f+\"}else{\"+j+\"}\")}}},b.prototype.jitCompileFrom=function(a,b){function c(){if(null!==e){var a=e.close(b);a&&(f.compiledFunctions[e.startPC]=a),e=null}g=!0}for(var d=this.getCodeAttribute().getCode(),e=null,f=this,g=!1,h=a;h<d.length&&!g;){var i=d.readUInt8(h),j=jit_1.opJitInfo[i];if(j)null===e&&(e=new Trace(h,d,f)),e.addOp(h,j),j.hasBranch&&(this.failedCompile[h]=!0,c());else if(i===enums.OpCode.INVOKESTATIC_FAST&&null!==e){var k=this.makeInvokeStaticJitInfo(d,h);e.addOp(h,k),this.failedCompile[h]=!0,c()}else if(i!==enums.OpCode.INVOKEVIRTUAL_FAST&&i!==enums.OpCode.INVOKEINTERFACE_FAST||null===e)if(i===enums.OpCode.INVOKENONVIRTUAL_FAST&&null!==e){var k=this.makeInvokeNonVirtualJitInfo(d,h);e.addOp(h,k),this.failedCompile[h]=!0,c()}else this.failedCompile[h]=!0,e&&e.emitEndPC(h),c();else{var k=this.makeInvokeVirtualJitInfo(d,h);e.addOp(h,k),this.failedCompile[h]=!0,c()}h+=opcodeSize[enums.OpcodeLayouts[i]]}return f.compiledFunctions[a]},b.prototype.getNativeFunction=function(){return this.code},b.prototype._resolveReferencedClasses=function(a,b){var c=this.parameterTypes.concat(this.returnType),d=this.code,e=this.getAttribute(\"Exceptions\");!this.accessFlags.isNative()&&!this.accessFlags.isAbstract()&&d.exceptionHandlers.length>0&&(c.push(\"Ljava/lang/Throwable;\"),c=c.concat(d.exceptionHandlers.filter(function(a){return\"<any>\"!==a.catchType}).map(function(a){return a.catchType}))),null!==e&&(c=c.concat(e.exceptions)),this.cls.getLoader().resolveClasses(a,c,function(c){a.getBsCl().resolveClasses(a,[\"Ljava/lang/reflect/Method;\",\"Ljava/lang/reflect/Constructor;\"],function(a){null===c||null===a?b(null):(c[\"Ljava/lang/reflect/Method;\"]=a[\"Ljava/lang/reflect/Method;\"],c[\"Ljava/lang/reflect/Constructor;\"]=a[\"Ljava/lang/reflect/Constructor;\"],b(c))})})},b.prototype.reflector=function(a,b){var c=this,d=a.getBsCl(),e=d.getInitializedClass(a,\"[Ljava/lang/Class;\").getConstructor(a),f=a.getJVM(),g=this.getAttribute(\"Signature\"),h=this.getAttribute(\"Exceptions\");this._resolveReferencedClasses(a,function(d){if(null===d)return b(null);var i=c.cls.getClassObject(a),j=f.internString(c.name),k=new e(a,0),l=d[c.returnType].getClassObject(a),m=new e(a,0),n=c.accessFlags.getRawByte(),o=null!==g?f.internString(g.sig):null;if(k.array=c.parameterTypes.map(function(b){return d[b].getClassObject(a)}),null!==h&&(m.array=h.exceptions.map(function(b){return d[b].getClassObject(a)})),\"<init>\"===c.name){var p=d[\"Ljava/lang/reflect/Constructor;\"].getConstructor(a),q=new p(a);q[\"java/lang/reflect/Constructor/clazz\"]=i,q[\"java/lang/reflect/Constructor/parameterTypes\"]=k,q[\"java/lang/reflect/Constructor/exceptionTypes\"]=m,q[\"java/lang/reflect/Constructor/modifiers\"]=n,q[\"java/lang/reflect/Constructor/slot\"]=c.slot,q[\"java/lang/reflect/Constructor/signature\"]=o,q[\"java/lang/reflect/Constructor/annotations\"]=c.getAnnotationType(a,\"RuntimeVisibleAnnotations\"),q[\"java/lang/reflect/Constructor/parameterAnnotations\"]=c.getAnnotationType(a,\"RuntimeVisibleParameterAnnotations\"),b(q)}else{var r=d[\"Ljava/lang/reflect/Method;\"].getConstructor(a),s=new r(a);s[\"java/lang/reflect/Method/clazz\"]=i,s[\"java/lang/reflect/Method/name\"]=j,s[\"java/lang/reflect/Method/parameterTypes\"]=k,s[\"java/lang/reflect/Method/returnType\"]=l,s[\"java/lang/reflect/Method/exceptionTypes\"]=m,s[\"java/lang/reflect/Method/modifiers\"]=n,s[\"java/lang/reflect/Method/slot\"]=c.slot,s[\"java/lang/reflect/Method/signature\"]=o,s[\"java/lang/reflect/Method/annotations\"]=c.getAnnotationType(a,\"RuntimeVisibleAnnotations\"),s[\"java/lang/reflect/Method/annotationDefault\"]=c.getAnnotationType(a,\"AnnotationDefault\"),s[\"java/lang/reflect/Method/parameterAnnotations\"]=c.getAnnotationType(a,\"RuntimeVisibleParameterAnnotations\"),b(s)}})},b.prototype.convertArgs=function(a,b){if(this.isSignaturePolymorphic())return b.unshift(a),b;var c,d=[a],e=0;for(this.accessFlags.isStatic()||(d.push(b[0]),e=1),c=0;c<this.parameterTypes.length;c++){var f=this.parameterTypes[c];d.push(b[e]),e+=\"J\"===f||\"D\"===f?2:1}return d},b.prototype.methodLock=function(a,b){return this.accessFlags.isStatic()?this.cls.getClassObject(a).getMonitor():b.locals[0].getMonitor()},b.prototype.isSignaturePolymorphic=function(){return\"Ljava/lang/invoke/MethodHandle;\"===this.cls.getInternalName()&&this.accessFlags.isNative()&&this.accessFlags.isVarArgs()&&\"([Ljava/lang/Object;)Ljava/lang/Object;\"===this.rawDescriptor},b.prototype.getVMTargetBridgeMethod=function(a,b){var c=new StringOutputStream,d=!(b===enums.MethodHandleReferenceKind.INVOKESTATIC||b===enums.MethodHandleReferenceKind.INVOKESPECIAL);this.accessFlags.isStatic()&&c.write(\"var jsCons = cls.getConstructor(thread);\\n\"),c.write(\"function bridgeMethod(thread, descriptor, args, cb) {\\n\"),this.accessFlags.isStatic()?c.write('  jsCons[\"'+util.reescapeJVMName(this.fullSignature)+'\"](thread, '):(c.write(\"  var obj = args.shift();\\n\"),c.write(\"  if (obj === null) { return thread.throwNewException('Ljava/lang/NullPointerException;', ''); }\\n\"),c.write('  obj[\"'+util.reescapeJVMName(d?this.signature:this.fullSignature)+'\"](thread, ')),c.write(\"args\"),c.write(\", cb);\\n  }\\n  return bridgeMethod;\");var e=c.flush();return new Function(\"thread\",\"cls\",\"util\",e)(a,this.cls,util)},b.prototype.outputJavaScriptFunction=function(a,b,c){void 0===c&&(c=!1);var d;if(this.accessFlags.isStatic()?b.write(a+'[\"'+util.reescapeJVMName(this.fullSignature)+'\"] = '+a+'[\"'+util.reescapeJVMName(this.signature)+'\"] = '):(c||b.write(a+'.prototype[\"'+util.reescapeJVMName(this.signature)+'\"] = '),b.write(a+'.prototype[\"'+util.reescapeJVMName(this.fullSignature)+'\"] = ')),b.write(\"(function(method) {\\n  return function(thread, args, cb) {\\n    if (typeof cb === 'function') {\\n      thread.stack.push(new InternalStackFrame(cb));\\n    }\\n    thread.stack.push(new \"+(this.accessFlags.isNative()?\"NativeStackFrame\":\"BytecodeStackFrame\")+\"(method, \"),this.accessFlags.isStatic())this.parameterWords>0?b.write(\"args\"):b.write(\"[]\");else{for(b.write(\"[this\"),d=0;d<this.parameterWords;d++)b.write(\", args[\"+d+\"]\");b.write(\"]\")}b.write(\"));\\n    thread.setStatus(\"+enums.ThreadStatus.RUNNABLE+');\\n  };\\n})(cls.getSpecificMethod(\"'+util.reescapeJVMName(this.cls.getInternalName())+'\", \"'+util.reescapeJVMName(this.signature)+'\"));\\n')},b}(AbstractMethodField);exports.Method=Method;var statTraceCloser=new Array(256),i;exports.dumpStats=dumpStats;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function makeAttributes(a,b){for(var c={Code:Code,LineNumberTable:LineNumberTable,SourceFile:SourceFile,StackMapTable:StackMapTable,LocalVariableTable:LocalVariableTable,LocalVariableTypeTable:LocalVariableTypeTable,ConstantValue:ConstantValue,Exceptions:Exceptions,InnerClasses:InnerClasses,Synthetic:Synthetic,Deprecated:Deprecated,Signature:Signature,RuntimeVisibleAnnotations:RuntimeVisibleAnnotations,AnnotationDefault:AnnotationDefault,EnclosingMethod:EnclosingMethod,BootstrapMethods:BootstrapMethods,RuntimeVisibleParameterAnnotations:RuntimeVisibleParameterAnnotations},d=a.getUint16(),e=[],f=0;d>f;f++){var g=b.get(a.getUint16()).value,h=a.getUint32();if(null!=c[g]){var i=a.size(),j=c[g].parse(a,b,h,g),k=a.size();i-k!==h&&a.skip(h-i+k),e.push(j)}else a.skip(h)}return e}var util=__webpack_require__(6),enums=__webpack_require__(9),assert=__webpack_require__(13),global=__webpack_require__(14),ExceptionHandler=function(){function a(a,b,c,d){this.startPC=a,this.endPC=b,this.handlerPC=c,this.catchType=d}return a.prototype.getName=function(){return\"ExceptionHandler\"},a.parse=function(a,b){var c=a.getUint16(),d=a.getUint16(),e=a.getUint16(),f=a.getUint16(),g=0===f?\"<any>\":b.get(f).name;return new this(c,d,e,g)},a}();exports.ExceptionHandler=ExceptionHandler;var Code=function(){function a(a,b,c,d,e){this.maxStack=a,this.maxLocals=b,this.exceptionHandlers=c,this.attrs=d,this.code=e}return a.prototype.getName=function(){return\"Code\"},a.prototype.getMaxStack=function(){return this.maxStack},a.parse=function(a,b){var c=a.getUint16(),d=a.getUint16(),e=a.getUint32();if(0===e)throw\"Error parsing code: Code length is zero\";for(var f=a.slice(e).getBuffer(),g=a.getUint16(),h=[],i=0;g>i;i++)h.push(ExceptionHandler.parse(a,b));var j=makeAttributes(a,b);return new this(c,d,h,j,f)},a.prototype.getCode=function(){return this.code},a.prototype.getAttribute=function(a){for(var b=0;b<this.attrs.length;b++){var c=this.attrs[b];if(c.getName()===a)return c}return null},a}();exports.Code=Code;var LineNumberTable=function(){function a(a){this.entries=a}return a.prototype.getName=function(){return\"LineNumberTable\"},a.prototype.getLineNumber=function(a){var b,c=-1;for(b=0;b<this.entries.length;b++){var d=this.entries[b];if(!(d.startPC<=a))break;c=d.lineNumber}return c},a.parse=function(a,b){for(var c=[],d=a.getUint16(),e=0;d>e;e++){var f=a.getUint16(),g=a.getUint16();c.push({startPC:f,lineNumber:g})}return new this(c)},a}();exports.LineNumberTable=LineNumberTable;var SourceFile=function(){function a(a){this.filename=a}return a.prototype.getName=function(){return\"SourceFile\"},a.parse=function(a,b){return new this(b.get(a.getUint16()).value)},a}();exports.SourceFile=SourceFile;var StackMapTable=function(){function a(a){this.entries=a}return a.prototype.getName=function(){return\"StackMapTable\"},a.parse=function(a,b){for(var c=a.getUint16(),d=[],e=0;c>e;e++)d.push(this.parseEntry(a,b));return new this(d)},a.parseEntry=function(a,b){var c,d,e,f=a.getUint8();if(64>f)return{type:enums.StackMapTableEntryType.SAME_FRAME,offsetDelta:f};if(128>f)return{type:enums.StackMapTableEntryType.SAME_LOCALS_1_STACK_ITEM_FRAME,offsetDelta:f-64,stack:[this.parseVerificationTypeInfo(a,b)]};if(247>f);else{if(247===f)return{type:enums.StackMapTableEntryType.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED,offsetDelta:a.getUint16(),stack:[this.parseVerificationTypeInfo(a,b)]};if(251>f)return{type:enums.StackMapTableEntryType.CHOP_FRAME,offsetDelta:a.getUint16(),k:251-f};if(251===f)return{type:enums.StackMapTableEntryType.SAME_FRAME_EXTENDED,offsetDelta:a.getUint16()};if(255>f){for(d=a.getUint16(),c=[],e=0;f-251>e;e++)c.push(this.parseVerificationTypeInfo(a,b));return{type:enums.StackMapTableEntryType.APPEND_FRAME,offsetDelta:d,locals:c}}if(255===f){d=a.getUint16();var g=a.getUint16();for(c=[],e=0;g>e;e++)c.push(this.parseVerificationTypeInfo(a,b));var h=a.getUint16(),i=[];for(e=0;h>e;e++)i.push(this.parseVerificationTypeInfo(a,b));return{type:enums.StackMapTableEntryType.FULL_FRAME,offsetDelta:d,numLocals:g,locals:c,numStackItems:h,stack:i}}}},a.parseVerificationTypeInfo=function(a,b){var c=a.getUint8();if(7===c){var d=b.get(a.getUint16()).name;return\"class \"+(/\\w/.test(d[0])?util.descriptor2typestr(d):'\"'+d+'\"')}if(8===c)return\"uninitialized \"+a.getUint16();var e=[\"bogus\",\"int\",\"float\",\"double\",\"long\",\"null\",\"this\",\"object\",\"uninitialized\"];return e[c]},a}();exports.StackMapTable=StackMapTable;var LocalVariableTable=function(){function a(a){this.entries=a}return a.prototype.getName=function(){return\"LocalVariableTable\"},a.parse=function(a,b){for(var c=a.getUint16(),d=[],e=0;c>e;e++)d.push(this.parseEntries(a,b));return new this(d)},a.parseEntries=function(a,b){return{startPC:a.getUint16(),length:a.getUint16(),name:b.get(a.getUint16()).value,descriptor:b.get(a.getUint16()).value,ref:a.getUint16()}},a}();exports.LocalVariableTable=LocalVariableTable;var LocalVariableTypeTable=function(){function a(a){this.entries=a}return a.prototype.getName=function(){return\"LocalVariableTypeTable\"},a.parse=function(a,b){var c,d=a.getUint16(),e=[];for(c=0;d>c;c++)e.push(this.parseTableEntry(a,b));return new this(e)},a.parseTableEntry=function(a,b){return{startPC:a.getUint16(),length:a.getUint16(),name:b.get(a.getUint16()).value,signature:b.get(a.getUint16()).value,index:a.getUint16()}},a}();exports.LocalVariableTypeTable=LocalVariableTypeTable;var Exceptions=function(){function a(a){this.exceptions=a}return a.prototype.getName=function(){return\"Exceptions\"},a.parse=function(a,b){for(var c=a.getUint16(),d=[],e=0;c>e;e++)d.push(a.getUint16());return new this(d.map(function(a){return b.get(a).name}))},a}();exports.Exceptions=Exceptions;var InnerClasses=function(){function a(a){this.classes=a}return a.prototype.getName=function(){return\"InnerClasses\"},a.parse=function(a,b){for(var c=a.getUint16(),d=[],e=0;c>e;e++)d.push(this.parseClass(a,b));return new this(d)},a.parseClass=function(a,b){return{innerInfoIndex:a.getUint16(),outerInfoIndex:a.getUint16(),innerNameIndex:a.getUint16(),innerAccessFlags:a.getUint16()}},a}();exports.InnerClasses=InnerClasses;var ConstantValue=function(){function a(a){this.value=a}return a.prototype.getName=function(){return\"ConstantValue\"},a.parse=function(a,b){var c=a.getUint16();return new this(b.get(c))},a}();exports.ConstantValue=ConstantValue;var Synthetic=function(){function a(){}return a.prototype.getName=function(){return\"Synthetic\"},a.parse=function(a,b){return new this},a}();exports.Synthetic=Synthetic;var Deprecated=function(){function a(){}return a.prototype.getName=function(){return\"Deprecated\"},a.parse=function(a,b){return new this},a}();exports.Deprecated=Deprecated;var Signature=function(){function a(a){this.sig=a}return a.prototype.getName=function(){return\"Signature\"},a.parse=function(a,b){return new this(b.get(a.getUint16()).value)},a}();exports.Signature=Signature;var RuntimeVisibleAnnotations=function(){function a(a,b,c,d){this.rawBytes=a,this.isHidden=b,this.isCallerSensitive=c,this.isCompiled=d}return a.prototype.getName=function(){return\"RuntimeVisibleAnnotations\"},a.parse=function(a,b,c){function d(){a.skip(2);var b,c=a.getUint16();for(b=0;c>b;b++)a.skip(2),e()}function e(){var b=String.fromCharCode(a.getUint8());switch(b){case\"e\":a.skip(2);case\"Z\":case\"B\":case\"C\":case\"S\":case\"I\":case\"F\":case\"J\":case\"D\":case\"s\":case\"c\":a.skip(2);break;case\"@\":d();break;case\"[\":var c,f=a.getUint16();for(c=0;f>c;c++)e()}}var f=a.read(c),g=!1,h=!1,i=!1;a.seek(a.pos()-f.length);var j,k=a.getUint16();for(j=0;k>j;j++){var l=b.get(a.getUint16());switch(a.seek(a.pos()-2),d(),l.value){case\"Ljava/lang/invoke/LambdaForm$Hidden;\":g=!0;break;case\"Lsig/sun/reflect/CallerSensitive;\":i=!0;break;case\"Lsig/java/lang/invoke/LambdaForm$Compiled\":h=!0}}return new this(f,g,i,h)},a}();exports.RuntimeVisibleAnnotations=RuntimeVisibleAnnotations;var AnnotationDefault=function(){function a(a){this.rawBytes=a}return a.prototype.getName=function(){return\"AnnotationDefault\"},a.parse=function(a,b,c){return new this(a.read(c))},a}();exports.AnnotationDefault=AnnotationDefault;var EnclosingMethod=function(){function a(a,b){this.encClass=a,this.encMethod=b}return a.prototype.getName=function(){return\"EnclosingMethod\"},a.parse=function(a,b){var c=b.get(a.getUint16()),d=a.getUint16(),e=null;return d>0&&(e=b.get(d)),new this(c,e)},a}();exports.EnclosingMethod=EnclosingMethod;var BootstrapMethods=function(){function a(a){this.bootstrapMethods=a}return a.prototype.getName=function(){return\"BootstrapMethods\"},a.parse=function(a,b){for(var c=a.getUint16(),d=[],e=0;c>e;e++){for(var f=b.get(a.getUint16()),g=a.getUint16(),h=[],i=0;g>i;i++)h.push(b.get(a.getUint16()));d.push([f,h])}return new this(d)},a}();exports.BootstrapMethods=BootstrapMethods;var RuntimeVisibleParameterAnnotations=function(){function a(a){this.rawBytes=a}return a.prototype.getName=function(){return\"RuntimeVisibleParameterAnnotations\"},a.parse=function(a,b,c){return new this(a.read(c))},a}();exports.RuntimeVisibleParameterAnnotations=RuntimeVisibleParameterAnnotations,exports.makeAttributes=makeAttributes;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function assert(a,b,c){if(!a)throw new Error(\"Assertion failed: \"+b+\"\\n\"+(c?c.getPrintableStackTrace():\"\"))}module.exports=assert;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";var toExport;toExport=\"undefined\"!=typeof window?window:\"undefined\"!=typeof self?self:global,module.exports=toExport;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function validateThreadTransition(a,b){var c=exports.validTransitions.hasOwnProperty(\"\"+a)&&exports.validTransitions[a].hasOwnProperty(\"\"+b);return c}function validateReturnValue(a,b,c,d,e,f,g){if(\"java/lang/invoke/MethodHandle/invokeBasic([Ljava/lang/Object;)Ljava/lang/Object;\"===b.fullSignature)return!0;var h;if(util.is_primitive_type(c))switch(c){case\"Z\":break;case\"B\":break;case\"C\":break;case\"S\":break;case\"I\":break;case\"J\":break;case\"F\":break;case\"D\":break;case\"V\":}else util.is_array_type(c)?null!=f&&(h=assertClassInitializedOrResolved(a,e,c,!0)):null!=f&&(h=assertClassInitializedOrResolved(a,e,c,!1),h.accessFlags.isInterface()||assertClassInitializedOrResolved(a,e,c,!0));return!0}function assertClassInitializedOrResolved(a,b,c,d){for(var e=null;null===e;)e=d?b.getInitializedClass(a,c):b.getResolvedClass(c),null!==b.getLoaderObject()&&(b=null===b.getLoaderObject()[\"java/lang/ClassLoader/parent\"]?a.getBsCl():b.getLoaderObject()[\"java/lang/ClassLoader/parent\"].$loader);return e}function printConstantPoolItem(a){switch(a.getType()){case enums.ConstantPoolItemType.METHODREF:var b=a;return util.ext_classname(b.classInfo.name)+\".\"+b.signature;case enums.ConstantPoolItemType.INTERFACE_METHODREF:var c=a;return util.ext_classname(c.classInfo.name)+\".\"+c.signature;case enums.ConstantPoolItemType.FIELDREF:var d=a;return util.ext_classname(d.classInfo.name)+\".\"+d.nameAndTypeInfo.name+\":\"+util.ext_classname(d.nameAndTypeInfo.descriptor);case enums.ConstantPoolItemType.NAME_AND_TYPE:var e=a;return e.name+\":\"+e.descriptor;case enums.ConstantPoolItemType.CLASS:var f=a;return util.ext_classname(f.name);default:return logging.debug_var(a.value)}}function annotateOpcode(a,b,c,d){return exports.OpcodeLayoutPrinters[enums.OpcodeLayouts[a]](b,c,d)}var enums=__webpack_require__(9),assert=__webpack_require__(13),gLong=__webpack_require__(8),opcodes=__webpack_require__(16),logging=__webpack_require__(17),util=__webpack_require__(6),ThreadStatus=enums.ThreadStatus,global=__webpack_require__(14),debug=logging.debug,vtrace=logging.vtrace,trace=logging.trace,maxMethodResumes=1e4,methodResumesLeft=maxMethodResumes,numSamples=1,PreAllocatedStack=function(){function a(a){this.curr=0,this.store=new Array(a)}return a.prototype.push=function(a){this.store[this.curr++]=a},a.prototype.pushAll=function(){for(var a=arguments.length,b=0;a>b;b++)this.store[this.curr++]=arguments[b]},a.prototype.pushWithNull=function(a){this.store[this.curr]=a,this.curr+=2},a.prototype.push6=function(a,b,c,d,e,f){this.store[this.curr++]=a,this.store[this.curr++]=b,this.store[this.curr++]=c,this.store[this.curr++]=d,this.store[this.curr++]=e,this.store[this.curr++]=f},a.prototype.swap=function(){var a=this.store[this.curr-1];this.store[this.curr-1]=this.store[this.curr-2],this.store[this.curr-2]=a},a.prototype.dup=function(){this.store[this.curr]=this.store[this.curr-1],this.curr++},a.prototype.dup2=function(){this.store[this.curr]=this.store[this.curr-2],this.store[this.curr+1]=this.store[this.curr-1],this.curr+=2},a.prototype.dup_x1=function(){var a=this.store[this.curr-1];this.store[this.curr-1]=this.store[this.curr-2],this.store[this.curr]=a,this.store[this.curr-2]=a,this.curr++},a.prototype.dup_x2=function(){var a=this.store[this.curr-1];this.store[this.curr-1]=this.store[this.curr-2],this.store[this.curr-2]=this.store[this.curr-3],this.store[this.curr]=a,this.store[this.curr-3]=a,this.curr++},a.prototype.dup2_x1=function(){var a=this.store[this.curr-1],b=this.store[this.curr-2];this.store[this.curr]=b,this.store[this.curr+1]=a,this.store[this.curr-1]=this.store[this.curr-3],this.store[this.curr-2]=a,this.store[this.curr-3]=b,this.curr+=2},a.prototype.pop=function(){return this.store[--this.curr]},a.prototype.pop2=function(){return this.curr-=2,this.store[this.curr]},a.prototype.bottom=function(){return this.store[0]},a.prototype.top=function(){return this.store[this.curr-1]},a.prototype.fromTop=function(a){return this.store[this.curr-(a+1)]},a.prototype.sliceFromBottom=function(a){return this.store.slice(a,this.curr)},a.prototype.sliceFromTop=function(a){return this.store.slice(this.curr-a,this.curr)},a.prototype.dropFromTop=function(a){this.curr-=a},a.prototype.sliceAndDropFromTop=function(a){var b=this.curr;return this.curr-=a,this.store.slice(b-a,b)},a.prototype.getRaw=function(){return this.store.slice(0,this.curr)},a.prototype.clear=function(){this.curr=0},a}();exports.PreAllocatedStack=PreAllocatedStack;var jitUtil={isNull:opcodes.isNull,resolveCPItem:opcodes.resolveCPItem,throwException:opcodes.throwException,gLong:gLong,float2int:util.float2int,wrapFloat:util.wrapFloat,Constants:enums.Constants},BytecodeStackFrame=function(){function a(a,b){this.pc=0,this.returnToThreadLoop=!1,this.lockedMethodLock=!1,this.type=enums.StackFrameType.BYTECODE,this.method=a,a.incrBBEntries(),this.locals=b,this.opStack=new PreAllocatedStack(a.getCodeAttribute().getMaxStack())}return a.prototype.run=function(a){var b=this,c=this.method,d=this.method.getCodeAttribute().getCode(),e=opcodes.LookupTable;if(!c.accessFlags.isSynchronized()||this.lockedMethodLock||(this.lockedMethodLock=c.methodLock(a,this).enter(a,function(){b.lockedMethodLock=!0}),this.lockedMethodLock))if(this.returnToThreadLoop=!1,a.getJVM().isJITDisabled())for(;!this.returnToThreadLoop;){var f=d.readUInt8(this.pc);e[f](a,this,d)}else for(;!this.returnToThreadLoop;){var g=c.getOp(this.pc,d,a);\"function\"==typeof g?g(this,a,jitUtil):e[g](a,this,d)}},a.prototype.scheduleResume=function(a,b,c){var d=this.method.getCodeAttribute().getCode().readUInt8(this.pc);switch(d){case enums.OpCode.INVOKEINTERFACE:case enums.OpCode.INVOKEINTERFACE_FAST:this.pc+=5;break;case enums.OpCode.INVOKESPECIAL:case enums.OpCode.INVOKESTATIC:case enums.OpCode.INVOKEVIRTUAL:case enums.OpCode.INVOKESTATIC_FAST:case enums.OpCode.INVOKENONVIRTUAL_FAST:case enums.OpCode.INVOKEVIRTUAL_FAST:case enums.OpCode.INVOKEHANDLE:case enums.OpCode.INVOKEBASIC:case enums.OpCode.LINKTOSPECIAL:case enums.OpCode.LINKTOVIRTUAL:case enums.OpCode.INVOKEDYNAMIC:case enums.OpCode.INVOKEDYNAMIC_FAST:this.pc+=3}void 0!==b&&this.opStack.push(b),void 0!==c&&this.opStack.push(c)},a.prototype.scheduleException=function(a,b){for(var c,d=this.method.getCodeAttribute(),e=this.pc,f=this.method,g=d.exceptionHandlers,h=b.getClass(),i=0;i<g.length;i++){var j=g[i];if(j.startPC<=e&&e<j.endPC){if(\"<any>\"===j.catchType){c=j;break}var k=f.cls.getLoader().getResolvedClass(j.catchType);if(null==k){for(var l=[],m=0;m<g.length;m++){var n=g[m];\"<any>\"!==n.catchType&&l.push(n.catchType)}return a.setStatus(ThreadStatus.ASYNC_WAITING),f.cls.getLoader().resolveClasses(a,l,function(c){null!==c&&a.throwException(b)}),!0}if(h.isCastable(k)){c=j;break}}}return null!=c?(this.opStack.clear(),this.opStack.push(b),this.pc=c.handlerPC,!0):(f.accessFlags.isSynchronized()&&f.methodLock(a,this).exit(a),!1)},a.prototype.getLoader=function(){return this.method.cls.getLoader()},a.prototype.getStackTraceFrame=function(){return{method:this.method,pc:this.pc,stack:this.opStack.sliceFromBottom(0),locals:this.locals.slice(0)}},a}();exports.BytecodeStackFrame=BytecodeStackFrame;var NativeStackFrame=function(){function a(a,b){this.type=enums.StackFrameType.NATIVE,this.method=a,this.args=b,this.nativeMethod=a.getNativeFunction()}return a.prototype.run=function(a){var b=this.nativeMethod.apply(null,this.method.convertArgs(a,this.args));if(a.getStatus()===ThreadStatus.RUNNABLE&&a.currentMethod()===this.method){var c=this.method.returnType;switch(c){case\"J\":case\"D\":a.asyncReturn(b,null);break;case\"Z\":a.asyncReturn(b?1:0);break;default:a.asyncReturn(b)}}},a.prototype.scheduleResume=function(a,b,c){},a.prototype.scheduleException=function(a,b){return!1},a.prototype.getStackTraceFrame=function(){return{method:this.method,pc:-1,stack:[],locals:[]}},a.prototype.getLoader=function(){return this.method.cls.getLoader()},a}();exports.NativeStackFrame=NativeStackFrame;var InternalStackFrame=function(){function a(a){this.isException=!1,this.type=enums.StackFrameType.INTERNAL,this.cb=a}return a.prototype.run=function(a){a.framePop(),a.setStatus(ThreadStatus.ASYNC_WAITING),this.isException?this.cb(this.val):this.cb(null,this.val)},a.prototype.scheduleResume=function(a,b){this.isException=!1,this.val=b},a.prototype.scheduleException=function(a,b){return this.isException=!0,this.val=b,!0},a.prototype.getStackTraceFrame=function(){return null},a.prototype.getLoader=function(){throw new Error(\"Internal stack frames have no loader.\")},a}();exports.InternalStackFrame=InternalStackFrame;var JVMThread=function(){function a(a,b,c){this.status=ThreadStatus.NEW,this.stack=[],this.interrupted=!1,this.monitor=null,this.jvm=a,this.bsCl=a.getBootstrapClassLoader(),this.tpool=b,this.jvmThreadObj=c}return a.prototype.getJVMObject=function(){return this.jvmThreadObj},a.prototype.isDaemon=function(){return 0!==this.jvmThreadObj[\"java/lang/Thread/daemon\"]},a.prototype.getPriority=function(){return this.jvmThreadObj[\"java/lang/Thread/priority\"]},a.prototype.setJVMObject=function(a){a[\"java/lang/Thread/threadStatus\"]=this.jvmThreadObj[\"java/lang/Thread/threadStatus\"],this.jvmThreadObj=a},a.prototype.getRef=function(){return this.jvmThreadObj.ref},a.prototype.isInterrupted=function(){return this.interrupted},a.prototype.currentMethod=function(){for(var a,b=this.stack,c=b.length;--c>=0;)if(a=b[c].getStackTraceFrame().method,null!==a)return a;return null},a.prototype.setInterrupted=function(a){this.interrupted=a},a.prototype.getBsCl=function(){return this.bsCl},a.prototype.getLoader=function(){var a=this.stack[this.stack.length-1].getLoader();if(a)return a;for(var b=this.stack.length,c=2;b>=c;c++)if(a=this.stack[b-c].getLoader())return a;throw new Error(\"Unable to find loader.\")},a.prototype[\"import\"]=function(a,b,c){var d=this;void 0===c&&(c=!0);var e=this.getLoader();if(this.setStatus(ThreadStatus.ASYNC_WAITING),Array.isArray(a)){var f=[];util.asyncForEach(a,function(a,b){d._import(a,e,function(a){f.push(a),b()},c)},function(a){b(f)})}else this._import(a,e,b,c)},a.prototype._import=function(a,b,c,d){var e=this,f=b.getInitializedClass(this,a);f?setImmediate(function(){return c(f.getConstructor(e))}):b.initializeClass(this,a,function(a){a&&c(a.getConstructor(e))},d)},a.prototype.getJVM=function(){return this.jvm},a.prototype.getThreadPool=function(){return this.tpool},a.prototype.getStackTrace=function(){var a,b,c=[];for(a=0;a<this.stack.length;a++)b=this.stack[a].getStackTraceFrame(),null!=b&&c.push(b);return c},a.prototype.getPrintableStackTrace=function(){var a=\"\";return this.getStackTrace().reverse().forEach(function(b){if(a+=\"\tat \"+util.ext_classname(b.method.cls.getInternalName())+\"::\"+b.method.name+\"(\",b.pc>=0){var c=b.method.getCodeAttribute(),d=c.getAttribute(\"LineNumberTable\"),e=b.method.cls.getAttribute(\"SourceFile\");if(a+=null!=e?e.filename:\"unknown\",null!=d){var f=d.getLineNumber(b.pc);a+=\":\"+f,a+=\" Bytecode offset: \"+b.pc}}else a+=\"native\";a+=\")\\n\"}),a},a.prototype.run=function(){var a=this.stack,b=(new Date).getTime();for(methodResumesLeft=maxMethodResumes;this.status===ThreadStatus.RUNNABLE&&a.length>0;){var c=a[a.length-1];if(c.run(this),0===--methodResumesLeft){var d=(new Date).getTime(),e=d-b,f=maxMethodResumes/e*this.jvm.getResponsiveness()|0;maxMethodResumes=(f+numSamples*maxMethodResumes)/(numSamples+1)|0,0>=maxMethodResumes&&(maxMethodResumes=10),numSamples++,this.tpool.quantumOver(this);break}}0===a.length&&this.setStatus(ThreadStatus.TERMINATED)},a.prototype.sanityCheck=function(){switch(this.status){case ThreadStatus.NEW:return!0;case ThreadStatus.RUNNABLE:return!0;case ThreadStatus.TIMED_WAITING:return!0;case ThreadStatus.WAITING:return!0;case ThreadStatus.BLOCKED:case ThreadStatus.UNINTERRUPTABLY_BLOCKED:return!0;case ThreadStatus.ASYNC_WAITING:return!0;case ThreadStatus.TERMINATED:return!0;case ThreadStatus.PARKED:return!0;default:return!1}},a.prototype.rawSetStatus=function(a){var b=0,c=this.status;switch(logging.log_level===logging.VTRACE,this.status=a,a){case ThreadStatus.NEW:b|=enums.JVMTIThreadState.ALIVE;break;case ThreadStatus.RUNNABLE:b|=enums.JVMTIThreadState.RUNNABLE;break;case ThreadStatus.BLOCKED:case ThreadStatus.UNINTERRUPTABLY_BLOCKED:b|=enums.JVMTIThreadState.BLOCKED_ON_MONITOR_ENTER;break;case ThreadStatus.WAITING:case ThreadStatus.ASYNC_WAITING:case ThreadStatus.PARKED:b|=enums.JVMTIThreadState.WAITING_INDEFINITELY;break;case ThreadStatus.TIMED_WAITING:b|=enums.JVMTIThreadState.WAITING_WITH_TIMEOUT;break;case ThreadStatus.TERMINATED:b|=enums.JVMTIThreadState.TERMINATED;break;default:b=enums.JVMTIThreadState.RUNNABLE}this.jvmThreadObj[\"java/lang/Thread/threadStatus\"]=b,this.tpool.statusChange(this,c,this.status)},a.prototype.setStatus=function(a,b){if(void 0===b&&(b=null),this.status!==a){this.status;this.monitor=b,a!==ThreadStatus.TERMINATED?this.rawSetStatus(a):this.exit()}},a.prototype.exit=function(){var a=this,b=this.jvmThreadObj.getMonitor();if(!b.isBlocked(this)&&b.getOwner()!==this&&this.status!==ThreadStatus.TERMINATED)if(0===this.stack.length){if(this.setStatus(ThreadStatus.ASYNC_WAITING),this.jvm.hasVMBooted()){var c=function(){a.jvmThreadObj[\"exit()V\"](a,null,function(c){b.notifyAll(a),b.exit(a),a.rawSetStatus(ThreadStatus.TERMINATED)})};b.enter(this,c)&&c()}}else{for(;this.stack.length>0;)this.stack.pop();this.rawSetStatus(ThreadStatus.TERMINATED)}},a.prototype.signalPriorityChange=function(){this.tpool.priorityChange(this)},a.prototype.getMonitorBlock=function(){return this.monitor},a.prototype.getStatus=function(){return this.status},a.prototype.asyncReturn=function(a,b){var c=this.stack,d=c.pop();if(d.type!=enums.StackFrameType.INTERNAL){d.type===enums.StackFrameType.BYTECODE}var e=c.length-1;e>=0&&c[e].scheduleResume(this,a,b),this.setStatus(ThreadStatus.RUNNABLE)},a.prototype.framePop=function(){this.stack.pop()},a.prototype.throwException=function(a){var b=this.stack,c=b.length-1;if(c>=0)for(b[c].type===enums.StackFrameType.INTERNAL&&(b.pop(),c--),this.setStatus(ThreadStatus.RUNNABLE);b.length>0&&!b[c].scheduleException(this,a);)b.pop(),c--;0===b.length&&this.handleUncaughtException(a)},a.prototype.throwNewException=function(a,b){var c=this,d=this.bsCl.getInitializedClass(this,a),e=function(){var a=d.getConstructor(c),e=new a(c);e[\"<init>(Ljava/lang/String;)V\"](c,[util.initString(c.bsCl,b)],function(a){a?c.throwException(a):c.throwException(e)})};null!=d?e():(this.setStatus(ThreadStatus.ASYNC_WAITING),this.bsCl.initializeClass(this,a,function(a){null!=a&&(d=a,e())},!1))},a.prototype.handleUncaughtException=function(a){this.jvmThreadObj[\"dispatchUncaughtException(Ljava/lang/Throwable;)V\"](this,[a])},a.prototype.close=function(){this.jvm=null},a}();exports.JVMThread=JVMThread,exports.validTransitions={},exports.validTransitions[ThreadStatus.NEW]={},exports.validTransitions[ThreadStatus.NEW][ThreadStatus.RUNNABLE]=\"RunMethod invoked on new thread\",exports.validTransitions[ThreadStatus.NEW][ThreadStatus.ASYNC_WAITING]=\"[JVM bootup only] Internal operation occurs on new thread\",exports.validTransitions[ThreadStatus.NEW][ThreadStatus.TERMINATED]=\"[JVM halt0 only] When the JVM shuts down, it terminates all threads, including those that have never been run.\",exports.validTransitions[ThreadStatus.ASYNC_WAITING]={},exports.validTransitions[ThreadStatus.ASYNC_WAITING][ThreadStatus.RUNNABLE]=\"Async operation completes\",exports.validTransitions[ThreadStatus.ASYNC_WAITING][ThreadStatus.TERMINATED]=\"RunMethod completes and callstack is empty\",exports.validTransitions[ThreadStatus.BLOCKED]={},exports.validTransitions[ThreadStatus.BLOCKED][ThreadStatus.RUNNABLE]=\"Acquires monitor, or is interrupted\",exports.validTransitions[ThreadStatus.BLOCKED][ThreadStatus.TERMINATED]=\"Thread is terminated whilst blocked.\",exports.validTransitions[ThreadStatus.PARKED]={},exports.validTransitions[ThreadStatus.PARKED][ThreadStatus.ASYNC_WAITING]=\"Balancing unpark, or is interrupted\",exports.validTransitions[ThreadStatus.PARKED][ThreadStatus.TERMINATED]=\"Thread is terminated whilst parked.\",exports.validTransitions[ThreadStatus.RUNNABLE]={},exports.validTransitions[ThreadStatus.RUNNABLE][ThreadStatus.ASYNC_WAITING]=\"Thread performs an asynchronous JavaScript operation\",exports.validTransitions[ThreadStatus.RUNNABLE][ThreadStatus.TERMINATED]=\"Callstack is empty\",exports.validTransitions[ThreadStatus.RUNNABLE][ThreadStatus.BLOCKED]=\"Thread waits to acquire monitor\",exports.validTransitions[ThreadStatus.RUNNABLE][ThreadStatus.WAITING]=\"Thread waits on monitor (Object.wait)\",exports.validTransitions[ThreadStatus.RUNNABLE][ThreadStatus.TIMED_WAITING]=\"Thread waits on monitor with timeout (Object.wait)\",exports.validTransitions[ThreadStatus.RUNNABLE][ThreadStatus.PARKED]=\"Thread parks itself\",exports.validTransitions[ThreadStatus.TERMINATED]={},exports.validTransitions[ThreadStatus.TERMINATED][ThreadStatus.NEW]=\"Thread is resurrected for re-use\",exports.validTransitions[ThreadStatus.TERMINATED][ThreadStatus.RUNNABLE]=\"Thread is resurrected for re-use\",exports.validTransitions[ThreadStatus.TERMINATED][ThreadStatus.ASYNC_WAITING]=\"[JVM Bootup] Thread is resurrected for internal operation\",exports.validTransitions[ThreadStatus.TIMED_WAITING]={},exports.validTransitions[ThreadStatus.TIMED_WAITING][ThreadStatus.RUNNABLE]=\"Timer expires, or thread is interrupted, and thread immediately acquires lock\",exports.validTransitions[ThreadStatus.TIMED_WAITING][ThreadStatus.UNINTERRUPTABLY_BLOCKED]=\"Thread is interrupted or notified, or timer expires, and lock already owned\",exports.validTransitions[ThreadStatus.TIMED_WAITING][ThreadStatus.TERMINATED]=\"Thread is terminated whilst waiting.\",exports.validTransitions[ThreadStatus.UNINTERRUPTABLY_BLOCKED]={},exports.validTransitions[ThreadStatus.UNINTERRUPTABLY_BLOCKED][ThreadStatus.RUNNABLE]=\"Thread acquires monitor\",exports.validTransitions[ThreadStatus.UNINTERRUPTABLY_BLOCKED][ThreadStatus.TERMINATED]=\"Thread is terminated whilst blocked.\",exports.validTransitions[ThreadStatus.WAITING]={},exports.validTransitions[ThreadStatus.WAITING][ThreadStatus.RUNNABLE]=\"Thread is interrupted, and immediately acquires lock\",exports.validTransitions[ThreadStatus.WAITING][ThreadStatus.UNINTERRUPTABLY_BLOCKED]=\"Thread is notified or interrupted, and does not immediately acquire lock\",exports.validTransitions[ThreadStatus.WAITING][ThreadStatus.TERMINATED]=\"Thread is terminated whilst waiting.\",exports.OpcodeLayoutPrinters={},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.OPCODE_ONLY]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.CONSTANT_POOL]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+printConstantPoolItem(a.cls.constantPool.get(b.readUInt16BE(c+1)))},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.CONSTANT_POOL_UINT8]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+printConstantPoolItem(a.cls.constantPool.get(b.readUInt8(c+1)))},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.CONSTANT_POOL_AND_UINT8_VALUE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+printConstantPoolItem(a.cls.constantPool.get(b.readUInt16BE(c+1)))+\" \"+b.readUInt8(c+3)},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.UINT8_VALUE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+b.readUInt8(c+1)},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.UINT8_AND_INT8_VALUE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+b.readUInt8(c+1)+\" \"+b.readInt8(c+2)},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.INT8_VALUE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+b.readInt8(c+1)},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.INT16_VALUE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+b.readInt16BE(c+1)},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.INT32_VALUE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+b.readInt32BE(c+1)},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.ARRAY_TYPE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()+\" \"+opcodes.ArrayTypes[b.readUInt8(c+1)]},exports.OpcodeLayoutPrinters[enums.OpcodeLayoutType.WIDE]=function(a,b,c){return enums.OpCode[b.readUInt8(c)].toLowerCase()},exports.annotateOpcode=annotateOpcode;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function isNull(a,b,c){return null==c?(throwException(a,b,\"Ljava/lang/NullPointerException;\",\"\"),!0):!1}function pop2(a){return a.pop(),a.pop()}function resolveCPItem(a,b,c){a.setStatus(enums.ThreadStatus.ASYNC_WAITING),c.resolve(a,b.getLoader(),b.method.cls,function(b){b&&a.setStatus(enums.ThreadStatus.RUNNABLE)},!1),b.returnToThreadLoop=!0}function initializeClassFromClass(a,b,c){a.setStatus(enums.ThreadStatus.ASYNC_WAITING),c.initialize(a,function(b){null!=b&&a.setStatus(enums.ThreadStatus.RUNNABLE)},!1),b.returnToThreadLoop=!0}function initializeClass(a,b,c){function d(b){b.initialize(a,function(b){null!=b&&a.setStatus(enums.ThreadStatus.RUNNABLE)})}a.setStatus(enums.ThreadStatus.ASYNC_WAITING),c.isResolved()?d(c.cls):c.resolve(a,b.getLoader(),b.method.cls,function(a){a&&d(c.cls)},!1),b.returnToThreadLoop=!0}function throwException(a,b,c,d){a.throwNewException(c,d),b.returnToThreadLoop=!0}var gLong=__webpack_require__(8),util=__webpack_require__(6),enums=__webpack_require__(9),assert=__webpack_require__(13);exports.isNull=isNull,exports.pop2=pop2,exports.resolveCPItem=resolveCPItem,exports.initializeClassFromClass=initializeClassFromClass,exports.initializeClass=initializeClass,exports.throwException=throwException,exports.ArrayTypes={4:\"Z\",5:\"C\",6:\"F\",7:\"D\",8:\"B\",9:\"S\",10:\"I\",11:\"J\"};var Opcodes=function(){function a(){}return a._aload_32=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop();if(!isNull(a,b,e)){var f=e.array.length;0>d||d>=f?throwException(a,b,\"Ljava/lang/ArrayIndexOutOfBoundsException;\",d+\" not in length \"+f+\" array of type \"+e.getClass().getInternalName()):(c.push(e.array[d]),b.pc++)}},a._aload_64=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop();if(!isNull(a,b,e)){var f=e.array.length;0>d||d>=f?throwException(a,b,\"Ljava/lang/ArrayIndexOutOfBoundsException;\",d+\" not in length \"+f+\" array of type \"+e.getClass().getInternalName()):(c.push(e.array[d]),c.push(null),b.pc++)}},a._astore_32=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop(),f=c.pop();if(!isNull(a,b,f)){var g=f.array.length;0>e||e>=g?throwException(a,b,\"Ljava/lang/ArrayIndexOutOfBoundsException;\",e+\" not in length \"+g+\" array of type \"+f.getClass().getInternalName()):(f.array[e]=d,b.pc++)}},a._astore_64=function(a,b){var c=b.opStack,d=c.pop2(),e=c.pop(),f=c.pop();if(!isNull(a,b,f)){var g=f.array.length;0>e||e>=g?throwException(a,b,\"Ljava/lang/ArrayIndexOutOfBoundsException;\",e+\" not in length \"+g+\" array of type \"+f.getClass().getInternalName()):(f.array[e]=d,b.pc++)}},a.aconst_null=function(a,b){b.opStack.push(null),b.pc++},a._const_0_32=function(a,b){b.opStack.push(0),b.pc++},a._const_1_32=function(a,b){b.opStack.push(1),b.pc++},a._const_2_32=function(a,b){b.opStack.push(2),b.pc++},a.iconst_m1=function(a,b){b.opStack.push(-1),b.pc++},a.iconst_3=function(a,b){b.opStack.push(3),b.pc++},a.iconst_4=function(a,b){b.opStack.push(4),b.pc++},a.iconst_5=function(a,b){b.opStack.push(5),b.pc++},a.lconst_0=function(a,b){b.opStack.pushWithNull(gLong.ZERO),b.pc++},a.lconst_1=function(a,b){b.opStack.pushWithNull(gLong.ONE),b.pc++},a.dconst_0=function(a,b){b.opStack.pushWithNull(0),b.pc++},a.dconst_1=function(a,b){b.opStack.pushWithNull(1),b.pc++},a._load_32=function(a,b,c){var d=b.pc;b.opStack.push(b.locals[c.readUInt8(d+1)]),b.pc+=2},a._load_0_32=function(a,b){b.opStack.push(b.locals[0]),b.pc++},a._load_1_32=function(a,b){b.opStack.push(b.locals[1]),b.pc++},a._load_2_32=function(a,b){b.opStack.push(b.locals[2]),b.pc++},a._load_3_32=function(a,b){b.opStack.push(b.locals[3]),b.pc++},a._load_64=function(a,b,c){var d=b.pc;b.opStack.pushWithNull(b.locals[c.readUInt8(d+1)]),b.pc+=2},a._load_0_64=function(a,b){b.opStack.pushWithNull(b.locals[0]),b.pc++},a._load_1_64=function(a,b){b.opStack.pushWithNull(b.locals[1]),b.pc++},a._load_2_64=function(a,b){b.opStack.pushWithNull(b.locals[2]),b.pc++},a._load_3_64=function(a,b){b.opStack.pushWithNull(b.locals[3]),b.pc++},a._store_32=function(a,b,c){var d=b.pc;b.locals[c.readUInt8(d+1)]=b.opStack.pop(),b.pc+=2},a._store_0_32=function(a,b){b.locals[0]=b.opStack.pop(),b.pc++},a._store_1_32=function(a,b){b.locals[1]=b.opStack.pop(),b.pc++},a._store_2_32=function(a,b){b.locals[2]=b.opStack.pop(),b.pc++},a._store_3_32=function(a,b){b.locals[3]=b.opStack.pop(),b.pc++},a._store_64=function(a,b,c){var d=b.pc,e=c.readUInt8(d+1);b.locals[e+1]=b.opStack.pop(),b.locals[e]=b.opStack.pop(),b.pc+=2},a._store_0_64=function(a,b){b.locals[1]=b.opStack.pop(),b.locals[0]=b.opStack.pop(),b.pc++},a._store_1_64=function(a,b){b.locals[2]=b.opStack.pop(),b.locals[1]=b.opStack.pop(),b.pc++},a._store_2_64=function(a,b){b.locals[3]=b.opStack.pop(),b.locals[2]=b.opStack.pop(),b.pc++},a._store_3_64=function(a,b){b.locals[4]=b.opStack.pop(),b.locals[3]=b.opStack.pop(),b.pc++},a.sipush=function(a,b,c){var d=b.pc;b.opStack.push(c.readInt16BE(d+1)),b.pc+=3},a.bipush=function(a,b,c){var d=b.pc;b.opStack.push(c.readInt8(d+1)),b.pc+=2},a.pop=function(a,b){b.opStack.dropFromTop(1),b.pc++},a.pop2=function(a,b){b.opStack.dropFromTop(2),b.pc++},a.dup=function(a,b){b.opStack.dup(),b.pc++},a.dup_x1=function(a,b){b.opStack.dup_x1(),b.pc++},a.dup_x2=function(a,b){b.opStack.dup_x2(),b.pc++},a.dup2=function(a,b){b.opStack.dup2(),b.pc++},a.dup2_x1=function(a,b){b.opStack.dup2_x1(),b.pc++},a.dup2_x2=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop(),f=c.pop(),g=c.pop();c.push6(e,d,g,f,e,d),b.pc++},a.swap=function(a,b){b.opStack.swap(),b.pc++},a.iadd=function(a,b){var c=b.opStack;c.push(c.pop()+c.pop()|0),b.pc++},a.ladd=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().add(c.pop2())),b.pc++},a.fadd=function(a,b){var c=b.opStack;c.push(util.wrapFloat(c.pop()+c.pop())),b.pc++},a.dadd=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2()+c.pop2()),b.pc++},a.isub=function(a,b){var c=b.opStack;c.push(-c.pop()+c.pop()|0),b.pc++},a.fsub=function(a,b){var c=b.opStack;c.push(util.wrapFloat(-c.pop()+c.pop())),b.pc++},a.dsub=function(a,b){var c=b.opStack;c.pushWithNull(-c.pop2()+c.pop2()),b.pc++},a.lsub=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().negate().add(c.pop2())),b.pc++},a.imul=function(a,b){var c=b.opStack;c.push(Math.imul(c.pop(),c.pop())),b.pc++},a.lmul=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().multiply(c.pop2())),b.pc++},a.fmul=function(a,b){var c=b.opStack;c.push(util.wrapFloat(c.pop()*c.pop())),b.pc++},a.dmul=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2()*c.pop2()),b.pc++},a.idiv=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop();0===d?throwException(a,b,\"Ljava/lang/ArithmeticException;\",\"/ by zero\"):(e===enums.Constants.INT_MIN&&-1===d?c.push(e):c.push(e/d|0),b.pc++)},a.ldiv=function(a,b){var c=b.opStack,d=c.pop2(),e=c.pop2();d.isZero()?throwException(a,b,\"Ljava/lang/ArithmeticException;\",\"/ by zero\"):(c.pushWithNull(e.div(d)),b.pc++)},a.fdiv=function(a,b){var c=b.opStack,d=c.pop();c.push(util.wrapFloat(c.pop()/d)),b.pc++},a.ddiv=function(a,b){var c=b.opStack,d=c.pop2();c.pushWithNull(c.pop2()/d),b.pc++},a.irem=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop();0===d?throwException(a,b,\"Ljava/lang/ArithmeticException;\",\"/ by zero\"):(c.push(e%d),b.pc++)},a.lrem=function(a,b){var c=b.opStack,d=c.pop2(),e=c.pop2();d.isZero()?throwException(a,b,\"Ljava/lang/ArithmeticException;\",\"/ by zero\"):(c.pushWithNull(e.modulo(d)),b.pc++)},a.frem=function(a,b){var c=b.opStack,d=c.pop();c.push(c.pop()%d),b.pc++},a.drem=function(a,b){var c=b.opStack,d=c.pop2();c.pushWithNull(c.pop2()%d),b.pc++},a.ineg=function(a,b){var c=b.opStack;c.push(0|-c.pop()),b.pc++},a.lneg=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().negate()),b.pc++},a.fneg=function(a,b){var c=b.opStack;c.push(-c.pop()),b.pc++},a.dneg=function(a,b){var c=b.opStack;c.pushWithNull(-c.pop2()),b.pc++},a.ishl=function(a,b){var c=b.opStack,d=c.pop();c.push(c.pop()<<d),b.pc++},a.lshl=function(a,b){var c=b.opStack,d=c.pop();c.pushWithNull(c.pop2().shiftLeft(gLong.fromInt(d))),b.pc++},a.ishr=function(a,b){var c=b.opStack,d=c.pop();c.push(c.pop()>>d),b.pc++},a.lshr=function(a,b){var c=b.opStack,d=c.pop();c.pushWithNull(c.pop2().shiftRight(gLong.fromInt(d))),b.pc++},a.iushr=function(a,b){var c=b.opStack,d=c.pop();c.push(c.pop()>>>d|0),b.pc++},a.lushr=function(a,b){var c=b.opStack,d=c.pop();c.pushWithNull(c.pop2().shiftRightUnsigned(gLong.fromInt(d))),b.pc++},a.iand=function(a,b){var c=b.opStack;c.push(c.pop()&c.pop()),b.pc++},a.land=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().and(c.pop2())),b.pc++},a.ior=function(a,b){var c=b.opStack;c.push(c.pop()|c.pop()),b.pc++},a.lor=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().or(c.pop2())),b.pc++},a.ixor=function(a,b){var c=b.opStack;c.push(c.pop()^c.pop()),b.pc++},a.lxor=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().xor(c.pop2())),b.pc++},a.iinc=function(a,b,c){var d=b.pc,e=c.readUInt8(d+1),f=c.readInt8(d+2);b.locals[e]=b.locals[e]+f|0,b.pc+=3},a.i2l=function(a,b){var c=b.opStack;c.pushWithNull(gLong.fromInt(c.pop())),b.pc++},a.i2f=function(a,b){b.pc++},a.i2d=function(a,b){b.opStack.push(null),b.pc++},a.l2i=function(a,b){var c=b.opStack;c.push(c.pop2().toInt()),b.pc++},a.l2f=function(a,b){var c=b.opStack;c.push(c.pop2().toNumber()),b.pc++},a.l2d=function(a,b){var c=b.opStack;c.pushWithNull(c.pop2().toNumber()),b.pc++},a.f2i=function(a,b){var c=b.opStack;c.push(util.float2int(c.pop())),b.pc++},a.f2l=function(a,b){var c=b.opStack;c.pushWithNull(gLong.fromNumber(c.pop())),b.pc++},a.f2d=function(a,b){b.opStack.push(null),b.pc++},a.d2i=function(a,b){var c=b.opStack;c.push(util.float2int(c.pop2())),b.pc++},a.d2l=function(a,b){var c=b.opStack,d=c.pop2();d===Number.POSITIVE_INFINITY?c.pushWithNull(gLong.MAX_VALUE):d===Number.NEGATIVE_INFINITY?c.pushWithNull(gLong.MIN_VALUE):c.pushWithNull(gLong.fromNumber(d)),b.pc++},a.d2f=function(a,b){var c=b.opStack;c.pop(),c.push(util.wrapFloat(c.pop())),b.pc++},a.i2b=function(a,b){var c=b.opStack;c.push(c.pop()<<24>>24),b.pc++},a.i2c=function(a,b){var c=b.opStack;c.push(65535&c.pop()),b.pc++},a.i2s=function(a,b){var c=b.opStack;c.push(c.pop()<<16>>16),b.pc++},a.lcmp=function(a,b){var c=b.opStack,d=c.pop2();c.push(c.pop2().compare(d)),b.pc++},a.fcmpl=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop();e===d?c.push(0):e>d?c.push(1):c.push(-1),b.pc++},a.fcmpg=function(a,b){var c=b.opStack,d=c.pop(),e=c.pop();e===d?c.push(0):d>e?c.push(-1):c.push(1),b.pc++},a.dcmpl=function(a,b){var c=b.opStack,d=c.pop2(),e=c.pop2();e===d?c.push(0):e>d?c.push(1):c.push(-1),b.pc++},a.dcmpg=function(a,b){var c=b.opStack,d=c.pop2(),e=c.pop2();e===d?c.push(0):d>e?c.push(-1):c.push(1),b.pc++},a.ifeq=function(a,b,c){var d=b.pc;if(0===b.opStack.pop()){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.ifne=function(a,b,c){var d=b.pc;if(0!==b.opStack.pop()){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.iflt=function(a,b,c){var d=b.pc;if(b.opStack.pop()<0){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.ifge=function(a,b,c){var d=b.pc;if(b.opStack.pop()>=0){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.ifgt=function(a,b,c){var d=b.pc;if(b.opStack.pop()>0){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.ifle=function(a,b,c){var d=b.pc;if(b.opStack.pop()<=0){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.if_icmpeq=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(f===e){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a.if_icmpne=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(f!==e){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a.if_icmplt=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(e>f){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a.if_icmpge=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(f>=e){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a.if_icmpgt=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(f>e){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a.if_icmple=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(e>=f){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a.if_acmpeq=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(f===e){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a.if_acmpne=function(a,b,c){var d=b.pc,e=b.opStack.pop(),f=b.opStack.pop();if(f!==e){var g=c.readInt16BE(d+1);b.pc+=g,0>g&&b.method.incrBBEntries()}else b.pc+=3},a[\"goto\"]=function(a,b,c){var d=b.pc,e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()},a.jsr=function(a,b,c){var d=b.pc;b.opStack.push(d+3);var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()},a.ret=function(a,b,c){var d=b.pc;b.pc=b.locals[c.readUInt8(d+1)]},a.tableswitch=function(a,b,c){var d=b.pc;d+=(4-(d+1)%4)%4+1;var e=c.readInt32BE(d),f=c.readInt32BE(d+4),g=c.readInt32BE(d+8),h=b.opStack.pop();h>=f&&g>=h?b.pc+=c.readInt32BE(d+12+4*(h-f)):b.pc+=e},a.lookupswitch=function(a,b,c){var d=b.pc;d+=(4-(d+1)%4)%4+1;var e,f=c.readInt32BE(d),g=c.readInt32BE(d+4),h=b.opStack.pop();for(d+=8,e=0;g>e;e++){if(c.readInt32BE(d)===h){var i=c.readInt32BE(d+4);return b.pc+=i,void(0>i&&b.method.incrBBEntries())}d+=8}b.pc+=f},a[\"return\"]=function(a,b){b.returnToThreadLoop=!0,b.method.accessFlags.isSynchronized()&&!b.method.methodLock(a,b).exit(a)||a.asyncReturn()},a._return_32=function(a,b){b.returnToThreadLoop=!0,b.method.accessFlags.isSynchronized()&&!b.method.methodLock(a,b).exit(a)||a.asyncReturn(b.opStack.bottom())},a._return_64=function(a,b){b.returnToThreadLoop=!0,b.method.accessFlags.isSynchronized()&&!b.method.methodLock(a,b).exit(a)||a.asyncReturn(b.opStack.bottom(),null)},a.getstatic=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));if(e.isResolved()){var f=e.field.cls;f.isInitialized(a)?(\"J\"===e.nameAndTypeInfo.descriptor||\"D\"===e.nameAndTypeInfo.descriptor?c.writeUInt8(enums.OpCode.GETSTATIC_FAST64,d):c.writeUInt8(enums.OpCode.GETSTATIC_FAST32,d),e.fieldOwnerConstructor=f.getConstructor(a)):initializeClassFromClass(a,b,f)}else resolveCPItem(a,b,e)},a.getstatic_fast32=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));b.opStack.push(e.fieldOwnerConstructor[e.fullFieldName]),b.pc+=3},a.getstatic_fast64=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));b.opStack.pushWithNull(e.fieldOwnerConstructor[e.fullFieldName]),b.pc+=3},a.putstatic=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));if(e.isResolved()){var f=e.field.cls;f.isInitialized(a)?(\"J\"===e.nameAndTypeInfo.descriptor||\"D\"===e.nameAndTypeInfo.descriptor?c.writeUInt8(enums.OpCode.PUTSTATIC_FAST64,d):c.writeUInt8(enums.OpCode.PUTSTATIC_FAST32,d),e.fieldOwnerConstructor=f.getConstructor(a)):initializeClassFromClass(a,b,f)}else resolveCPItem(a,b,e)},a.putstatic_fast32=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.fieldOwnerConstructor[e.fullFieldName]=b.opStack.pop(),b.pc+=3},a.putstatic_fast64=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.fieldOwnerConstructor[e.fullFieldName]=b.opStack.pop2(),b.pc+=3},a.getfield=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=(b.getLoader(),b.opStack.top());if(!isNull(a,b,f))if(e.isResolved()){var g=e.field;\"J\"==g.rawDescriptor||\"D\"==g.rawDescriptor?c.writeUInt8(enums.OpCode.GETFIELD_FAST64,d):c.writeUInt8(enums.OpCode.GETFIELD_FAST32,d)}else resolveCPItem(a,b,e)},a.getfield_fast32=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=b.opStack,g=f.pop();isNull(a,b,g)||(f.push(g[e.fullFieldName]),b.pc+=3)},a.getfield_fast64=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=b.opStack,g=f.pop();isNull(a,b,g)||(f.pushWithNull(g[e.fullFieldName]),b.pc+=3)},a.putfield=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=(b.getLoader(),\"J\"==e.nameAndTypeInfo.descriptor||\"D\"==e.nameAndTypeInfo.descriptor),g=b.opStack.fromTop(f?2:1);if(!isNull(a,b,g))if(e.isResolved()){var h=e.field;f?c.writeUInt8(enums.OpCode.PUTFIELD_FAST64,d):c.writeUInt8(enums.OpCode.PUTFIELD_FAST32,d),e.fullFieldName=util.descriptor2typestr(h.cls.getInternalName())+\"/\"+e.nameAndTypeInfo.name}else resolveCPItem(a,b,e)},a.putfield_fast32=function(a,b,c){var d=b.pc,e=b.opStack,f=e.pop(),g=e.pop(),h=b.method.cls.constantPool.get(c.readUInt16BE(d+1));isNull(a,b,g)||(g[h.fullFieldName]=f,b.pc+=3)},a.putfield_fast64=function(a,b,c){var d=b.pc,e=b.opStack,f=e.pop2(),g=e.pop(),h=b.method.cls.constantPool.get(c.readUInt16BE(d+1));isNull(a,b,g)||(g[h.fullFieldName]=f,b.pc+=3)},a.invokevirtual=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));if(e.isResolved()){var f=e.method;if(f.isSignaturePolymorphic())switch(f.name){case\"invokeBasic\":c.writeUInt8(enums.OpCode.INVOKEBASIC,d);break;case\"invoke\":case\"invokeExact\":c.writeUInt8(enums.OpCode.INVOKEHANDLE,d);break;default:throwException(a,b,\"Ljava/lang/AbstractMethodError;\",\"Invalid signature polymorphic method: \"+f.cls.getExternalName()+\".\"+f.name)}else c.writeUInt8(enums.OpCode.INVOKEVIRTUAL_FAST,d)}else resolveCPItem(a,b,e)},a.invokeinterface=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.isResolved()?e.method.cls.isInitialized(a)?c.writeUInt8(enums.OpCode.INVOKEINTERFACE_FAST,d):initializeClass(a,b,e.classInfo):resolveCPItem(a,b,e)},a.invokedynamic=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));a.setStatus(enums.ThreadStatus.ASYNC_WAITING),e.constructCallSiteObject(a,b.getLoader(),b.method.cls,d,function(b){b&&(c.writeUInt8(enums.OpCode.INVOKEDYNAMIC_FAST,d),a.setStatus(enums.ThreadStatus.RUNNABLE))}),b.returnToThreadLoop=!0},a.invokespecial=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.isResolved()?c.writeUInt8(enums.OpCode.INVOKENONVIRTUAL_FAST,d):resolveCPItem(a,b,e)},a.invokestatic=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));if(e.isResolved()){var f=e.method;if(f.cls.isInitialized(a)){var g=enums.OpCode.INVOKESTATIC_FAST;if(e.method.isSignaturePolymorphic())switch(e.method.name){case\"linkToInterface\":case\"linkToVirtual\":g=enums.OpCode.LINKTOVIRTUAL;break;case\"linkToStatic\":case\"linkToSpecial\":g=enums.OpCode.LINKTOSPECIAL}c.writeUInt8(g,d)}else initializeClassFromClass(a,b,f.cls)}else resolveCPItem(a,b,e)},a.invokenonvirtual_fast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=b.opStack,g=e.paramWordSize,h=f.fromTop(g);if(!isNull(a,b,h)){var i=f.sliceFromTop(g);f.dropFromTop(g+1),h[e.fullSignature](a,i),b.returnToThreadLoop=!0}},a.invokestatic_fast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=b.opStack,g=e.paramWordSize,h=f.sliceAndDropFromTop(g);e.jsConstructor[e.fullSignature](a,h),b.returnToThreadLoop=!0},a.invokevirtual_fast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=e.paramWordSize,g=b.opStack,h=g.fromTop(f);isNull(a,b,h)||(h[e.signature](a,g.sliceFromTop(f)),g.dropFromTop(f+1),b.returnToThreadLoop=!0)},a.invokedynamic_fast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=e.getCallSiteObject(d),g=f[1],h=f[0].vmtarget,i=b.opStack,j=e.paramWordSize,k=i.sliceAndDropFromTop(j);null!==g&&k.push(g),h(a,null,k),b.returnToThreadLoop=!0},a.invokehandle=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=b.opStack,g=e.memberName.vmtarget,h=e.paramWordSize+1,i=e.appendix,j=f.sliceFromTop(h);null!==i&&j.push(i),isNull(a,b,j[0])||(f.dropFromTop(h),g(a,null,j),b.returnToThreadLoop=!0)},a.invokebasic=function(a,b,c){var d,e,f=b.pc,g=b.method.cls.constantPool.get(c.readUInt16BE(f+1)),h=g.getParamWordSize(),i=b.opStack,j=i.fromTop(h),k=i.sliceFromTop(h+1);isNull(a,b,j)||(i.dropFromTop(h+1),d=j[\"java/lang/invoke/MethodHandle/form\"],e=d[\"java/lang/invoke/LambdaForm/vmentry\"],e.vmtarget(a,g.nameAndTypeInfo.descriptor,k),b.returnToThreadLoop=!0)},a.linktospecial=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=b.opStack,g=e.paramWordSize,h=f.sliceFromTop(g),i=h.pop(),j=e.nameAndTypeInfo.descriptor;isNull(a,b,i)||(f.dropFromTop(g),i.vmtarget(a,j.replace(\"Ljava/lang/invoke/MemberName;)\",\")\"),h),b.returnToThreadLoop=!0)},a.linktovirtual=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=e.paramWordSize,g=b.opStack,h=g.sliceFromTop(f),i=h.pop(),j=e.nameAndTypeInfo.descriptor;isNull(a,b,i)||(g.dropFromTop(f),i.vmtarget(a,j.replace(\"Ljava/lang/invoke/MemberName;)\",\")\"),h),b.returnToThreadLoop=!0)},a.breakpoint=function(a,b){throwException(a,b,\"Ljava/lang/Error;\",\"breakpoint not implemented.\")},a[\"new\"]=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));if(e.isResolved()){var f=e.cls;f.isInitialized(a)?c.writeUInt8(enums.OpCode.NEW_FAST,d):initializeClassFromClass(a,b,f)}else resolveCPItem(a,b,e)},a.new_fast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));b.opStack.push(new e.clsConstructor(a)),b.pc+=3},a.newarray=function(a,b,c){var d=b.pc,e=b.opStack,f=\"[\"+exports.ArrayTypes[c.readUInt8(d+1)],g=b.getLoader().getInitializedClass(a,f),h=e.pop();h>=0?(e.push(new(g.getConstructor(a))(a,h)),b.pc+=2):throwException(a,b,\"Ljava/lang/NegativeArraySizeException;\",\"Tried to init \"+f+\" array with length \"+h)},a.anewarray=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.isResolved()?(c.writeUInt8(enums.OpCode.ANEWARRAY_FAST,d),e.arrayClass=b.getLoader().getInitializedClass(a,\"[\"+e.cls.getInternalName()),e.arrayClassConstructor=e.arrayClass.getConstructor(a)):resolveCPItem(a,b,e)},a.anewarray_fast=function(a,b,c){var d=b.pc,e=b.opStack,f=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),g=e.pop();g>=0?(e.push(new f.arrayClassConstructor(a,g)),b.pc+=3):throwException(a,b,\"Ljava/lang/NegativeArraySizeException;\",\"Tried to init \"+f.arrayClass.getInternalName()+\" array with length \"+g)},a.arraylength=function(a,b){var c=b.opStack,d=c.pop();isNull(a,b,d)||(c.push(d.array.length),b.pc++)},a.athrow=function(a,b){a.throwException(b.opStack.pop()),b.returnToThreadLoop=!0},a.checkcast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.isResolved()?c.writeUInt8(enums.OpCode.CHECKCAST_FAST,d):resolveCPItem(a,b,e)},a.checkcast_fast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=e.cls,g=b.opStack,h=g.top();if(null==h||h.getClass().isCastable(f))b.pc+=3;else{var i=f.getExternalName(),j=h.getClass().getExternalName();throwException(a,b,\"Ljava/lang/ClassCastException;\",j+\" cannot be cast to \"+i)}},a[\"instanceof\"]=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.isResolved()?c.writeUInt8(enums.OpCode.INSTANCEOF_FAST,d):resolveCPItem(a,b,e)},a.instanceof_fast=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1)),f=e.cls,g=b.opStack,h=g.pop();g.push(null!==h&&h.getClass().isCastable(f)?1:0),b.pc+=3},a.monitorenter=function(a,b){var c=b.opStack,d=c.pop(),e=function(){b.pc++};d.getMonitor().enter(a,e)?e():b.returnToThreadLoop=!0},a.monitorexit=function(a,b){var c=b.opStack.pop();c.getMonitor().exit(a)?b.pc++:b.returnToThreadLoop=!0},a.multianewarray=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.isResolved()?c.writeUInt8(enums.OpCode.MULTIANEWARRAY_FAST,d):resolveCPItem(a,b,e)},a.multianewarray_fast=function(a,b,c){var d,e,f=b.pc,g=b.method.cls.constantPool.get(c.readUInt16BE(f+1)),h=b.opStack,i=c.readUInt8(f+3),j=new Array(i);for(d=0;i>d;d++)if(e=h.pop(),j[i-d-1]=e,0>e)return void throwException(a,b,\"Ljava/lang/NegativeArraySizeException;\",\"Tried to init \"+g.cls.getInternalName()+\" array with a dimension of length \"+e);h.push(new(g.cls.getConstructor(a))(a,j)),b.pc+=4},a.ifnull=function(a,b,c){var d=b.pc;if(null==b.opStack.pop()){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.ifnonnull=function(a,b,c){var d=b.pc;if(null!=b.opStack.pop()){var e=c.readInt16BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()}else b.pc+=3},a.goto_w=function(a,b,c){var d=b.pc,e=c.readInt32BE(d+1);b.pc+=e,0>e&&b.method.incrBBEntries()},a.jsr_w=function(a,b,c){var d=b.pc;b.opStack.push(b.pc+5),b.pc+=c.readInt32BE(d+1)},a.nop=function(a,b){b.pc+=1},a.ldc=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt8(d+1));e.isResolved()?(b.opStack.push(e.getConstant(a)),b.pc+=2):resolveCPItem(a,b,e)},a.ldc_w=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));e.isResolved()?(b.opStack.push(e.getConstant(a)),b.pc+=3):resolveCPItem(a,b,e)},a.ldc2_w=function(a,b,c){var d=b.pc,e=b.method.cls.constantPool.get(c.readUInt16BE(d+1));b.opStack.pushWithNull(e.value),b.pc+=3},a.wide=function(a,b,c){var d=b.pc,e=c.readUInt16BE(d+2);switch(b.pc+=4,c.readUInt8(d+1)){case enums.OpCode.ILOAD:case enums.OpCode.FLOAD:case enums.OpCode.ALOAD:b.opStack.push(b.locals[e]);break;case enums.OpCode.LLOAD:case enums.OpCode.DLOAD:b.opStack.pushWithNull(b.locals[e]);break;case enums.OpCode.ISTORE:case enums.OpCode.FSTORE:case enums.OpCode.ASTORE:b.locals[e]=b.opStack.pop();break;case enums.OpCode.LSTORE:case enums.OpCode.DSTORE:b.locals[e+1]=b.opStack.pop(),b.locals[e]=b.opStack.pop();break;case enums.OpCode.RET:b.pc=b.locals[e];break;case enums.OpCode.IINC:var f=c.readInt16BE(d+4);b.locals[e]=b.locals[e]+f|0,b.pc+=2}},a.iaload=a._aload_32,a.faload=a._aload_32,a.aaload=a._aload_32,a.baload=a._aload_32,a.caload=a._aload_32,a.saload=a._aload_32,a.daload=a._aload_64,a.laload=a._aload_64,a.iastore=a._astore_32,a.fastore=a._astore_32,a.aastore=a._astore_32,a.bastore=a._astore_32,a.castore=a._astore_32,a.sastore=a._astore_32,a.lastore=a._astore_64,a.dastore=a._astore_64,a.iconst_0=a._const_0_32,a.iconst_1=a._const_1_32,a.iconst_2=a._const_2_32,a.fconst_0=a._const_0_32,a.fconst_1=a._const_1_32,a.fconst_2=a._const_2_32,a.iload=a._load_32,a.iload_0=a._load_0_32,a.iload_1=a._load_1_32,a.iload_2=a._load_2_32,a.iload_3=a._load_3_32,a.fload=a._load_32,a.fload_0=a._load_0_32,a.fload_1=a._load_1_32,a.fload_2=a._load_2_32,a.fload_3=a._load_3_32,a.aload=a._load_32,a.aload_0=a._load_0_32,a.aload_1=a._load_1_32,a.aload_2=a._load_2_32,a.aload_3=a._load_3_32,a.lload=a._load_64,a.lload_0=a._load_0_64,a.lload_1=a._load_1_64,a.lload_2=a._load_2_64,a.lload_3=a._load_3_64,a.dload=a._load_64,a.dload_0=a._load_0_64,a.dload_1=a._load_1_64,a.dload_2=a._load_2_64,a.dload_3=a._load_3_64,a.istore=a._store_32,a.istore_0=a._store_0_32,a.istore_1=a._store_1_32,a.istore_2=a._store_2_32,a.istore_3=a._store_3_32,a.fstore=a._store_32,a.fstore_0=a._store_0_32,a.fstore_1=a._store_1_32,a.fstore_2=a._store_2_32,a.fstore_3=a._store_3_32,a.astore=a._store_32,a.astore_0=a._store_0_32,a.astore_1=a._store_1_32,a.astore_2=a._store_2_32,a.astore_3=a._store_3_32,a.lstore=a._store_64,a.lstore_0=a._store_0_64,a.lstore_1=a._store_1_64,a.lstore_2=a._store_2_64,a.lstore_3=a._store_3_64,a.dstore=a._store_64,a.dstore_0=a._store_0_64,a.dstore_1=a._store_1_64,a.dstore_2=a._store_2_64,a.dstore_3=a._store_3_64,a.ireturn=a._return_32,a.freturn=a._return_32,a.areturn=a._return_32,a.lreturn=a._return_64,a.dreturn=a._return_64,a.invokeinterface_fast=a.invokevirtual_fast,a}();exports.Opcodes=Opcodes,exports.LookupTable=new Array(255),function(){for(var a=0;255>a;a++)enums.OpCode.hasOwnProperty(\"\"+a)&&(exports.LookupTable[a]=Opcodes[enums.OpCode[a].toLowerCase()])}();\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function debug_var(a){return null===a?\"!\":void 0===a?\"undef\":null!=a.ref?\"*\"+a.ref:a instanceof gLong?a+\"L\":a}function debug_vars(a){return a.map(debug_var)}function log(a,b){if(a<=exports.log_level){var c=b.join(\" \");1==a?console.error(c):console.log(c)}}function vtrace(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];log(exports.VTRACE,a)}function trace(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];log(exports.TRACE,a)}function debug(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];log(exports.DEBUG,a)}function error(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];log(exports.ERROR,a)}var gLong=__webpack_require__(8);exports.debug_var=debug_var,exports.debug_vars=debug_vars,exports.VTRACE=10,exports.TRACE=9,exports.DEBUG=5,exports.ERROR=1,exports.log_level=exports.ERROR,exports.vtrace=vtrace,exports.trace=trace,exports.debug=debug,exports.error=error;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";var StringOutputStream=function(){function a(){this._data=[]}return a.prototype.write=function(a){this._data.push(a)},a.prototype.flush=function(){var a=this._data.join(\"\");return this._data=[],a},a}();module.exports=StringOutputStream;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function makeOnError(a,b){return a.length>0?\"f.pc=\"+b+\";f.opStack.pushAll(\"+a.join(\",\")+\");\":\"f.pc=\"+b+\";\"}var enums=__webpack_require__(9),opcodes=__webpack_require__(16),escapeStringRegEx=/\\\\/g;exports.opJitInfo=function(){var a=[],b=enums.OpCode;a[b.ACONST_NULL]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=null;\"+d}},a[b.ICONST_M1]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=-1;\"+d}};var c={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[0];\"+d}},d={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[1];\"+d}},e={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[2];\"+d}},f={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[3];\"+d}};a[b.ALOAD_0]=c,a[b.ILOAD_0]=c,a[b.FLOAD_0]=c,a[b.ALOAD_1]=d,a[b.ILOAD_1]=d,a[b.FLOAD_1]=d,a[b.ALOAD_2]=e,a[b.ILOAD_2]=e,a[b.FLOAD_2]=e,a[b.ALOAD_3]=f,a[b.ILOAD_3]=f,a[b.FLOAD_3]=f;var g={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[0],\"+b[1]+\"=null;\"+d}},h={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[1],\"+b[1]+\"=null;\"+d}},i={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[2],\"+b[1]+\"=null;\"+d}},j={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=f.locals[3],\"+b[1]+\"=null;\"+d}};a[b.LLOAD_0]=g,a[b.DLOAD_0]=g,a[b.LLOAD_1]=h,a[b.DLOAD_1]=h,a[b.LLOAD_2]=i,a[b.DLOAD_2]=i,a[b.LLOAD_3]=j,a[b.DLOAD_3]=j;var k={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d){return\"f.locals[0]=\"+a[0]+\";\"+d}},l={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d){return\"f.locals[1]=\"+a[0]+\";\"+d}},m={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d){return\"f.locals[2]=\"+a[0]+\";\"+d}},n={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d){return\"f.locals[3]=\"+a[0]+\";\"+d}};a[b.ASTORE_0]=k,a[b.ISTORE_0]=k,a[b.FSTORE_0]=k,a[b.ASTORE_1]=l,a[b.ISTORE_1]=l,a[b.FSTORE_1]=l,a[b.ASTORE_2]=m,a[b.ISTORE_2]=m,a[b.FSTORE_2]=m,a[b.ASTORE_3]=n,a[b.ISTORE_3]=n,a[b.FSTORE_3]=n;var o={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f){var g=e.readUInt8(f+1);return\"f.locals[\"+(g+1)+\"]=\"+a[0]+\";f.locals[\"+g+\"]=\"+a[1]+\";\"+d}},p={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d){return\"f.locals[1]=\"+a[0]+\";f.locals[0]=\"+a[1]+\";\"+d}},q={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d){return\"f.locals[2]=\"+a[0]+\";f.locals[1]=\"+a[1]+\";\"+d}},r={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d){return\"f.locals[3]=\"+a[0]+\";f.locals[2]=\"+a[1]+\";\"+d}},s={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d){return\"f.locals[4]=\"+a[0]+\";f.locals[3]=\"+a[1]+\";\"+d}};a[b.LSTORE]=o,a[b.DSTORE]=o,a[b.LSTORE_0]=p,a[b.DSTORE_0]=p,a[b.LSTORE_1]=q,a[b.DSTORE_1]=q,a[b.LSTORE_2]=r,a[b.DSTORE_2]=r,a[b.LSTORE_3]=s,a[b.DSTORE_3]=s;var t={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=0;\"+d}},u={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=1;\"+d}},v={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=2;\"+d}};a[b.ICONST_0]=t,a[b.ICONST_1]=u,a[b.ICONST_2]=v,a[b.FCONST_0]=t,a[b.FCONST_1]=u,a[b.FCONST_2]=v,a[b.ICONST_3]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=3;\"+d}},a[b.ICONST_4]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=4;\"+d}},a[b.ICONST_5]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=5;\"+d}},a[b.LCONST_0]={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=u.gLong.ZERO,\"+b[1]+\"=null;\"+d}},a[b.LCONST_1]={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=u.gLong.ONE,\"+b[1]+\"=null;\"+d}},a[b.DCONST_0]={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=0,\"+b[1]+\"=null;\"+d}},a[b.DCONST_1]={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=1,\"+b[1]+\"=null;\"+d}};var w={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"\\nif(!u.isNull(t,f,\"+a[1]+\")){\\nvar len\"+c+\"=\"+a[1]+\".array.length;\\nif(\"+a[0]+\"<0||\"+a[0]+\">=len\"+c+\"){\\n\"+h+\"\\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\\\"\\\"+\"+a[0]+'+\" not in length \"+len'+c+'+\" array of type \"+'+a[1]+\".getClass().getInternalName());\\n}else{var \"+b[0]+\"=\"+a[1]+\".array[\"+a[0]+\"];\"+d+\"}\\n}else{\"+h+\"}\"}};a[b.IALOAD]=w,a[b.FALOAD]=w,a[b.AALOAD]=w,a[b.BALOAD]=w,a[b.CALOAD]=w,a[b.SALOAD]=w;var x={hasBranch:!1,pops:2,pushes:2,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"\\nif(!u.isNull(t,f,\"+a[1]+\")){\\nvar len\"+c+\"=\"+a[1]+\".array.length;\\nif(\"+a[0]+\"<0||\"+a[0]+\">=len\"+c+\"){\\n\"+h+\"\\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\\\"\\\"+\"+a[0]+'+\" not in length \"+len'+c+'+\" array of type \"+'+a[1]+\".getClass().getInternalName());\\n}else{var \"+b[0]+\"=\"+a[1]+\".array[\"+a[0]+\"],\"+b[1]+\"=null;\"+d+\"}\\n}else{\"+h+\"}\"}};a[b.DALOAD]=x,a[b.LALOAD]=x;var y={hasBranch:!1,pops:3,pushes:0,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"\\nif(!u.isNull(t,f,\"+a[2]+\")){\\nvar len\"+c+\"=\"+a[2]+\".array.length;\\nif(\"+a[1]+\"<0||\"+a[1]+\">=len\"+c+\"){\\n\"+h+\"\\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\\\"\\\"+\"+a[1]+'+\" not in length \"+len'+c+'+\" array of type \"+'+a[2]+\".getClass().getInternalName());\\n}else{\"+a[2]+\".array[\"+a[1]+\"]=\"+a[0]+\";\"+d+\"}\\n}else{\"+h+\"}\"}};a[b.IASTORE]=y,a[b.FASTORE]=y,a[b.AASTORE]=y,a[b.BASTORE]=y,a[b.CASTORE]=y,a[b.SASTORE]=y;var z={hasBranch:!1,pops:4,pushes:0,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"\\nif(!u.isNull(t,f,\"+a[3]+\")){\\nvar len\"+c+\"=\"+a[3]+\".array.length;\\nif(\"+a[2]+\"<0||\"+a[2]+\">=len\"+c+\"){\\n\"+h+\"\\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\\\"\\\"+\"+a[2]+'+\" not in length \"+len'+c+'+\" array of type \"+'+a[3]+\".getClass().getInternalName());\\n}else{\"+a[3]+\".array[\"+a[2]+\"]=\"+a[1]+\";\"+d+\"}\\n}else{\"+h+\"}\"}};a[b.DASTORE]=z,a[b.LASTORE]=z,a[b.LDC]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d,e,f,g){var h=e.readUInt8(f+1),i=makeOnError(g,f);return\"\\nvar cnst\"+c+\"=f.method.cls.constantPool.get(\"+h+\");\\nif(cnst\"+c+\".isResolved()){var \"+b[0]+\"=cnst\"+c+\".getConstant(t);\"+d+\"\\n}else{\"+i+\"u.resolveCPItem(t,f,cnst\"+c+\");}\"}},a[b.LDC_W]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d,e,f,g){var h=e.readUInt16BE(f+1),i=makeOnError(g,f);return\"\\nvar cnst\"+c+\"=f.method.cls.constantPool.get(\"+h+\");\\nif(cnst\"+c+\".isResolved()){var \"+b[0]+\"=cnst\"+c+\".getConstant(t);\"+d+\"\\n}else{\"+i+\"u.resolveCPItem(t,f,cnst\"+c+\");}\"}},a[b.LDC2_W]={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d,e,f){var g=e.readUInt16BE(f+1);return\"var \"+b[0]+\"=f.method.cls.constantPool.get(\"+g+\").value,\"+b[1]+\"=null;\"+d}},a[b.GETSTATIC_FAST32]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d,e,f){var g=e.readUInt16BE(f+1);return\"var fi\"+c+\"=f.method.cls.constantPool.get(\"+g+\"),\"+b[0]+\"=fi\"+c+\".fieldOwnerConstructor[fi\"+c+\".fullFieldName];\"+d}},a[b.GETSTATIC_FAST64]={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d,e,f){var g=e.readUInt16BE(f+1);return\"\\nvar fi\"+c+\"=f.method.cls.constantPool.get(\"+g+\"),\"+b[0]+\"=fi\"+c+\".fieldOwnerConstructor[fi\"+c+\".fullFieldName],\\n\"+b[1]+\"=null;\"+d}},a[b.GETFIELD_FAST32]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d,e,f,g,h){var i=makeOnError(g,f),j=e.readUInt16BE(f+1),k=h.cls.constantPool.get(j),l=k.fullFieldName.replace(escapeStringRegEx,\"\\\\\\\\\");return\"if(!u.isNull(t,f,\"+a[0]+\")){var \"+b[0]+\"=\"+a[0]+\"['\"+l+\"'];\"+d+\"}else{\"+i+\"}\"}},a[b.GETFIELD_FAST64]={hasBranch:!1,pops:1,pushes:2,emit:function(a,b,c,d,e,f,g,h){var i=makeOnError(g,f),j=e.readUInt16BE(f+1),k=h.cls.constantPool.get(j),l=k.fullFieldName.replace(escapeStringRegEx,\"\\\\\\\\\");return\"if(!u.isNull(t,f,\"+a[0]+\")){var \"+b[0]+\"=\"+a[0]+\"['\"+l+\"'],\"+b[1]+\"=null;\"+d+\"}else{\"+i+\"}\"}},a[b.PUTFIELD_FAST32]={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g,h){var i=makeOnError(g,f),j=e.readUInt16BE(f+1),k=h.cls.constantPool.get(j),l=k.fullFieldName.replace(escapeStringRegEx,\"\\\\\\\\\");return\"if(!u.isNull(t,f,\"+a[1]+\")){\"+a[1]+\"['\"+l+\"']=\"+a[0]+\";\"+d+\"}else{\"+i+\"}\"}},a[b.PUTFIELD_FAST64]={hasBranch:!1,pops:3,pushes:0,emit:function(a,b,c,d,e,f,g,h){var i=makeOnError(g,f),j=e.readUInt16BE(f+1),k=h.cls.constantPool.get(j),l=k.fullFieldName.replace(escapeStringRegEx,\"\\\\\\\\\");return\"if(!u.isNull(t,f,\"+a[2]+\")){\"+a[2]+\"['\"+l+\"']=\"+a[1]+\";\"+d+\"}else{\"+i+\"}\"}},a[b.INSTANCEOF_FAST]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d,e,f){var g=e.readUInt16BE(f+1);return\"var cls\"+c+\"=f.method.cls.constantPool.get(\"+g+\").cls,\"+b[0]+\"=\"+a[0]+\"!==null?(\"+a[0]+\".getClass().isCastable(cls\"+c+\")?1:0):0;\"+d}},a[b.CHECKCAST_FAST]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d,e,f,g,h){var i=e.readUInt16BE(f+1),j=h.cls.constantPool.get(i),k=j.cls.getExternalName();return\"var cls\"+c+\"=f.method.cls.constantPool.get(\"+i+\").cls;\\nif((\"+a[0]+\"!=null)&&!\"+a[0]+\".getClass().isCastable(cls\"+c+\")){\\nu.throwException(t,f,'Ljava/lang/ClassCastException;',\"+a[0]+\".getClass().getExternalName()+' cannot be cast to \"+k+\"');\\n}else{var \"+b[0]+\"=\"+a[0]+\";\"+d+\"}\"}},a[b.ARRAYLENGTH]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"if(!u.isNull(t,f,\"+a[0]+\")){var \"+b[0]+\"=\"+a[0]+\".array.length;\"+d+\"}else{\"+h+\"}\"}};var A={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d,e,f){var g=e.readUInt8(f+1);return\"var \"+b[0]+\"=f.locals[\"+g+\"];\"+d}};a[b.ILOAD]=A,a[b.ALOAD]=A,a[b.FLOAD]=A;var B={hasBranch:!1,pops:0,pushes:2,emit:function(a,b,c,d,e,f){var g=e.readUInt8(f+1);return\"var \"+b[0]+\"=f.locals[\"+g+\"],\"+b[1]+\"=null;\"+d}};a[b.LLOAD]=B,a[b.DLOAD]=B;var C={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f){var g=e.readUInt8(f+1);return\"f.locals[\"+g+\"]=\"+a[0]+\";\"+d}};a[b.ISTORE]=C,a[b.ASTORE]=C,a[b.FSTORE]=C,a[b.BIPUSH]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d,e,f){var g=e.readInt8(f+1);return\"var \"+b[0]+\"=\"+g+\";\"+d}},a[b.SIPUSH]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d,e,f){var g=e.readInt16BE(f+1);return\"var \"+b[0]+\"=\"+g+\";\"+d}},a[b.IINC]={hasBranch:!1,pops:0,pushes:0,emit:function(a,b,c,d,e,f){var g=e.readUInt8(f+1),h=e.readInt8(f+2);return\"f.locals[\"+g+\"]=(f.locals[\"+g+\"]+\"+h+\")|0;\"+d}},a[b.ATHROW]={hasBranch:!0,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return h+\"t.throwException(\"+a[0]+\");f.returnToThreadLoop=true;\"}},a[b.GOTO]={hasBranch:!0,pops:0,pushes:0,emit:function(a,b,c,d,e,f){var g=e.readInt16BE(f+1);return\"f.pc=\"+(f+g)+\";\"+d}},a[b.TABLESWITCH]={hasBranch:!0,pops:1,pushes:0,emit:function(a,b,c,d,e,f){var g=f+(4-(f+1)%4)%4+1,h=e.readInt32BE(g),i=e.readInt32BE(g+4),j=e.readInt32BE(g+8);if(8>j-i){for(var k=\"switch(\"+a[0]+\"){\",l=i;j>=l;l++){var m=e.readInt32BE(g+12+4*(l-i));k+=\"case \"+l+\":f.pc=\"+(f+m)+\";break;\"}return k+=\"default:f.pc=\"+(f+h)+\"}\"+d}return\"if(\"+a[0]+\">=\"+i+\"&&\"+a[0]+\"<=\"+j+\"){f.pc=\"+f+\"+f.method.getCodeAttribute().getCode().readInt32BE(\"+(g+12)+\"+((\"+a[0]+\"-\"+i+\")*4))}else{f.pc=\"+(f+h)+\"}\"+d}};var D={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"===\"+a[1]+\"){\"+i+\"}else{\"+d+\"}\"}};a[b.IF_ICMPEQ]=D,a[b.IF_ACMPEQ]=D;var E={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"!==\"+a[1]+\"){\"+i+\"}else{\"+d+\"}\"}};a[b.IF_ICMPNE]=E,a[b.IF_ACMPNE]=E,a[b.IF_ICMPGE]={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[1]+\">=\"+a[0]+\"){\"+i+\"}else{\"+d+\"}\"}},a[b.IF_ICMPGT]={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[1]+\">\"+a[0]+\"){\"+i+\"}else{\"+d+\"}\"}},a[b.IF_ICMPLE]={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[1]+\"<=\"+a[0]+\"){\"+i+\"}else{\"+d+\"}\"}},a[b.IF_ICMPLT]={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[1]+\"<\"+a[0]+\"){\"+i+\"}else{\"+d+\"}\"}},a[b.IFNULL]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"==null){\"+i+\"}else{\"+d+\"}\"}},a[b.IFNONNULL]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"!=null){\"+i+\"}else{\"+d+\"}\"}},a[b.IFEQ]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"===0){\"+i+\"}else{\"+d+\"}\"}},a[b.IFNE]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"!==0){\"+i+\"}else{\"+d+\"}\"}},a[b.IFGT]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\">0){\"+i+\"}else{\"+d+\"}\"}},a[b.IFLT]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"<0){\"+i+\"}else{\"+d+\"}\"}},a[b.IFGE]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\">=0){\"+i+\"}else{\"+d+\"}\"}},a[b.IFLE]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=e.readInt16BE(f+1),i=makeOnError(g,f+h);return\"if(\"+a[0]+\"<=0){\"+i+\"}else{\"+d+\"}\"}},a[b.LCMP]={hasBranch:!1,pops:4,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\".compare(\"+a[1]+\");\"+d}},a[b.FCMPL]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\"===\"+a[1]+\"?0:(\"+a[1]+\">\"+a[0]+\"?1:-1);\"+d}},a[b.DCMPL]={hasBranch:!1,pops:4,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\"===\"+a[1]+\"?0:(\"+a[3]+\">\"+a[1]+\"?1:-1);\"+d}},a[b.FCMPG]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\"===\"+a[1]+\"?0:(\"+a[1]+\"<\"+a[0]+\"?-1:1);\"+d}},a[b.DCMPG]={hasBranch:!1,pops:4,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\"===\"+a[1]+\"?0:(\"+a[3]+\"<\"+a[1]+\"?-1:1);\"+d}},a[b.RETURN]={hasBranch:!0,pops:0,pushes:0,emit:function(a,b,c,d,e,f,g,h){return h.accessFlags.isSynchronized()?\"f.pc=\"+f+\";f.returnToThreadLoop=true;if(!f.method.methodLock(t,f).exit(t)){return}t.asyncReturn();\":\"f.pc=\"+f+\";f.returnToThreadLoop=true;t.asyncReturn();\"}};var F={hasBranch:!0,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g,h){return h.accessFlags.isSynchronized()?\"f.pc=\"+f+\";f.returnToThreadLoop=true;if(!f.method.methodLock(t,f).exit(t)){return}t.asyncReturn(\"+a[0]+\");\":\"f.pc=\"+f+\";f.returnToThreadLoop=true;t.asyncReturn(\"+a[0]+\");\"}};a[b.IRETURN]=F,a[b.FRETURN]=F,a[b.ARETURN]=F;var G={hasBranch:!0,pops:2,pushes:0,emit:function(a,b,c,d,e,f,g,h){return h.accessFlags.isSynchronized()?\"f.pc=\"+f+\";f.returnToThreadLoop=true;if(!f.method.methodLock(t,f).exit(t)){return}t.asyncReturn(\"+a[1]+\",null);\":\"f.pc=\"+f+\";f.returnToThreadLoop=true;t.asyncReturn(\"+a[1]+\",null);\"}};return a[b.LRETURN]=G,a[b.DRETURN]=G,a[b.MONITOREXIT]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"if(\"+a[0]+\".getMonitor().exit(t)){\"+d+\"}else{\"+h+\"f.returnToThreadLoop=true;}\"}},a[b.IXOR]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\"^\"+a[1]+\";\"+d}},a[b.LXOR]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\".xor(\"+a[3]+\"),\"+b[1]+\"=null;\"+d}},a[b.IOR]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\"|\"+a[1]+\";\"+d}},a[b.LOR]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\".or(\"+a[1]+\"),\"+b[1]+\"=null;\"+d}},a[b.IAND]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\"&\"+a[1]+\";\"+d}},a[b.LAND]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\".and(\"+a[1]+\"),\"+b[1]+\"=null;\"+d}},a[b.IADD]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=(\"+a[0]+\"+\"+a[1]+\")|0;\"+d}},a[b.LADD]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\".add(\"+a[3]+\"),\"+b[1]+\"=null;\"+d}},a[b.DADD]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\"+\"+a[3]+\",\"+b[1]+\"=null;\"+d}},a[b.IMUL]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=Math.imul(\"+a[0]+\", \"+a[1]+\");\"+d}},a[b.FMUL]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=u.wrapFloat(\"+a[0]+\"*\"+a[1]+\");\"+d}},a[b.LMUL]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\".multiply(\"+a[1]+\"),\"+b[1]+\"= null;\"+d}},a[b.DMUL]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\"*\"+a[1]+\",\"+b[1]+\"=null;\"+d}},a[b.IDIV]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"\\nif(\"+a[0]+\"===0){\"+h+\"u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\\n}else{var \"+b[0]+\"=(\"+a[1]+\"===u.Constants.INT_MIN&&\"+a[0]+\"===-1)?\"+a[1]+\":((\"+a[1]+\"/\"+a[0]+\")|0);\"+d+\"}\"}},a[b.LDIV]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"\\nif(\"+a[1]+\".isZero()){\"+h+\"u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\\n}else{var \"+b[0]+\"=\"+a[3]+\".div(\"+a[1]+\"),\"+b[1]+\"=null;\"+d+\"}\"}},a[b.DDIV]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\"/\"+a[1]+\",\"+b[1]+\"=null;\"+d}},a[b.ISUB]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=(\"+a[1]+\"-\"+a[0]+\")|0;\"+d}},a[b.LSUB]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\".negate().add(\"+a[3]+\"),\"+b[1]+\"= null;\"+d}},a[b.DSUB]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\"-\"+a[1]+\",\"+b[1]+\"=null;\"+d}},a[b.IREM]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"if(\"+a[0]+\"===0){\"+h+\"u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\\n}else{var \"+b[0]+\"=\"+a[1]+\"%\"+a[0]+\";\"+d+\"}\"}},a[b.LREM]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d,e,f,g){var h=makeOnError(g,f);return\"if(\"+a[1]+\".isZero()){\"+h+\"u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\\n}else{var \"+b[0]+\"=\"+a[3]+\".modulo(\"+a[1]+\"),\"+b[1]+\"=null;\"+d+\"}\"}},a[b.DREM]={hasBranch:!1,pops:4,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[3]+\"%\"+a[1]+\",\"+b[1]+\"=null;\"+d}},a[b.INEG]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=(-\"+a[0]+\")|0;\"+d}},a[b.LNEG]={hasBranch:!1,pops:2,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\".negate(),\"+b[1]+\"=null;\"+d}},a[b.ISHL]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\"<<\"+a[0]+\";\"+d}},a[b.LSHL]={hasBranch:!1,pops:3,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[2]+\".shiftLeft(u.gLong.fromInt(\"+a[0]+\")),\"+b[1]+\"=null;\"+d}},a[b.ISHR]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\">>\"+a[0]+\";\"+d}},a[b.LSHR]={hasBranch:!1,pops:3,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[2]+\".shiftRight(u.gLong.fromInt(\"+a[0]+\")),\"+b[1]+\"=null;\"+d}},a[b.IUSHR]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=(\"+a[1]+\">>>\"+a[0]+\")|0;\"+d}},a[b.LUSHR]={hasBranch:!1,pops:3,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[2]+\".shiftRightUnsigned(u.gLong.fromInt(\"+a[0]+\")),\"+b[1]+\"=null;\"+d}},a[b.I2B]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=(\"+a[0]+\"<<24)>>24;\"+d}},a[b.I2S]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=(\"+a[0]+\"<<16)>>16;\"+d}},a[b.I2C]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\"&0xFFFF;\"+d}},a[b.I2L]={hasBranch:!1,pops:1,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=u.gLong.fromInt(\"+a[0]+\"),\"+b[1]+\"=null;\"+d}},a[b.I2F]={hasBranch:!1,pops:0,pushes:0,emit:function(a,b,c,d){return\"\"+d}},a[b.I2D]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=null;\"+d}},a[b.F2I]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=u.float2int(\"+a[0]+\");\"+d}},a[b.F2D]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=null;\"+d}},a[b.L2I]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\".toInt();\"+d}},a[b.L2D]={hasBranch:!1,pops:2,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\".toNumber(),\"+b[1]+\"=null;\"+d}},a[b.D2I]={hasBranch:!1,pops:2,pushes:1,emit:function(a,b,c,d){return\"var \"+b[0]+\"=u.float2int(\"+a[1]+\");\"+d}},a[b.DUP]={hasBranch:!1,pops:1,pushes:2,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\",\"+b[1]+\"=\"+a[0]+\";\"+d}},a[b.DUP2]={hasBranch:!1,pops:2,pushes:4,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\",\"+b[1]+\"=\"+a[0]+\",\"+b[2]+\"=\"+a[1]+\",\"+b[3]+\"=\"+a[0]+\";\"+d}},a[b.DUP_X1]={hasBranch:!1,pops:2,pushes:3,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\",\"+b[1]+\"=\"+a[1]+\",\"+b[2]+\"=\"+a[0]+\";\"+d}},a[b.DUP_X2]={hasBranch:!1,pops:3,pushes:4,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[0]+\",\"+b[1]+\"=\"+a[2]+\",\"+b[2]+\"=\"+a[1]+\",\"+b[3]+\"=\"+a[0]+\";\"+d}},a[b.DUP2_X1]={hasBranch:!1,pops:3,pushes:5,emit:function(a,b,c,d){return\"var \"+b[0]+\"=\"+a[1]+\",\"+b[1]+\"=\"+a[0]+\",\"+b[2]+\"=\"+a[2]+\",\"+b[3]+\"=\"+a[1]+\",\"+b[4]+\"=\"+a[0]+\";\"+d}},a[b.NEW_FAST]={hasBranch:!1,pops:0,pushes:1,emit:function(a,b,c,d,e,f){var g=e.readUInt16BE(f+1);return\"var cr\"+c+\"=f.method.cls.constantPool.get(\"+g+\"),\"+b[0]+\"=(new cr\"+c+\".clsConstructor(t));\"+d}},a[b.NEWARRAY]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d,e,f,g){var h=e.readUInt8(f+1),i=\"[\"+opcodes.ArrayTypes[h],j=makeOnError(g,f);return\"\\nvar cls\"+c+\"=f.getLoader().getInitializedClass(t,'\"+i+\"');\\nif(\"+a[0]+\">=0){var \"+b[0]+\"=new (cls\"+c+\".getConstructor(t))(t,\"+a[0]+\");\"+d+\"\\n}else{\"+j+\"u.throwException(t,f,'Ljava/lang/NegativeArraySizeException;','Tried to init \"+i+\" array with length '+\"+a[0]+\");}\"}},a[b.ANEWARRAY_FAST]={hasBranch:!1,pops:1,pushes:1,emit:function(a,b,c,d,e,f,g){var h=e.readUInt16BE(f+1),i=(\"[\"+opcodes.ArrayTypes[h],makeOnError(g,f));return\"\\nvar cr\"+c+\"=f.method.cls.constantPool.get(\"+h+\");\\nif(\"+a[0]+\">=0){var \"+b[0]+\"=new cr\"+c+\".arrayClassConstructor(t,\"+a[0]+\");\"+d+\"\\n}else{\"+i+\"u.throwException(t,f,'Ljava/lang/NegativeArraySizeException;','Tried to init '+cr\"+c+\".arrayClass.getInternalName()+' array with length '+\"+a[0]+\");}\"}},a[b.NOP]={hasBranch:!1,pops:0,pushes:0,emit:function(a,b,c,d){return\"\"+d}},a[b.POP]={hasBranch:!1,pops:1,pushes:0,emit:function(a,b,c,d){return\"\"+d}},a[b.POP2]={hasBranch:!1,pops:2,pushes:0,emit:function(a,b,c,d){return\"\"+d}},a}();\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var __extends=this&&this.__extends||function(a,b){function c(){this.constructor=a}for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d]);a.prototype=null===b?Object.create(b):(c.prototype=b.prototype,new c)},ClassData_1=__webpack_require__(21),ClassLock=__webpack_require__(24),classpath_1=__webpack_require__(26),enums_1=__webpack_require__(9),util=__webpack_require__(6),logging=__webpack_require__(17),assert=__webpack_require__(13),debug=logging.debug,ClassLocks=function(){function a(){this.locks={}}return a.prototype.tryLock=function(a,b,c){return\"undefined\"==typeof this.locks[a]&&(this.locks[a]=new ClassLock),this.locks[a].tryLock(b,c)},a.prototype.unlock=function(a,b){this.locks[a].unlock(b),delete this.locks[a]},a.prototype.getOwner=function(a){return this.locks[a]?this.locks[a].getOwner():null},a}(),ClassLoader=function(){function a(a){this.bootstrap=a,this.loadedClasses={},this.loadClassLocks=new ClassLocks}return a.prototype.getLoadedClassNames=function(){return Object.keys(this.loadedClasses)},a.prototype.addClass=function(a,b){this.loadedClasses[a]=b},a.prototype.getClass=function(a){return this.loadedClasses[a]},a.prototype.defineClass=function(a,b,c,d){try{var e=new ClassData_1.ReferenceClassData(c,d,this);return this.addClass(b,e),e}catch(f){return null===a?(logging.error(\"JVM initialization failed: \"+f),logging.error(f.stack)):a.throwNewException(\"Ljava/lang/ClassFormatError;\",f),null}},a.prototype.defineArrayClass=function(a){var b=new ClassData_1.ArrayClassData(util.get_component_type(a),this);return this.addClass(a,b),b},a.prototype.getLoadedClass=function(a){var b=this.loadedClasses[a];if(null!=b)return b;if(util.is_primitive_type(a))return this.bootstrap.getPrimitiveClass(a);if(util.is_array_type(a)){var c=this.getLoadedClass(util.get_component_type(a));if(null!=c){var d=c.getLoader();return d===this?this.defineArrayClass(a):(b=d.getLoadedClass(a),this.addClass(a,b),b)}}return null},a.prototype.getResolvedClass=function(a){var b=this.getLoadedClass(a);return null!==b&&(b.isResolved()||b.tryToResolve())?b:null},a.prototype.getInitializedClass=function(a,b){var c=this.getLoadedClass(b);return null!==c?c.isInitialized(a)||c.tryToInitialize()?c:null:c},a.prototype.loadClass=function(a,b,c,d){var e=this;void 0===d&&(d=!0);var f=this.getLoadedClass(b);f?setImmediate(function(){c(f)}):this.loadClassLocks.tryLock(b,a,c)&&(util.is_reference_type(b)?this._loadClass(a,b,function(a){e.loadClassLocks.unlock(b,a)},d):this.loadClass(a,util.get_component_type(b),function(a){null!=a&&e.loadClassLocks.unlock(b,e.getLoadedClass(b))},d))},a.prototype.resolveClasses=function(a,b,c){var d=this,e={};util.asyncForEach(b,function(b,c){d.resolveClass(a,b,function(a){null===a?c(\"Error resolving class: \"+b):(e[b]=a,c())})},function(a){c(a?null:e)})},a.prototype.resolveClass=function(a,b,c,d){void 0===d&&(d=!0),this.loadClass(a,b,function(b){null===b||b.isResolved()?setImmediate(function(){c(b)}):b.resolve(a,c,d)},d)},a.prototype.initializeClass=function(a,b,c,d){void 0===d&&(d=!0),this.resolveClass(a,b,function(b){null===b||b.isInitialized(a)?setImmediate(function(){c(b)}):b.initialize(a,c,d)},d)},a.prototype.throwClassNotFoundException=function(a,b,c){a.throwNewException(c?\"Ljava/lang/ClassNotFoundException;\":\"Ljava/lang/NoClassDefFoundError;\",\"Cannot load class: \"+util.ext_classname(b))},a}();exports.ClassLoader=ClassLoader;var BootstrapClassLoader=function(a){function b(b,c,d){var e=this;a.call(this,null),this.bootstrap=this,this.classpath=null,this.loadedPackages={},classpath_1.ClasspathFactory(b,c,function(a){e.classpath=a.reverse(),d()})}return __extends(b,a),b.prototype._registerLoadedClass=function(a,b){var c=a.slice(0,a.lastIndexOf(\"/\")),d=this.loadedPackages[c];d?d[0]!==b&&-1===d.indexOf(b)&&d.push(b):this.loadedPackages[c]=[b]},b.prototype.getPackages=function(){var a=this;return Object.keys(this.loadedPackages).map(function(b){return[b,a.loadedPackages[b].map(function(a){return a.getPath()})]})},b.prototype.getPrimitiveClass=function(a){var b=this.getClass(a);return null==b&&(b=new ClassData_1.PrimitiveClassData(a,this),this.addClass(a,b)),b},b.prototype._loadClass=function(a,b,c,d){var e=this;void 0===d&&(d=!0);var f,g=util.descriptor2typestr(b),h=this.classpath.length,i=[];a:for(var j=0;h>j;j++){var k=this.classpath[j];switch(k.hasClass(g)){case enums_1.TriState.INDETERMINATE:i.push(k);break;case enums_1.TriState.TRUE:i.push(k);break a}}util.asyncFind(i,function(a,b){a.loadClass(g,function(a,c){a?b(!1):(f=c,b(!0))})},function(h){if(h){var i=e.defineClass(a,b,f,null);null!==i&&e._registerLoadedClass(g,h),c(i)}else e.throwClassNotFoundException(a,b,d),c(null)})},b.prototype.getLoadedClassFiles=function(){var a=this.getLoadedClassNames();return a.filter(function(a){return util.is_reference_type(a)})},b.prototype.getLoaderObject=function(){return null},b.prototype.getClassPath=function(){for(var a=this.classpath.length,b=new Array(a),c=0;a>c;c++)b[c]=this.classpath[a-c-1].getPath();return b},b.prototype.getClassPathItems=function(){return this.classpath.slice(0)},b}(ClassLoader);exports.BootstrapClassLoader=BootstrapClassLoader;var CustomClassLoader=function(a){function b(b,c){a.call(this,b),this.loaderObj=c}return __extends(b,a),b.prototype._loadClass=function(a,b,c,d){var e=this;void 0===d&&(d=!0),this.loaderObj[\"loadClass(Ljava/lang/String;)Ljava/lang/Class;\"](a,[util.initString(this.bootstrap,util.ext_classname(b))],function(f,g){if(f)e.throwClassNotFoundException(a,b,d),c(null);else{var h=g.$cls;e.addClass(b,h),c(h)}})},b.prototype.getLoaderObject=function(){return this.loaderObj},b}(ClassLoader);exports.CustomClassLoader=CustomClassLoader;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function getRef(){return ref++}function extendClass(a,b){function c(){this.constructor=a}c.prototype=b.prototype,a.prototype=new c}var __extends=this&&this.__extends||function(a,b){function c(){this.constructor=a}for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d]);a.prototype=null===b?Object.create(b):(c.prototype=b.prototype,new c)},util=__webpack_require__(6),ByteStream=__webpack_require__(22),ConstantPool=__webpack_require__(23),attributes=__webpack_require__(12),threading_1=__webpack_require__(15),logging=__webpack_require__(17),methods=__webpack_require__(11),enums=__webpack_require__(9),ClassLock=__webpack_require__(24),assert=__webpack_require__(13),gLong=__webpack_require__(8),StringOutputStream=__webpack_require__(18),ClassState=enums.ClassState,trace=logging.trace,debug=logging.debug,global=__webpack_require__(14),ref=1,injectedFields={\"Ljava/lang/invoke/MemberName;\":{vmtarget:[\"(thread: JVMThread, descriptor: string, args: any[], cb?: (e?: JVMTypes.java_lang_Throwable, rv?: any) => void) => void\",\"null\"],vmindex:[\"number\",\"-1\"]},\"Ljava/lang/Object;\":{ref:[\"number\",\"getRef()\"],$monitor:[\"Monitor\",\"null\"]},\"Ljava/net/PlainSocketImpl;\":{$is_shutdown:[\"boolean\",\"false\"],$ws:[\"Interfaces.IWebsock\",\"null\"]},\"Ljava/io/FileDescriptor;\":{$pos:[\"number\",\"-1\"]},\"Ljava/lang/Class;\":{$cls:[\"ClassData\",\"null\"]},\"Ljava/lang/ClassLoader;\":{$loader:[\"ClassLoader\",\"new ClassLoader.CustomClassLoader(thread.getBsCl(), this);\"]},\"Ljava/lang/Thread;\":{$thread:[\"JVMThread\",\"thread ? new thread.constructor(thread.getJVM(), thread.getThreadPool(), this) : null\"]}},injectedMethods={\"Ljava/lang/Object;\":{getClass:[\"(): ClassData\",\"function() { return this.constructor.cls }\"],getMonitor:[\"(): Monitor\",\"function() {\\n  if (this.$monitor === null) {\\n    this.$monitor = new Monitor();\\n  }\\n  return this.$monitor;\\n}\"]},\"Ljava/lang/String;\":{toString:[\"(): string\",\"function() { return util.chars2jsStr(this['java/lang/String/value']); }\"]},\"Ljava/lang/Byte;\":{unbox:[\"(): number\",\"function() { return this['java/lang/Byte/value']; }\"]},\"Ljava/lang/Character;\":{unbox:[\"(): number\",\"function() { return this['java/lang/Character/value']; }\"]},\"Ljava/lang/Double;\":{unbox:[\"(): number\",\"function() { return this['java/lang/Double/value']; }\"]},\"Ljava/lang/Float;\":{unbox:[\"(): number\",\"function() { return this['java/lang/Float/value']; }\"]},\"Ljava/lang/Integer;\":{unbox:[\"(): number\",\"function() { return this['java/lang/Integer/value']; }\"]},\"Ljava/lang/Long;\":{unbox:[\"(): Long\",\"function() { return this['java/lang/Long/value']; }\"]},\"Ljava/lang/Short;\":{unbox:[\"(): number\",\"function() { return this['java/lang/Short/value']; }\"]},\"Ljava/lang/Boolean;\":{unbox:[\"(): number\",\"function() { return this['java/lang/Boolean/value']; }\"]},\"Ljava/lang/Void;\":{unbox:[\"(): number\",'function() { throw new Error(\"Cannot unbox a Void type.\"); }']},\"Ljava/lang/invoke/MethodType;\":{toString:[\"(): string\",'function() { return \"(\" + this[\\'java/lang/invoke/MethodType/ptypes\\'].array.map(function (type) { return type.$cls.getInternalName(); }).join(\"\") + \")\" + this[\\'java/lang/invoke/MethodType/rtype\\'].$cls.getInternalName(); }']}},injectedStaticMethods={\"Ljava/lang/Byte;\":{box:[\"(val: number): java_lang_Byte\",\"function(val) { var rv = new this(null); rv['java/lang/Byte/value'] = val; return rv; }\"]},\"Ljava/lang/Character;\":{box:[\"(val: number): java_lang_Character\",\"function(val) { var rv = new this(null); rv['java/lang/Character/value'] = val; return rv; }\"]},\"Ljava/lang/Double;\":{box:[\"(val: number): java_lang_Double\",\"function(val) { var rv = new this(null); rv['java/lang/Double/value'] = val; return rv; }\"]},\"Ljava/lang/Float;\":{box:[\"(val: number): java_lang_Float\",\"function(val) { var rv = new this(null); rv['java/lang/Float/value'] = val; return rv; }\"]},\"Ljava/lang/Integer;\":{box:[\"(val: number): java_lang_Integer\",\"function(val) { var rv = new this(null); rv['java/lang/Integer/value'] = val; return rv; }\"]},\"Ljava/lang/Long;\":{box:[\"(val: Long): java_lang_Long\",\"function(val) { var rv = new this(null); rv['java/lang/Long/value'] = val; return rv; }\"]},\"Ljava/lang/Short;\":{box:[\"(val: number): java_lang_Short\",\"function(val) { var rv = new this(null); rv['java/lang/Short/value'] = val; return rv; }\"]},\"Ljava/lang/Boolean;\":{box:[\"(val: number): java_lang_Boolean\",\"function(val) { var rv = new this(null); rv['java/lang/Boolean/value'] = val; return rv; }\"]},\"Ljava/lang/Void;\":{box:[\"(): java_lang_Void\",\"function() { return new this(null); }\"]}},ClassData=function(){function a(a){this.accessFlags=null,this.state=enums.ClassState.LOADED,this.jco=null,this.superClass=null,this.loader=a}return a.prototype.getExternalName=function(){return util.ext_classname(this.className)},a.prototype.getInternalName=function(){return this.className},a.prototype.getPackageName=function(){var a,b=this.getExternalName();for(a=b.length-1;a>=0&&\".\"!==b[a];a--);return a>=0?b.slice(0,a):\"\"},a.prototype.getLoader=function(){return this.loader},a.prototype.getSuperClass=function(){return this.superClass},a.prototype.getInterfaces=function(){return[]},a.prototype.getInjectedFields=function(){var a={};if(void 0!==injectedFields[this.getInternalName()]){var b=injectedFields[this.getInternalName()];Object.keys(b).forEach(function(c){a[c]=b[c][0]})}return a},a.prototype.getInjectedMethods=function(){var a={},b=this.getInternalName();if(\"[\"===b[0]&&(b=\"[\"),void 0!==injectedMethods[b]){var c=injectedMethods[b];Object.keys(c).forEach(function(b){a[b]=c[b][0]})}return a},a.prototype.getInjectedStaticMethods=function(){var a={},b=this.getInternalName();if(\"[\"===b[0]&&(b=\"[\"),void 0!==injectedStaticMethods[b]){var c=injectedStaticMethods[b];Object.keys(c).forEach(function(b){a[b]=c[b][0]})}return a},a.prototype.getClassObject=function(a){return null===this.jco&&(this.jco=new(a.getBsCl().getResolvedClass(\"Ljava/lang/Class;\").getConstructor(a))(a),this.jco.$cls=this,this.jco[\"java/lang/Class/classLoader\"]=this.getLoader().getLoaderObject()),this.jco},a.prototype.getProtectionDomain=function(){return null},a.prototype.getMethod=function(a){return null},a.prototype.getMethods=function(){return[]},a.prototype.getFields=function(){return[]},a.prototype.setState=function(a){this.state=a},a.prototype.getState=function(){if(this.state===ClassState.RESOLVED&&null===this.getMethod(\"<clinit>()V\")){var a=this.getSuperClass();null!==a&&a.getState()===ClassState.INITIALIZED&&(this.state=ClassState.INITIALIZED)}return this.state},a.prototype.isInitialized=function(a){return this.getState()===ClassState.INITIALIZED},a.prototype.isResolved=function(){return this.getState()!==ClassState.LOADED},a.prototype.isSubinterface=function(a){return!1},a.prototype.isSubclass=function(a){return this===a?!0:null===this.getSuperClass()?!1:this.getSuperClass().isSubclass(a)},a.prototype.resolve=function(a,b,c){throw void 0===c&&(c=!0),new Error(\"Unimplemented.\")},a.prototype.initialize=function(a,b,c){throw void 0===c&&(c=!0),new Error(\"Unimplemented.\")},a.prototype.outputInjectedMethods=function(a,b){var c=this.getInternalName();if(\"[\"===c[0]&&(c=\"[\"),void 0!==injectedMethods[c]){var d=injectedMethods[c];Object.keys(d).forEach(function(c){b.write(\"  \"+a+\".prototype.\"+c+\" = \"+d[c][1]+\";\\n\")})}if(void 0!==injectedStaticMethods[c]){var e=injectedStaticMethods[c];Object.keys(e).forEach(function(c){b.write(\"  \"+a+\".\"+c+\" = \"+e[c][1]+\";\\n\")})}},a}();exports.ClassData=ClassData;var PrimitiveClassData=function(a){function b(b,c){a.call(this,c),this.className=b,this.accessFlags=new util.Flags(1041),this.setState(ClassState.INITIALIZED)}return __extends(b,a),b.prototype.isCastable=function(a){return this.className===a.getInternalName()},b.prototype.boxClassName=function(){return util.boxClassName(this.className)},b.prototype.createWrapperObject=function(a,b){var c=this.boxClassName(),d=a.getBsCl().getInitializedClass(a,c),e=d.getConstructor(a),f=new e(a);return\"V\"!==c&&(f[util.descriptor2typestr(c)+\"/value\"]=b),f},b.prototype.tryToResolve=function(){return!0},b.prototype.tryToInitialize=function(){return!0},b.prototype.resolve=function(a,b,c){var d=this;void 0===c&&(c=!0),setImmediate(function(){return b(d)})},b}(ClassData);exports.PrimitiveClassData=PrimitiveClassData;var ArrayClassData=function(a){function b(b,c){a.call(this,c),this._constructor=null,this.className=\"[\"+b,this.accessFlags=new util.Flags(1041),this.componentClassName=b}return __extends(b,a),b.prototype.methodLookup=function(a){return this.superClass.methodLookup(a)},b.prototype.fieldLookup=function(a){return this.superClass.fieldLookup(a)},b.prototype.resolve=function(a,b,c){var d=this;return void 0===c&&(c=!0),this.isResolved()?void setImmediate(function(){return b(d)}):void util.asyncForEach([\"Ljava/lang/Object;\",this.componentClassName],function(b,c){d.loader.resolveClass(a,b,function(a){null!==a?c():c(\"Failed.\")})},function(a){a?b(null):(d.setResolved(d.loader.getResolvedClass(\"Ljava/lang/Object;\"),d.loader.getResolvedClass(d.componentClassName)),b(d))})},b.prototype.getComponentClass=function(){return this.componentClass},b.prototype.setResolved=function(a,b){this.superClass=a,this.componentClass=b,this.setState(ClassState.INITIALIZED)},b.prototype.tryToResolve=function(){var a=this.loader,b=a.getResolvedClass(\"Ljava/lang/Object;\"),c=a.getResolvedClass(this.componentClassName);return null===b||null===c?!1:(this.setResolved(b,c),!0)},b.prototype.tryToInitialize=function(){return this.tryToResolve()},b.prototype.isCastable=function(a){if(!(a instanceof b)){if(a instanceof PrimitiveClassData)return!1;if(a.accessFlags.isInterface()){var c=a.getInternalName();return\"Ljava/lang/Cloneable;\"===c||\"Ljava/io/Serializable;\"===c}return\"Ljava/lang/Object;\"===a.getInternalName()}return this.getComponentClass().isCastable(a.getComponentClass())},b.prototype.initialize=function(a,b,c){void 0===c&&(c=!0),this.resolve(a,b,c)},b.prototype.getJSArrayConstructor=function(){if(!util.typedArraysSupported)return\"Array\";switch(this.componentClassName){case\"B\":return\"Int8Array\";case\"C\":return\"Uint16Array\";case\"S\":return\"Int16Array\";case\"I\":return\"Int32Array\";case\"F\":return\"Float32Array\";case\"D\":return\"Float64Array\";default:return\"Array\"}},b.prototype.getJSDefaultArrayElement=function(){switch(this.componentClassName[0]){case\"[\":return\"new (cls.getComponentClass().getConstructor())(thread, otherLengths)\";case\"L\":return\"null\";case\"J\":return\"gLongZero\";default:return\"0\"}},b.prototype._getSliceMethod=function(){var a=new StringOutputStream,b=this.getJSArrayConstructor();if(a.write(\"function(start, end) {\\n    var newObj = new this.constructor(null, 0);\\n\"),\"Array\"===b)a.write(\"    newObj.array = this.array.slice(start, end);\\n\");else{var c;switch(b){case\"Int8Array\":c=1;break;case\"Int16Array\":case\"Uint16Array\":c=2;break;case\"Int32Array\":case\"Float32Array\":c=4;break;case\"Float64Array\":c=8}a.write(\"    if (end === undefined) end = this.array.length;\\n      \"+(c>1?\"start *= \"+c+\";\\nend *= \"+c+\";\":\"\")+\"\\n      newObj.array = new \"+b+\"(this.array.buffer.slice(start, end));\\n\")}return a.write(\"    return newObj;\\n  }\"),a.flush()},b.prototype._constructConstructor=function(a){var b=new StringOutputStream,c=util.jvmName2JSName(this.getInternalName());b.write(\"extendClass(\"+c+\", superCls.getConstructor(thread));\\n  function \"+c+\"(thread, lengths) {\\n\"),this.superClass.outputInjectedFields(b),\"[\"!==this.componentClassName[0]?(b.write(\"    this.array = new \"+this.getJSArrayConstructor()+\"(lengths);\\n\"),\"Array\"===this.getJSArrayConstructor()&&b.write(\"    for (var i = 0; i < lengths; i++) {\\n      this.array[i] = \"+this.getJSDefaultArrayElement()+\";\\n    }\\n\")):b.write(\"    if (typeof lengths === 'number') {\\n        this.array = new \"+this.getJSArrayConstructor()+\"(lengths);\\n        for (var i = 0; i < length; i++) {\\n          this.array[i] = null;\\n        }\\n      } else {\\n        var length = lengths[0], otherLengths = lengths.length > 2 ? lengths.slice(1) : lengths[1];\\n        this.array = new \"+this.getJSArrayConstructor()+\"(length);\\n        for (var i = 0; i < length; i++) {\\n          this.array[i] = \"+this.getJSDefaultArrayElement()+\";\\n        }\\n      }\\n\"),b.write(\"  }\\n\\n  \"+c+\".prototype.slice = \"+this._getSliceMethod()+\";\\n  \"+c+\".cls = cls;\\n\"),this.outputInjectedMethods(c,b),b.write(\"\\n  return \"+c+\";\");var d=new Function(\"extendClass\",\"cls\",\"superCls\",\"gLongZero\",\"thread\",\"getRef\",\"util\",b.flush());return d(extendClass,this,this.superClass,gLong.ZERO,a,getRef,util)},b.prototype.getConstructor=function(a){return null===this._constructor&&(this._constructor=this._constructConstructor(a)),this._constructor},b}(ClassData);exports.ArrayClassData=ArrayClassData;var ReferenceClassData=function(a){function b(b,c,d,e){a.call(this,d),this.interfaceClasses=null,this.superClassRef=null,this.initLock=new ClassLock,this._constructor=null,this._fieldLookup={},this._objectFields=[],this._staticFields=[],this._methodLookup={},this._vmTable=[],this._uninheritedDefaultMethods=[],this._protectionDomain=c?c:null;var f=new ByteStream(b),g=0;if(3405691582!==f.getUint32())throw new Error(\"Magic number invalid\");if(this.minorVersion=f.getUint16(),this.majorVersion=f.getUint16(),!(45<=this.majorVersion&&this.majorVersion<=52))throw new Error(\"Major version invalid\");this.constantPool=new ConstantPool.ConstantPool,this.constantPool.parse(f,e),this.accessFlags=new util.Flags(f.getUint16()),this.className=this.constantPool.get(f.getUint16()).name;var h=f.getUint16();0!==h&&(this.superClassRef=this.constantPool.get(h));var i=f.getUint16();for(this.interfaceRefs=new Array(i),g=0;i>g;++g)this.interfaceRefs[g]=this.constantPool.get(f.getUint16());var j=f.getUint16();for(this.fields=new Array(j),g=0;j>g;++g)this.fields[g]=new methods.Field(this,this.constantPool,g,f);var k=f.getUint16();for(this.methods=new Array(k),g=0;k>g;g++){var l=new methods.Method(this,this.constantPool,g,f);this.methods[g]=l}if(this.attrs=attributes.makeAttributes(f,this.constantPool),f.hasBytes())throw\"Leftover bytes in classfile: \"+f}return __extends(b,a),b.prototype.getSuperClassReference=function(){return this.superClassRef},b.prototype.getInterfaceClassReferences=function(){return this.interfaceRefs.slice(0)},b.prototype.getInterfaces=function(){return this.interfaceClasses},b.prototype.getFields=function(){return this.fields},b.prototype.getVMTable=function(){return this._vmTable},b.prototype.getVMIndexForMethod=function(a){return this._vmTable.indexOf(this.methodLookup(a.signature))},b.prototype.getMethodFromVMIndex=function(a){return void 0!==this._vmTable[a]?this._vmTable[a]:null},b.prototype.getVMIndexForField=function(a){return a.accessFlags.isStatic()?this._staticFields.indexOf(a):this._objectFields.indexOf(a)},b.prototype.getStaticFieldFromVMIndex=function(a){var b=this._staticFields[a];return void 0!==b?b:null},b.prototype.getObjectFieldFromVMIndex=function(a){var b=this._objectFields[a];return void 0!==b?b:null},b.prototype.getFieldFromSlot=function(a){return this.fields[a]},b.prototype.getMethodFromSlot=function(a){return this.methods[a]},b.prototype.getMethod=function(a){var b=this._methodLookup[a];return b.cls===this?b:null},b.prototype.getSpecificMethod=function(a,b){if(this.getInternalName()===a)return this.getMethod(b);var c,d=this.interfaceClasses.slice(0);this.superClass&&d.push(this.superClass);for(var e=0;e<d.length;e++)if(null!==(c=d[e].getSpecificMethod(a,b)))return c;return null},b.prototype.getMethods=function(){return this.methods},b.prototype.getUninheritedDefaultMethods=function(){return this._uninheritedDefaultMethods},b.prototype.getProtectionDomain=function(){return this._protectionDomain},b.prototype._resolveMethods=function(){var a=this;null!==this.superClass&&(this._vmTable=this._vmTable.concat(this.superClass._vmTable),Object.keys(this.superClass._methodLookup).forEach(function(b){a._methodLookup[b]=a.superClass._methodLookup[b]})),this.methods.forEach(function(b){var c=a._methodLookup[b.signature];b.accessFlags.isStatic()||\"<init>\"===b.name||(void 0===c?a._vmTable.push(b):a._vmTable[a._vmTable.indexOf(c)]=b),a._methodLookup[b.signature]=b}),this.interfaceClasses.forEach(function(b){Object.keys(b._methodLookup).forEach(function(c){var d=b._methodLookup[c];void 0===a._methodLookup[c]?(d.accessFlags.isStatic()||a._vmTable.push(d),a._methodLookup[c]=d):d.isDefault()&&a._uninheritedDefaultMethods.push(d)})})},b.prototype._resolveFields=function(){var a=this;null!==this.superClass&&(this._objectFields=this._objectFields.concat(this.superClass._objectFields),Object.keys(this.superClass._fieldLookup).forEach(function(b){a._fieldLookup[b]=a.superClass._fieldLookup[b]})),this.interfaceClasses.forEach(function(b){Object.keys(b._fieldLookup).forEach(function(c){var d=b._fieldLookup[c];a._fieldLookup[c]=d})}),this.fields.forEach(function(b){a._fieldLookup[b.name]=b,b.accessFlags.isStatic()?a._staticFields.push(b):a._objectFields.push(b)})},b.prototype.methodLookup=function(a){var b=this._methodLookup[a];return void 0!==b?b:null},b.prototype.signaturePolymorphicAwareMethodLookup=function(a){var b;if(null!==(b=this.methodLookup(a)))return b;if(\"Ljava/lang/invoke/MethodHandle;\"===this.className){var c=a.slice(0,a.indexOf(\"(\"))+\"([Ljava/lang/Object;)Ljava/lang/Object;\",b=this._methodLookup[c];if(void 0!==b&&b.accessFlags.isNative()&&b.accessFlags.isVarArgs()&&b.cls===this)return b}else if(null!==this.superClass)return this.superClass.signaturePolymorphicAwareMethodLookup(a);return null},b.prototype.fieldLookup=function(a){var b=this._fieldLookup[a];return void 0!==b?b:null},b.prototype.getAttribute=function(a){for(var b=this.attrs,c=0;c<b.length;c++){var d=b[c];if(d.getName()===a)return d}return null},b.prototype.getAttributes=function(a){for(var b=this.attrs,c=[],d=0;d<b.length;d++){var e=b[d];e.getName()===a&&c.push(e)}return c},b.prototype.getBootstrapMethod=function(a){var b=this.getAttribute(\"BootstrapMethods\");return b.bootstrapMethods[a]},b.prototype._getInitialStaticFieldValue=function(a,b){var c=this.fieldLookup(b);if(null!==c&&c.accessFlags.isStatic()){var d=c.getAttribute(\"ConstantValue\");if(null===d)return util.initialValue(c.rawDescriptor);switch(d.value.getType()){case enums.ConstantPoolItemType.STRING:var e=d.value;return null===e.value&&(e.value=a.getJVM().internString(e.stringValue)),e.value;default:return d.value.value}}},b.prototype.setResolved=function(a,b){this.superClass=a,this.interfaceClasses=b,this._resolveMethods(),this._resolveFields(),this.setState(ClassState.RESOLVED)},b.prototype.tryToResolve=function(){if(this.getState()===ClassState.LOADED){var a,b,c=this.loader,d=null!==this.superClassRef?this.interfaceRefs.concat(this.superClassRef):this.interfaceRefs,e=[];for(a=0;a<d.length;a++){if(b=d[a],!b.tryResolve(c))return!1;e.push(b.cls)}this.setResolved(null!==this.superClassRef?e.pop():null,e)}return!0},b.prototype.tryToInitialize=function(){if(this.getState()===ClassState.INITIALIZED)return!0;if(this.getState()===ClassState.RESOLVED||this.tryToResolve()){if(null!==this.superClass&&!this.superClass.tryToInitialize())return!1;var a=this.getMethod(\"<clinit>()V\");return null!==a?!1:(this.setState(ClassState.INITIALIZED),!0)}return!1},b.prototype.isCastable=function(a){return a instanceof b?this.accessFlags.isInterface()?a.accessFlags.isInterface()?this.isSubinterface(a):a.accessFlags.isInterface()?void 0:\"Ljava/lang/Object;\"===a.getInternalName():a.accessFlags.isInterface()?this.isSubinterface(a):this.isSubclass(a):!1},b.prototype.isSubinterface=function(a){if(this.className===a.getInternalName())return!0;for(var b=this.getInterfaces(),c=0;c<b.length;c++){var d=b[c];if(d.isSubinterface(a))return!0}return null==this.getSuperClass()?!1:this.getSuperClass().isSubinterface(a)},b.prototype.initialize=function(a,b,c){var d=this;void 0===c&&(c=!0),this.isResolved()?this.isInitialized(a)?setImmediate(function(){b(d)}):this.initLock.tryLock(a,b)&&(null!=this.superClass?this.superClass.initialize(a,function(b){null==b?d.initLock.unlock(null):d._initialize(a,function(a){d.initLock.unlock(a)})},c):this._initialize(a,function(a){d.initLock.unlock(a)})):this.resolve(a,function(e){null!==e?d.initialize(a,b,c):b(e)},c)},b.prototype._initialize=function(a,b){var c=this,d=this.getConstructor(a);void 0!==d[\"<clinit>()V\"]?d[\"<clinit>()V\"](a,null,function(d){d?(c.setState(enums.ClassState.RESOLVED),d.getClass().isCastable(a.getBsCl().getResolvedClass(\"Ljava/lang/Error;\"))?(a.throwException(d),b(null)):a.getBsCl().initializeClass(a,\"Ljava/lang/ExceptionInInitializerError;\",function(c){if(null==c)b(null);else{var e=c.getConstructor(a),f=new e(a);f[\"<init>(Ljava/lang/Throwable;)V\"](a,[d],function(c){a.throwException(f),b(null)})}})):(c.setState(enums.ClassState.INITIALIZED),b(c))}):(this.setState(enums.ClassState.INITIALIZED),b(this))},b.prototype.isInitialized=function(a){return this.getState()===ClassState.INITIALIZED||this.initLock.getOwner()===a},b.prototype.resolve=function(a,b,c){var d=this;void 0===c&&(c=!0);var e=this.interfaceRefs.slice(0);null!==this.superClassRef&&e.push(this.superClassRef),e=e.filter(function(a){return!a.isResolved()}),util.asyncForEach(e,function(b,e){b.resolve(a,d.loader,d,function(a){a?e():e(\"Failed.\")},c)},function(a){a?b(null):(d.setResolved(null!==d.superClassRef?d.superClassRef.cls:null,d.interfaceRefs.map(function(a){return a.cls})),b(d))})},b.prototype.getMirandaAndDefaultMethods=function(){var a=this,b=null!==this.superClass?this.superClass.getVMTable():[];return this.getVMTable().slice(b.length).filter(function(b){return b.cls!==a})},b.prototype.outputInjectedFields=function(a){null!==this.superClass&&this.superClass.outputInjectedFields(a);var b=injectedFields[this.getInternalName()];void 0!==b&&Object.keys(b).forEach(function(c){a.write(\"this.\"+c+\" = \"+b[c][1]+\";\\n\")})},b.prototype._constructConstructor=function(a){var b=util.jvmName2JSName(this.getInternalName()),c=new StringOutputStream;c.write(\"if (cls.superClass !== null) {\\n    extendClass(\"+b+\", cls.superClass.getConstructor(thread));\\n  }\\n  function \"+b+\"(thread) {\\n\"),this.outputInjectedFields(c),this._objectFields.forEach(function(a){return a.outputJavaScriptField(b,c)}),c.write(\"  }\\n  \"+b+\".cls = cls;\\n\"),this.outputInjectedMethods(b,c),this._staticFields.forEach(function(a){return a.outputJavaScriptField(b,c)}),this.getMethods().forEach(function(a){return a.outputJavaScriptFunction(b,c)}),this.getMirandaAndDefaultMethods().forEach(function(a){return a.outputJavaScriptFunction(b,c)}),this.getUninheritedDefaultMethods().forEach(function(a){return a.outputJavaScriptFunction(b,c,!0)}),c.write(\"  return \"+b+\";\");var d=c.flush(),e=new Function(\"extendClass\",\"cls\",\"InternalStackFrame\",\"NativeStackFrame\",\"BytecodeStackFrame\",\"gLongZero\",\"ClassLoader\",\"Monitor\",\"thread\",\"getRef\",\"util\",d);return e(extendClass,this,threading_1.InternalStackFrame,threading_1.NativeStackFrame,threading_1.BytecodeStackFrame,gLong.ZERO,__webpack_require__(20),__webpack_require__(25),a,getRef,util)},b.prototype.getConstructor=function(a){return null==this._constructor&&(this._constructor=this._constructConstructor(a)),this._constructor},b}(ClassData);exports.ReferenceClassData=ReferenceClassData;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var gLong=__webpack_require__(8),assert=__webpack_require__(13),ByteStream=function(){function a(a){this.buffer=a,this._index=0}return a.prototype.incIndex=function(a){var b=this._index;return this._index+=a,b},a.prototype.rewind=function(){this._index=0},a.prototype.seek=function(a){this._index=a},a.prototype.pos=function(){return this._index},a.prototype.skip=function(a){this._index+=a},a.prototype.hasBytes=function(){return this._index<this.buffer.length},a.prototype.getFloat=function(){return this.buffer.readFloatBE(this.incIndex(4))},a.prototype.getDouble=function(){return this.buffer.readDoubleBE(this.incIndex(8))},a.prototype.getUint=function(a){switch(a){case 1:return this.getUint8();case 2:return this.getUint16();case 4:return this.getUint32();default:throw new Error(\"Invalid byte count for getUint: \"+a)}},a.prototype.getInt=function(a){switch(a){case 1:return this.getInt8();case 2:return this.getInt16();case 4:return this.getInt32();default:throw new Error(\"Invalid byte count for getUint: \"+a)}},a.prototype.getUint8=function(){return this.buffer.readUInt8(this.incIndex(1))},a.prototype.getUint16=function(){return this.buffer.readUInt16BE(this.incIndex(2))},a.prototype.getUint32=function(){return this.buffer.readUInt32BE(this.incIndex(4))},a.prototype.getInt8=function(){return this.buffer.readInt8(this.incIndex(1))},a.prototype.getInt16=function(){return this.buffer.readInt16BE(this.incIndex(2))},a.prototype.getInt32=function(){return this.buffer.readInt32BE(this.incIndex(4))},a.prototype.getInt64=function(){var a=this.getUint32(),b=this.getUint32();return gLong.fromBits(b,a)},a.prototype.read=function(a){var b=this.buffer.slice(this._index,this._index+a);return this._index+=a,b},a.prototype.peek=function(){return this.buffer.readUInt8(this._index)},a.prototype.size=function(){return this.buffer.length-this._index},a.prototype.slice=function(b){var c=new a(this.buffer.slice(this._index,this._index+b));return this._index+=b,c},a.prototype.getBuffer=function(){return this.buffer},a}();module.exports=ByteStream;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var util=__webpack_require__(6),enums=__webpack_require__(9),assert=__webpack_require__(13),CP_CLASSES={},ConstUTF8=function(){function a(a){this.value=this.bytes2str(a)}return a.prototype.bytes2str=function(a){for(var b,c,d,e,f=0,g=\"\";f<a.length;)d=255&a.readUInt8(f++),127>=d?e=d:223>=d?(b=a.readUInt8(f++),e=((31&d)<<6)+(63&b)):(b=a.readUInt8(f++),c=a.readUInt8(f++),e=((15&d)<<12)+((63&b)<<6)+(63&c)),g+=String.fromCharCode(e);return g},a.prototype.getType=function(){return enums.ConstantPoolItemType.UTF8},a.prototype.getConstant=function(a){return this.value},a.prototype.isResolved=function(){return!0},a.fromBytes=function(a,b){var c=a.getUint16();return new this(a.read(c))},a.size=1,a.infoByteSize=0,a}();exports.ConstUTF8=ConstUTF8,CP_CLASSES[enums.ConstantPoolItemType.UTF8]=ConstUTF8;var ConstInt32=function(){function a(a){this.value=a}return a.prototype.getType=function(){return enums.ConstantPoolItemType.INTEGER},a.prototype.getConstant=function(a){return this.value},a.prototype.isResolved=function(){return!0},a.fromBytes=function(a,b){return new this(a.getInt32())},a.size=1,a.infoByteSize=4,a}();exports.ConstInt32=ConstInt32,CP_CLASSES[enums.ConstantPoolItemType.INTEGER]=ConstInt32;var ConstFloat=function(){function a(a){this.value=a}return a.prototype.getType=function(){return enums.ConstantPoolItemType.FLOAT},a.prototype.getConstant=function(a){return this.value},a.prototype.isResolved=function(){return!0},a.fromBytes=function(a,b){return new this(a.getFloat())},a.size=1,a.infoByteSize=4,a}();exports.ConstFloat=ConstFloat,CP_CLASSES[enums.ConstantPoolItemType.FLOAT]=ConstFloat;var ConstLong=function(){function a(a){this.value=a}return a.prototype.getType=function(){return enums.ConstantPoolItemType.LONG},a.prototype.getConstant=function(a){return this.value},a.prototype.isResolved=function(){return!0},a.fromBytes=function(a,b){return new this(a.getInt64())},a.size=2,a.infoByteSize=8,a}();exports.ConstLong=ConstLong,CP_CLASSES[enums.ConstantPoolItemType.LONG]=ConstLong;var ConstDouble=function(){function a(a){this.value=a}return a.prototype.getType=function(){return enums.ConstantPoolItemType.DOUBLE},a.prototype.getConstant=function(a){return this.value},a.prototype.isResolved=function(){return!0},a.fromBytes=function(a,b){return new this(a.getDouble())},a.size=2,a.infoByteSize=8,a}();exports.ConstDouble=ConstDouble,CP_CLASSES[enums.ConstantPoolItemType.DOUBLE]=ConstDouble;var ClassReference=function(){function a(a){this.cls=null,this.clsConstructor=null,this.arrayClass=null,this.arrayClassConstructor=null,this.name=a}return a.prototype.tryResolve=function(a){return null===this.cls&&(this.cls=a.getResolvedClass(this.name)),null!==this.cls},a.prototype.resolve=function(a,b,c,d,e){var f=this;if(void 0===e&&(e=!0),null!==a){var g=a.currentMethod();if(null!==g&&this.name===g.cls.getInternalName())return this.setResolved(a,a.currentMethod().cls),d(!0)}b.resolveClass(a,this.name,function(b){f.setResolved(a,b),d(null!==b)},e)},a.prototype.setResolved=function(a,b){this.cls=b,null!==b&&(this.clsConstructor=b.getConstructor(a))},a.prototype.getType=function(){return enums.ConstantPoolItemType.CLASS},a.prototype.getConstant=function(a){return this.cls.getClassObject(a)},a.prototype.isResolved=function(){return null!==this.cls},a.fromBytes=function(a,b){var c=a.getUint16(),d=b.get(c);return new this(util.typestr2descriptor(d.value))},a.size=1,a.infoByteSize=2,a}();exports.ClassReference=ClassReference,CP_CLASSES[enums.ConstantPoolItemType.CLASS]=ClassReference;var NameAndTypeInfo=function(){function a(a,b){this.name=a,this.descriptor=b}return a.prototype.getType=function(){return enums.ConstantPoolItemType.NAME_AND_TYPE},a.prototype.isResolved=function(){return!0},a.fromBytes=function(a,b){var c=a.getUint16(),d=a.getUint16(),e=b.get(c),f=b.get(d);return new this(e.value,f.value)},a.size=1,a.infoByteSize=4,a}();exports.NameAndTypeInfo=NameAndTypeInfo,CP_CLASSES[enums.ConstantPoolItemType.NAME_AND_TYPE]=NameAndTypeInfo;var ConstString=function(){function a(a){this.value=null,this.stringValue=a}return a.prototype.getType=function(){return enums.ConstantPoolItemType.STRING},a.prototype.resolve=function(a,b,c,d){this.value=a.getJVM().internString(this.stringValue),setImmediate(function(){return d(!0)})},a.prototype.getConstant=function(a){return this.value},a.prototype.isResolved=function(){return null!==this.value},a.fromBytes=function(a,b){var c=a.getUint16(),d=b.get(c);return new this(d.value)},a.size=1,a.infoByteSize=2,a}();exports.ConstString=ConstString,CP_CLASSES[enums.ConstantPoolItemType.STRING]=ConstString;var MethodType=function(){function a(a){this.methodType=null,this.descriptor=a}return a.prototype.resolve=function(a,b,c,d){var e=this;util.createMethodType(a,b,this.descriptor,function(b,c){b?(a.throwException(b),d(!1)):(e.methodType=c,d(!0))})},a.prototype.getConstant=function(a){return this.methodType},a.prototype.getType=function(){return enums.ConstantPoolItemType.METHOD_TYPE},a.prototype.isResolved=function(){return null!==this.methodType},a.fromBytes=function(a,b){var c=a.getUint16(),d=b.get(c);return new this(d.value)},a.size=1,a.infoByteSize=2,a}();exports.MethodType=MethodType,CP_CLASSES[enums.ConstantPoolItemType.METHOD_TYPE]=MethodType;var MethodReference=function(){function a(a,b){this.method=null,this.fullSignature=null,this.paramWordSize=-1,this.memberName=null,this.appendix=null,this.jsConstructor=null,this.classInfo=a,this.nameAndTypeInfo=b,this.signature=this.nameAndTypeInfo.name+this.nameAndTypeInfo.descriptor}return a.prototype.getType=function(){return enums.ConstantPoolItemType.METHODREF},a.prototype.hasAccess=function(a,b,c){var d=this.method,e=b.method.cls;return d.accessFlags.isStatic()!==c?(a.throwNewException(\"Ljava/lang/IncompatibleClassChangeError;\",\"Method \"+d.name+\" from class \"+d.cls.getExternalName()+\" is \"+(c?\"not \":\"\")+\"static.\"),b.returnToThreadLoop=!0,!1):util.checkAccess(e,d.cls,d.accessFlags)?!0:(a.throwNewException(\"Ljava/lang/IllegalAccessError;\",e.getExternalName()+\" cannot access \"+d.cls.getExternalName()+\".\"+d.name),b.returnToThreadLoop=!0,!1)},a.prototype.resolveMemberName=function(a,b,c,d,e){var f=this,g=b.getBsCl().getInitializedClass(b,\"Ljava/lang/invoke/MethodHandleNatives;\").getConstructor(b),h=new(b.getBsCl().getInitializedClass(b,\"[Ljava/lang/Object;\").getConstructor(b))(b,1);util.createMethodType(b,c,this.nameAndTypeInfo.descriptor,function(a,c){a?(b.throwException(a),e(!1)):g[\"java/lang/invoke/MethodHandleNatives/linkMethod(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;\"](b,[d.getClassObject(b),enums.MethodHandleReferenceKind.INVOKEVIRTUAL,f.classInfo.cls.getClassObject(b),b.getJVM().internString(f.nameAndTypeInfo.name),c,h],function(a,c){null!==a?(b.throwException(a),e(!1)):(f.appendix=h.array[0],f.memberName=c,e(!0))})})},a.prototype.resolve=function(a,b,c,d,e){var f=this;if(void 0===e&&(e=!0),this.classInfo.isResolved()){var g=this.classInfo.cls,h=g.methodLookup(this.signature);if(null===h&&util.is_reference_type(g.getInternalName())&&(h=g.signaturePolymorphicAwareMethodLookup(this.signature),null!==h&&(\"invoke\"===h.name||\"invokeExact\"===h.name)))return this.resolveMemberName(h,a,b,c,function(b){b===!0?f.setResolved(a,h):a.throwNewException(\"Ljava/lang/NoSuchMethodError;\",\"Method \"+f.signature+\" does not exist in class \"+f.classInfo.cls.getExternalName()+\".\"),d(b)});null!==h?(this.setResolved(a,h),d(!0)):(a.throwNewException(\"Ljava/lang/NoSuchMethodError;\",\"Method \"+this.signature+\" does not exist in class \"+this.classInfo.cls.getExternalName()+\".\"),d(!1))}else this.classInfo.resolve(a,b,c,function(g){g?f.resolve(a,b,c,d,e):d(!1)},e)},a.prototype.setResolved=function(a,b){this.method=b,this.paramWordSize=util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor),this.fullSignature=this.method.fullSignature,this.jsConstructor=this.method.cls.getConstructor(a)},a.prototype.isResolved=function(){return null!==this.method},a.prototype.getParamWordSize=function(){return-1===this.paramWordSize&&(this.paramWordSize=util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor)),this.paramWordSize},a.fromBytes=function(a,b){var c=a.getUint16(),d=a.getUint16(),e=b.get(c),f=b.get(d);return new this(e,f)},a.size=1,a.infoByteSize=4,a}();exports.MethodReference=MethodReference,CP_CLASSES[enums.ConstantPoolItemType.METHODREF]=MethodReference;var InterfaceMethodReference=function(){function a(a,b){this.fullSignature=null,this.method=null,this.paramWordSize=-1,this.jsConstructor=null,this.classInfo=a,this.nameAndTypeInfo=b,this.signature=this.nameAndTypeInfo.name+this.nameAndTypeInfo.descriptor}return a.prototype.getType=function(){return enums.ConstantPoolItemType.INTERFACE_METHODREF},a.prototype.hasAccess=function(a,b,c){var d=this.method,e=b.method.cls;return d.accessFlags.isStatic()!==c?(a.throwNewException(\"Ljava/lang/IncompatibleClassChangeError;\",\"Method \"+d.name+\" from class \"+d.cls.getExternalName()+\" is \"+(c?\"not \":\"\")+\"static.\"),b.returnToThreadLoop=!0,!1):util.checkAccess(e,d.cls,d.accessFlags)?!0:(a.throwNewException(\"Ljava/lang/IllegalAccessError;\",e.getExternalName()+\" cannot access \"+d.cls.getExternalName()+\".\"+d.name),b.returnToThreadLoop=!0,!1)},a.prototype.resolve=function(a,b,c,d,e){var f=this;if(void 0===e&&(e=!0),this.classInfo.isResolved()){var g=this.classInfo.cls,h=g.methodLookup(this.signature);this.paramWordSize=util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor),null!==h?(this.setResolved(a,h),d(!0)):(a.throwNewException(\"Ljava/lang/NoSuchMethodError;\",\"Method \"+this.signature+\" does not exist in class \"+this.classInfo.cls.getExternalName()+\".\"),d(!1))}else this.classInfo.resolve(a,b,c,function(g){g?f.resolve(a,b,c,d,e):d(!1)},e)},a.prototype.setResolved=function(a,b){this.method=b,this.paramWordSize=util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor),this.fullSignature=this.method.fullSignature,this.jsConstructor=this.method.cls.getConstructor(a)},a.prototype.getParamWordSize=function(){return-1===this.paramWordSize&&(this.paramWordSize=util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor)),this.paramWordSize},a.prototype.isResolved=function(){return null!==this.method},a.fromBytes=function(a,b){var c=a.getUint16(),d=a.getUint16(),e=b.get(c),f=b.get(d);return new this(e,f)},a.size=1,a.infoByteSize=4,a}();exports.InterfaceMethodReference=InterfaceMethodReference,CP_CLASSES[enums.ConstantPoolItemType.INTERFACE_METHODREF]=InterfaceMethodReference;var FieldReference=function(){function a(a,b){this.field=null,this.fullFieldName=null,this.fieldOwnerConstructor=null,this.classInfo=a,this.nameAndTypeInfo=b}return a.prototype.getType=function(){return enums.ConstantPoolItemType.FIELDREF},a.prototype.hasAccess=function(a,b,c){var d=this.field,e=b.method.cls;return d.accessFlags.isStatic()!==c?(a.throwNewException(\"Ljava/lang/IncompatibleClassChangeError;\",\"Field \"+name+\" from class \"+d.cls.getExternalName()+\" is \"+(c?\"not \":\"\")+\"static.\"),b.returnToThreadLoop=!0,!1):util.checkAccess(e,d.cls,d.accessFlags)?!0:(a.throwNewException(\"Ljava/lang/IllegalAccessError;\",e.getExternalName()+\" cannot access \"+d.cls.getExternalName()+\".\"+name),b.returnToThreadLoop=!0,!1)},a.prototype.resolve=function(a,b,c,d,e){var f=this;if(void 0===e&&(e=!0),this.classInfo.isResolved()){var g=this.classInfo.cls,h=g.fieldLookup(this.nameAndTypeInfo.name);null!==h?(this.fullFieldName=util.descriptor2typestr(h.cls.getInternalName())+\"/\"+h.name,this.field=h,d(!0)):(a.throwNewException(\"Ljava/lang/NoSuchFieldError;\",\"Field \"+this.nameAndTypeInfo.name+\" does not exist in class \"+this.classInfo.cls.getExternalName()+\".\"),d(!1))}else this.classInfo.resolve(a,b,c,function(g){g?f.resolve(a,b,c,d,e):d(!1)},e)},a.prototype.isResolved=function(){return null!==this.field},a.fromBytes=function(a,b){var c=a.getUint16(),d=a.getUint16(),e=b.get(c),f=b.get(d);return new this(e,f)},a.size=1,a.infoByteSize=4,a}();exports.FieldReference=FieldReference,CP_CLASSES[enums.ConstantPoolItemType.FIELDREF]=FieldReference;var InvokeDynamic=function(){function a(a,b){this.callSiteObjects={},this.methodType=null,this.bootstrapMethodAttrIndex=a,this.nameAndTypeInfo=b,this.paramWordSize=util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor)}return a.prototype.getType=function(){return enums.ConstantPoolItemType.INVOKE_DYNAMIC},a.prototype.isResolved=function(){return null!==this.methodType},a.prototype.resolve=function(a,b,c,d){var e=this;util.createMethodType(a,b,this.nameAndTypeInfo.descriptor,function(b,c){b?(a.throwException(b),d(!1)):(e.methodType=c,d(!0))})},a.prototype.getCallSiteObject=function(a){var b=this.callSiteObjects[a];return b?b:null},a.prototype.constructCallSiteObject=function(a,b,c,d,e,f){function g(){var c,d,e=i[1],f=new(a.getBsCl().getInitializedClass(a,\"[Ljava/lang/Object;\").getConstructor(a))(a,e.length),g=f.array;for(c=0;c<e.length;c++)switch(d=e[c],d.getType()){case enums.ConstantPoolItemType.CLASS:g[c]=d.cls.getClassObject(a);break;case enums.ConstantPoolItemType.METHOD_HANDLE:g[c]=d.methodHandle;break;case enums.ConstantPoolItemType.METHOD_TYPE:g[c]=d.methodType;break;case enums.ConstantPoolItemType.STRING:g[c]=d.value;break;case enums.ConstantPoolItemType.UTF8:g[c]=a.getJVM().internString(d.value);break;case enums.ConstantPoolItemType.INTEGER:g[c]=b.getInitializedClass(a,\"I\").createWrapperObject(a,d.value);break;case enums.ConstantPoolItemType.LONG:g[c]=b.getInitializedClass(a,\"J\").createWrapperObject(a,d.value);break;case enums.ConstantPoolItemType.FLOAT:g[c]=b.getInitializedClass(a,\"F\").createWrapperObject(a,d.value);break;case enums.ConstantPoolItemType.DOUBLE:g[c]=b.getInitializedClass(a,\"D\").createWrapperObject(a,d.value)}return f}var h=this;void 0===f&&(f=!0);var i=c.getBootstrapMethod(this.bootstrapMethodAttrIndex),j=i[1].concat(i[0],this).filter(function(a){return!a.isResolved()});if(j.length>0)return util.asyncForEach(j,function(d,e){d.resolve(a,b,c,function(a){a?e():e(\"Failed.\")},f)},function(g){g?e(!1):h.constructCallSiteObject(a,b,c,d,e,f)});var k=a.getJVM().internString(this.nameAndTypeInfo.name),l=new(b.getInitializedClass(a,\"[Ljava/lang/Object;\").getConstructor(a))(a,1),m=g(),n=b.getInitializedClass(a,\"Ljava/lang/invoke/MethodHandleNatives;\").getConstructor(a);n[\"java/lang/invoke/MethodHandleNatives/linkCallSite(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;\"](a,[c.getClassObject(a),i[0].methodHandle,k,this.methodType,m,l],function(b,c){b?(a.throwException(b),e(!1)):(h.setResolved(d,[c,l.array[0]]),e(!0))})},a.prototype.setResolved=function(a,b){void 0===this.callSiteObjects[a]&&(this.callSiteObjects[a]=b)},a.fromBytes=function(a,b){var c=a.getUint16(),d=a.getUint16(),e=b.get(d);return new this(c,e)},a.size=1,a.infoByteSize=4,a}();exports.InvokeDynamic=InvokeDynamic,CP_CLASSES[enums.ConstantPoolItemType.INVOKE_DYNAMIC]=InvokeDynamic;var MethodHandle=function(){function a(a,b){this.methodHandle=null,this.reference=a,this.referenceType=b}return a.prototype.getType=function(){return enums.ConstantPoolItemType.METHOD_HANDLE},a.prototype.isResolved=function(){return null!==this.methodHandle},a.prototype.getConstant=function(a){return this.methodHandle},a.prototype.resolve=function(a,b,c,d,e){var f=this;return this.reference.isResolved()?void this.constructMethodHandleType(a,b,function(e){if(null===e)d(!1);else{var g=b.getInitializedClass(a,\"Ljava/lang/invoke/MethodHandleNatives;\").getConstructor(a);g[\"linkMethodHandleConstant(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;\"](a,[c.getClassObject(a),f.referenceType,f.getDefiningClassObj(a),a.getJVM().internString(f.reference.nameAndTypeInfo.name),e],function(b,c){b?(a.throwException(b),d(!1)):(f.methodHandle=c,d(!0))})}}):this.reference.resolve(a,b,c,function(g){g?f.resolve(a,b,c,d,e):d(!1)},e)},a.prototype.getDefiningClassObj=function(a){return this.reference.getType()===enums.ConstantPoolItemType.FIELDREF?this.reference.field.cls.getClassObject(a):this.reference.method.cls.getClassObject(a)},a.prototype.constructMethodHandleType=function(a,b,c){if(this.reference.getType()===enums.ConstantPoolItemType.FIELDREF){var d=this.reference.nameAndTypeInfo.descriptor;b.resolveClass(a,d,function(b){c(null!==b?b.getClassObject(a):null)})}else util.createMethodType(a,b,this.reference.nameAndTypeInfo.descriptor,function(b,d){b?(a.throwException(b),c(null)):c(d)})},a.fromBytes=function(a,b){var c=a.getUint8(),d=a.getUint16(),e=b.get(d);return new this(e,c)},a.size=1,a.infoByteSize=3,a}();exports.MethodHandle=MethodHandle,CP_CLASSES[enums.ConstantPoolItemType.METHOD_HANDLE]=MethodHandle;var CONSTANT_POOL_TIER=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];!function(a){a.forEach(function(a,b){a.forEach(function(a){CONSTANT_POOL_TIER[a]=b})})}([[enums.ConstantPoolItemType.UTF8,enums.ConstantPoolItemType.INTEGER,enums.ConstantPoolItemType.FLOAT,enums.ConstantPoolItemType.LONG,enums.ConstantPoolItemType.DOUBLE],[enums.ConstantPoolItemType.CLASS,enums.ConstantPoolItemType.STRING,enums.ConstantPoolItemType.NAME_AND_TYPE,enums.ConstantPoolItemType.METHOD_TYPE],[enums.ConstantPoolItemType.FIELDREF,enums.ConstantPoolItemType.METHODREF,enums.ConstantPoolItemType.INTERFACE_METHODREF,enums.ConstantPoolItemType.INVOKE_DYNAMIC],[enums.ConstantPoolItemType.METHOD_HANDLE]]);var ConstantPool=function(){function a(){}return a.prototype.parse=function(a,b){var c=this;void 0===b&&(b=null);var d=a.getUint16(),e=[[],[],[]],f=0,g=1,h=0,i=0,j=0;for(this.constantPool=new Array(d);d>g;)i=a.pos(),h=a.getUint8(),j=CONSTANT_POOL_TIER[h],j>0?(e[j-1].push({offset:i,index:g}),a.skip(CP_CLASSES[h].infoByteSize)):this.constantPool[g]=CP_CLASSES[h].fromBytes(a,this),g+=CP_CLASSES[h].size;return f=a.pos(),e.forEach(function(d){d.forEach(function(d){if(a.seek(d.offset),h=a.getUint8(),c.constantPool[d.index]=CP_CLASSES[h].fromBytes(a,c),null!==b&&null!==b.array[d.index]&&void 0!==b.array[d.index]){var e=b.array[d.index];switch(e.getClass().getInternalName()){case\"Ljava/lang/Integer;\":c.constantPool[d.index].value=e[\"java/lang/Integer/value\"];break;case\"Ljava/lang/Long;\":c.constantPool[d.index].value=e[\"java/lang/Long/value\"];break;case\"Ljava/lang/Float;\":c.constantPool[d.index].value=e[\"java/lang/Float/value\"];break;case\"Ljava/lang/Double;\":c.constantPool[d.index].value=e[\"java/lang/Double/value\"];break;case\"Ljava/lang/String;\":c.constantPool[d.index].value=e.toString();break;case\"Ljava/lang/Class;\":c.constantPool[d.index].name=e.$cls.getInternalName(),c.constantPool[d.index].cls=e.$cls;break;default:c.constantPool[d.index].stringValue=\"\",c.constantPool[d.index].value=e}}})}),a.seek(f),a},a.prototype.get=function(a){return this.constantPool[a]},a.prototype.each=function(a){this.constantPool.forEach(function(b,c){void 0!==b&&a(c,b)})},a}();exports.ConstantPool=ConstantPool;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";var ClassLock=function(){function a(){this.queue=[]}return a.prototype.tryLock=function(a,b){return 1===this.queue.push({thread:a,cb:b})},a.prototype.unlock=function(a){var b,c=this.queue.length;for(b=0;c>b;b++)this.queue[b].cb(a);this.queue=[]},a.prototype.getOwner=function(){return this.queue.length>0?this.queue[0].thread:null},a}();module.exports=ClassLock;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var enums=__webpack_require__(9),assert=__webpack_require__(13),Monitor=function(){function a(){this.owner=null,this.count=0,this.blocked={},this.waiting={}}return a.prototype.enter=function(a,b){return this.owner===a?(this.count++,!0):this.contendForLock(a,1,enums.ThreadStatus.BLOCKED,b)},a.prototype.contendForLock=function(a,b,c,d){var e=this.owner;return null===e?(this.owner=a,this.count=b,!0):(this.blocked[a.getRef()]={thread:a,cb:d,count:b},a.setStatus(c,this),!1)},a.prototype.exit=function(a){var b=this.owner;return b===a?0===--this.count&&(this.owner=null,this.appointNewOwner()):a.throwNewException(\"Ljava/lang/IllegalMonitorStateException;\",\"Cannot exit a monitor that you do not own.\"),b===a},a.prototype.appointNewOwner=function(){var a=Object.keys(this.blocked);if(a.length>0){var b=a[Math.floor(Math.random()*a.length)],c=this.blocked[b];this.unblock(c.thread,!1)}},a.prototype.wait=function(a,b,c,d){var e=this;return this.getOwner()===a?(this.waiting[a.getRef()]={thread:a,cb:b,count:this.count,isTimed:null!=c&&0!==c},this.owner=null,this.count=0,null!=c&&0!==c?(this.waiting[a.getRef()].timer=setTimeout(function(){e.unwait(a,!0)},c),a.setStatus(enums.ThreadStatus.TIMED_WAITING,this)):a.setStatus(enums.ThreadStatus.WAITING,this),this.appointNewOwner(),!0):(a.throwNewException(\"Ljava/lang/IllegalMonitorStateException;\",\"Cannot wait on an object that you do not own.\"),!1)},a.prototype.unwait=function(a,b,c,d){void 0===c&&(c=!1),void 0===d&&(d=null);var e=this.waiting[a.getRef()],f=enums.ThreadStatus.UNINTERRUPTABLY_BLOCKED,g=function(){a.setStatus(enums.ThreadStatus.RUNNABLE),c?d():e.cb(b)};if(delete this.waiting[a.getRef()],a.getStatus()===enums.ThreadStatus.TIMED_WAITING&&!b){var h=e.timer;clearTimeout(h)}this.contendForLock(a,e.count,f,g)&&g()},a.prototype.unblock=function(a,b){void 0===b&&(b=!1);var c=this.blocked[a.getRef()];null!=c&&(delete this.blocked[a.getRef()],a.setStatus(enums.ThreadStatus.RUNNABLE),b||(this.owner=a,this.count=c.count,c.cb()))},a.prototype.notify=function(a){if(this.owner===a){var b=Object.keys(this.waiting);b.length>0&&this.unwait(this.waiting[b[Math.floor(Math.random()*b.length)]].thread,!1)}else a.throwNewException(\"Ljava/lang/IllegalMonitorStateException;\",\"Cannot notify on a monitor that you do not own.\")},a.prototype.notifyAll=function(a){if(this.owner===a){var b,c=Object.keys(this.waiting);for(b=0;b<c.length;b++)this.unwait(this.waiting[c[b]].thread,!1)}else a.throwNewException(\"Ljava/lang/IllegalMonitorStateException;\",\"Cannot notifyAll on a monitor that you do not own.\")},a.prototype.getOwner=function(){return this.owner},a.prototype.isWaiting=function(a){return null!=this.waiting[a.getRef()]&&!this.waiting[a.getRef()].isTimed},a.prototype.isTimedWaiting=function(a){return null!=this.waiting[a.getRef()]&&this.waiting[a.getRef()].isTimed},a.prototype.isBlocked=function(a){return null!=this.blocked[a.getRef()]},a}();module.exports=Monitor;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function win2nix(a){return a.replace(/\\\\/g,\"/\")}function parseMetaIndex(a){for(var b=a.split(\"\\n\"),c={},d=null,e=0;e<b.length;e++){var f=b[e];if(f.length>0)switch(f[0]){case\"%\":case\"@\":continue;case\"!\":case\"#\":var g=f.slice(2);c[g]=d={};break;default:\"/\"===f[f.length-1]&&(f=f.slice(0,f.length-1));var h=f.split(\"/\"),i=d,j=void 0;for(j=0;j<h.length-1;j++){var k=h[j],l=i[k];i=l?i[k]:i[k]={}}i[h[j]]=!0}}return c}function ClasspathFactory(a,b,c){var d=new Array(b.length),e=0;fs.readFile(path.join(a,\"lib\",\"meta-index\"),function(f,g){var h={};f||(h=parseMetaIndex(g.toString())),util.asyncForEach(b,function(b,c){var f=path.relative(a+\"/lib\",b);fs.stat(b,function(a,g){var i;i=a?new ClasspathNotFound(b):g.isDirectory()?new ClasspathFolder(b):h[f]?new IndexedClasspathJar(h[f],b):new UnindexedClasspathJar(b),d[e++]=i,i.initialize(c)})},function(a){c(d)})})}var __extends=this&&this.__extends||function(a,b){function c(){this.constructor=a}for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d]);a.prototype=null===b?Object.create(b):(c.prototype=b.prototype,new c)},enums_1=__webpack_require__(9),assert=__webpack_require__(13),fs=__webpack_require__(27),path=__webpack_require__(28),BrowserFS=__webpack_require__(4),util=__webpack_require__(6),BFSFS=BrowserFS.BFSRequire(\"fs\"),ZipFS=BrowserFS.FileSystem.ZipFS,AbstractClasspathJar=function(){function a(a){this._fs=new BFSFS.FS,this._jarRead=enums_1.TriState.INDETERMINATE,this._path=a}return a.prototype.getPath=function(){return this._path},a.prototype.loadJar=function(a){var b=this;this._jarRead!==enums_1.TriState.TRUE?fs.readFile(this._path,function(c,d){if(c)b._jarRead=enums_1.TriState.FALSE,a(c);else try{ZipFS.computeIndex(d,function(c){try{b._fs.initialize(new ZipFS(c,path.basename(b._path))),b._jarRead=enums_1.TriState.TRUE,a()}catch(d){b._jarRead=enums_1.TriState.FALSE,a(d)}})}catch(c){b._jarRead=enums_1.TriState.FALSE,a(c)}}):setImmediate(function(){return a(b._jarRead===enums_1.TriState.TRUE?null:new Error(\"Failed to load JAR file.\"))})},a.prototype.tryLoadClassSync=function(a){if(this._jarRead!==enums_1.TriState.TRUE)return null;if(this.hasClass(a)===enums_1.TriState.FALSE)return null;try{return this._fs.readFileSync(\"/\"+a+\".class\")}catch(b){return null}},a.prototype._wrapOp=function(a,b){var c=this;switch(this._jarRead){case enums_1.TriState.TRUE:a();break;case enums_1.TriState.FALSE:setImmediate(function(){return b(new Error(\"Unable to load JAR file.\"))});break;default:this.loadJar(function(){c._wrapOp(a,b)})}},a.prototype._wrapSyncOp=function(a){if(this._jarRead!==enums_1.TriState.TRUE)return null;try{return a()}catch(b){return null}},a.prototype.loadClass=function(a,b){var c=this;this._wrapOp(function(){c._fs.readFile(\"/\"+a+\".class\",b)},b)},a.prototype.statResource=function(a,b){var c=this;this._wrapOp(function(){c._fs.stat(a,b)},b)},a.prototype.readdir=function(a,b){var c=this;this._wrapOp(function(){c._fs.readdir(win2nix(a),b)},b)},a.prototype.tryReaddirSync=function(a){var b=this;return this._wrapSyncOp(function(){return b._fs.readdirSync(win2nix(a))})},a.prototype.tryStatSync=function(a){var b=this;return this._wrapSyncOp(function(){return b._fs.statSync(win2nix(a))})},a.prototype.getFS=function(){return this._fs.getRootFS()},a}();exports.AbstractClasspathJar=AbstractClasspathJar;var UnindexedClasspathJar=function(a){function b(b){a.call(this,b),this._classList=null}return __extends(b,a),b.prototype.hasClass=function(a){return this._jarRead===enums_1.TriState.FALSE?enums_1.TriState.FALSE:this._hasClass(a)},b.prototype._hasClass=function(a){return this._classList?this._classList[a]?enums_1.TriState.TRUE:enums_1.TriState.FALSE:enums_1.TriState.INDETERMINATE},b.prototype.initializeWithClasslist=function(a){this._classList={};for(var b=a.length,c=0;b>c;c++)this._classList[a[c]]=!0},b.prototype.initialize=function(a){var b=this;this.loadJar(function(c){if(c)a();else{for(var d=[\"/\"],e=[],f=b._fs;d.length>0;){var g=d.pop();try{var h=f.statSync(g);if(h.isDirectory())for(var i=f.readdirSync(g),j=0;j<i.length;j++)d.push(path.join(g,i[j]));else\".class\"===path.extname(g)&&e.push(g.slice(1,g.length-6))}catch(k){}}b.initializeWithClasslist(e),a()}})},b}(AbstractClasspathJar);exports.UnindexedClasspathJar=UnindexedClasspathJar;var IndexedClasspathJar=function(a){function b(b,c){a.call(this,c),this._metaIndex=b,this._metaName=path.basename(c)}return __extends(b,a),b.prototype.initialize=function(a){setImmediate(function(){return a()})},b.prototype.hasClass=function(a){if(this._jarRead===enums_1.TriState.FALSE)return enums_1.TriState.FALSE;var b=a.split(\"/\"),c=this._metaIndex;b.pop();for(var d=0;d<b.length;d++){var e=c[b[d]];if(!e)return enums_1.TriState.FALSE;if(e===!0)return enums_1.TriState.INDETERMINATE;c=e}return enums_1.TriState.FALSE},b}(AbstractClasspathJar);exports.IndexedClasspathJar=IndexedClasspathJar;var ClasspathFolder=function(){function a(a){this._path=a}return a.prototype.getPath=function(){return this._path},a.prototype.hasClass=function(a){return enums_1.TriState.INDETERMINATE},a.prototype.initialize=function(a){setImmediate(a)},a.prototype.tryLoadClassSync=function(a){try{return fs.readFileSync(path.resolve(this._path,a+\".class\"))}catch(b){return null}},a.prototype.loadClass=function(a,b){fs.readFile(path.resolve(this._path,a+\".class\"),b)},a.prototype.statResource=function(a,b){fs.stat(path.resolve(this._path,a),b)},a.prototype.readdir=function(a,b){fs.readdir(path.resolve(this._path,a),b)},a.prototype.tryReaddirSync=function(a){try{return fs.readdirSync(path.resolve(this._path,a))}catch(b){return null}},a.prototype.tryStatSync=function(a){try{return fs.statSync(path.resolve(this._path,a))}catch(b){return null}},a}();exports.ClasspathFolder=ClasspathFolder;var ClasspathNotFound=function(){function a(a){this._path=a}return a.prototype.getPath=function(){return this._path},a.prototype.hasClass=function(a){return enums_1.TriState.FALSE},a.prototype.initialize=function(a){setImmediate(a)},a.prototype.initializeWithClasslist=function(a){},a.prototype.tryLoadClassSync=function(a){return null},a.prototype._notFoundError=function(a){setImmediate(function(){return a(new Error(\"Class cannot be found.\"))})},a.prototype.loadClass=function(a,b){this._notFoundError(b)},a.prototype.statResource=function(a,b){this._notFoundError(b)},a.prototype.readdir=function(a,b){this._notFoundError(b)},a.prototype.tryReaddirSync=function(a){return null},a.prototype.tryStatSync=function(a){return null},a}();exports.ClasspathNotFound=ClasspathNotFound,exports.ClasspathFactory=ClasspathFactory;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BrowserFS = __webpack_require__(4);module.exports=BrowserFS.BFSRequire('fs');\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BrowserFS = __webpack_require__(4);module.exports=BrowserFS.BFSRequire('path');\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BrowserFS = __webpack_require__(4);module.exports=BrowserFS.BFSRequire('buffer');\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {\"use strict\";var Heap=function(){function a(b){this.size=b,this._sizeMap={},this._buffer=new Buffer(b),this._remaining=b,this._offset=0,this._freeLists=new Array(a._numSizeClasses);for(var c=0;c<a._numSizeClasses;c++)this._freeLists[c]=[]}return a.prototype.malloc=function(b){if(4>=b&&(b=4),this._remaining<b)throw\"out of memory\";var c,d;return d=a.size_to_class(b),c=this._freeLists[d].pop(),void 0===c&&(c=this.refill(d)),c},a.prototype.free=function(b){var c=b&~(a._chunkSize-1),d=this._sizeMap[c];this._freeLists[d].push(b)},a.prototype.store_word=function(a,b){this._buffer.writeInt32LE(b,a)},a.prototype.get_byte=function(a){return this._buffer.readUInt8(a)},a.prototype.get_word=function(a){return this._buffer.readInt32LE(a)},a.prototype.get_buffer=function(a,b){return this._buffer.slice(a,a+b)},a.prototype.get_signed_byte=function(a){return this._buffer.readInt8(a)},a.prototype.set_byte=function(a,b){this._buffer.writeUInt8(b,a)},a.prototype.set_signed_byte=function(a,b){this._buffer.writeInt8(b,a)},a.prototype.memcpy=function(a,b,c){this._buffer.copy(this._buffer,b,a,a+c)},a.prototype.refill=function(b){var c=this.cl_to_size(b),d=Math.floor(a._chunkSize/c);1>d&&(d=1);var e=this._offset;this._sizeMap[e]=b;for(var f=0;d>f;f++)this._remaining-=c,e=this._offset,this._freeLists[b].push(e),this._offset+=c;return e},a.ilog2=function(a){for(var b=0,c=1;a>c;)c<<=1,b++;return b},a.size_to_class=function(b){return a.ilog2(b)},a.prototype.cl_to_size=function(a){return 1<<a},a._numSizeClasses=64,a._chunkSize=4096,a}();module.exports=Heap;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var enums_1=__webpack_require__(9),assert=__webpack_require__(13),Parker=function(){function a(){this._parkCounts={},this._parkCallbacks={}}return a.prototype.park=function(a,b){var c=a.getRef();this._parkCallbacks[c]=b,this._mutateParkCount(a,1),this.isParked(a)&&a.setStatus(enums_1.ThreadStatus.PARKED)},a.prototype.unpark=function(a){this._mutateParkCount(a,-1)},a.prototype.completelyUnpark=function(a){var b=a.getRef(),c=this._parkCounts[b];c&&this._mutateParkCount(a,-c)},a.prototype._mutateParkCount=function(a,b){var c,d=a.getRef();this._parkCounts[d]||(this._parkCounts[d]=0),0===(this._parkCounts[d]+=b)&&(c=this._parkCallbacks[d],delete this._parkCounts[d],delete this._parkCallbacks[d],a.getStatus()===enums_1.ThreadStatus.PARKED&&(a.setStatus(enums_1.ThreadStatus.ASYNC_WAITING),c()))},a.prototype.isParked=function(a){return!!this._parkCounts[a.getRef()]},a}();module.exports=Parker;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function isRunnable(a){return a===enums_1.ThreadStatus.RUNNABLE}var enums_1=__webpack_require__(9),assert=__webpack_require__(13),WeightedRoundRobinScheduler=function(){function a(){this._count=0,this._queue=[],this._threadScheduled=!1}return a.prototype.scheduleThread=function(a){this._queue.push(a),1===this._queue.length&&this.runThread()},a.prototype.runThread=function(){var a=this;this._threadScheduled||(this._threadScheduled=!0,setImmediate(function(){var b=a._queue;if(a._threadScheduled=!1,b.length>0){var c=a._queue[0];c.run()}}))},a.prototype.unscheduleThread=function(a){var b=this._queue,c=b[0]===a;c?(b.shift(),this._count=0,this.runThread()):b.splice(b.indexOf(a),1)},a.prototype.getRunningThread=function(){var a=this._queue;return a.length>0?a[0]:null},a.prototype.priorityChange=function(a){},a.prototype.quantumOver=function(a){this._count++,(this._count>=a.getPriority()||a.getStatus()!==enums_1.ThreadStatus.RUNNABLE)&&(this._count=0,this._queue.push(this._queue.shift())),this.runThread()},a}(),ThreadPool=function(){function a(a){this.threads=[],this.scheduler=new WeightedRoundRobinScheduler,this.emptyCallback=a}return a.prototype.getThreads=function(){return this.threads.slice(0)},a.prototype.anyNonDaemonicThreads=function(){for(var a=0;a<this.threads.length;a++){var b=this.threads[a];if(!b.isDaemon()){var c=b.getStatus();if(c!==enums_1.ThreadStatus.NEW&&c!==enums_1.ThreadStatus.TERMINATED)return!0}}return!1},a.prototype.threadTerminated=function(a){var b=this.threads.indexOf(a);if(this.threads.splice(b,1),!this.anyNonDaemonicThreads()){var c=this.emptyCallback();c&&(this.emptyCallback=null)}},a.prototype.statusChange=function(a,b,c){var d=isRunnable(b),e=isRunnable(c);b!==enums_1.ThreadStatus.NEW&&b!==enums_1.ThreadStatus.TERMINATED||-1===this.threads.indexOf(a)&&this.threads.push(a),d!==e&&(d?this.scheduler.unscheduleThread(a):this.scheduler.scheduleThread(a)),c===enums_1.ThreadStatus.TERMINATED&&this.threadTerminated(a)},a.prototype.priorityChange=function(a){this.scheduler.priorityChange(a)},a.prototype.quantumOver=function(a){this.scheduler.quantumOver(a)},a}();exports.__esModule=!0,exports[\"default\"]=ThreadPool;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"url\": \"https://github.com/plasma-umass/doppio_jcl/releases/download/v3.2/java_home.tar.gz\",\n\t\t\"classpath\": [\n\t\t\t\"lib/rt.jar\",\n\t\t\t\"lib/charsets.jar\",\n\t\t\t\"lib/doppio.jar\",\n\t\t\t\"lib/dt.jar\",\n\t\t\t\"lib/jce.jar\",\n\t\t\t\"lib/jconsole.jar\",\n\t\t\t\"lib/jsse.jar\",\n\t\t\t\"lib/management-agent.jar\",\n\t\t\t\"lib/resources.jar\",\n\t\t\t\"lib/sa-jdi.jar\",\n\t\t\t\"lib/tools.jar\"\n\t\t]\n\t};\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils   = __webpack_require__(35);\n\tvar trees   = __webpack_require__(36);\n\tvar adler32 = __webpack_require__(37);\n\tvar crc32   = __webpack_require__(38);\n\tvar msg     = __webpack_require__(39);\n\t\n\t/* Public constants ==========================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\t/* Allowed flush values; see deflate() and inflate() below for details */\n\tvar Z_NO_FLUSH      = 0;\n\tvar Z_PARTIAL_FLUSH = 1;\n\t//var Z_SYNC_FLUSH    = 2;\n\tvar Z_FULL_FLUSH    = 3;\n\tvar Z_FINISH        = 4;\n\tvar Z_BLOCK         = 5;\n\t//var Z_TREES         = 6;\n\t\n\t\n\t/* Return codes for the compression/decompression functions. Negative values\n\t * are errors, positive values are used for special but normal events.\n\t */\n\tvar Z_OK            = 0;\n\tvar Z_STREAM_END    = 1;\n\t//var Z_NEED_DICT     = 2;\n\t//var Z_ERRNO         = -1;\n\tvar Z_STREAM_ERROR  = -2;\n\tvar Z_DATA_ERROR    = -3;\n\t//var Z_MEM_ERROR     = -4;\n\tvar Z_BUF_ERROR     = -5;\n\t//var Z_VERSION_ERROR = -6;\n\t\n\t\n\t/* compression levels */\n\t//var Z_NO_COMPRESSION      = 0;\n\t//var Z_BEST_SPEED          = 1;\n\t//var Z_BEST_COMPRESSION    = 9;\n\tvar Z_DEFAULT_COMPRESSION = -1;\n\t\n\t\n\tvar Z_FILTERED            = 1;\n\tvar Z_HUFFMAN_ONLY        = 2;\n\tvar Z_RLE                 = 3;\n\tvar Z_FIXED               = 4;\n\tvar Z_DEFAULT_STRATEGY    = 0;\n\t\n\t/* Possible values of the data_type field (though see inflate()) */\n\t//var Z_BINARY              = 0;\n\t//var Z_TEXT                = 1;\n\t//var Z_ASCII               = 1; // = Z_TEXT\n\tvar Z_UNKNOWN             = 2;\n\t\n\t\n\t/* The deflate compression method */\n\tvar Z_DEFLATED  = 8;\n\t\n\t/*============================================================================*/\n\t\n\t\n\tvar MAX_MEM_LEVEL = 9;\n\t/* Maximum value for memLevel in deflateInit2 */\n\tvar MAX_WBITS = 15;\n\t/* 32K LZ77 window */\n\tvar DEF_MEM_LEVEL = 8;\n\t\n\t\n\tvar LENGTH_CODES  = 29;\n\t/* number of length codes, not counting the special END_BLOCK code */\n\tvar LITERALS      = 256;\n\t/* number of literal bytes 0..255 */\n\tvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n\t/* number of Literal or Length codes, including the END_BLOCK code */\n\tvar D_CODES       = 30;\n\t/* number of distance codes */\n\tvar BL_CODES      = 19;\n\t/* number of codes used to transfer the bit lengths */\n\tvar HEAP_SIZE     = 2 * L_CODES + 1;\n\t/* maximum heap size */\n\tvar MAX_BITS  = 15;\n\t/* All codes must not exceed MAX_BITS bits */\n\t\n\tvar MIN_MATCH = 3;\n\tvar MAX_MATCH = 258;\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\t\n\tvar PRESET_DICT = 0x20;\n\t\n\tvar INIT_STATE = 42;\n\tvar EXTRA_STATE = 69;\n\tvar NAME_STATE = 73;\n\tvar COMMENT_STATE = 91;\n\tvar HCRC_STATE = 103;\n\tvar BUSY_STATE = 113;\n\tvar FINISH_STATE = 666;\n\t\n\tvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\n\tvar BS_BLOCK_DONE     = 2; /* block flush performed */\n\tvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\n\tvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\t\n\tvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\t\n\tfunction err(strm, errorCode) {\n\t  strm.msg = msg[errorCode];\n\t  return errorCode;\n\t}\n\t\n\tfunction rank(f) {\n\t  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n\t}\n\t\n\tfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\t\n\t\n\t/* =========================================================================\n\t * Flush as much pending output as possible. All deflate() output goes\n\t * through this function so some applications may wish to modify it\n\t * to avoid allocating a large strm->output buffer and copying into it.\n\t * (See also read_buf()).\n\t */\n\tfunction flush_pending(strm) {\n\t  var s = strm.state;\n\t\n\t  //_tr_flush_bits(s);\n\t  var len = s.pending;\n\t  if (len > strm.avail_out) {\n\t    len = strm.avail_out;\n\t  }\n\t  if (len === 0) { return; }\n\t\n\t  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n\t  strm.next_out += len;\n\t  s.pending_out += len;\n\t  strm.total_out += len;\n\t  strm.avail_out -= len;\n\t  s.pending -= len;\n\t  if (s.pending === 0) {\n\t    s.pending_out = 0;\n\t  }\n\t}\n\t\n\t\n\tfunction flush_block_only(s, last) {\n\t  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n\t  s.block_start = s.strstart;\n\t  flush_pending(s.strm);\n\t}\n\t\n\t\n\tfunction put_byte(s, b) {\n\t  s.pending_buf[s.pending++] = b;\n\t}\n\t\n\t\n\t/* =========================================================================\n\t * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n\t * IN assertion: the stream state is correct and there is enough room in\n\t * pending_buf.\n\t */\n\tfunction putShortMSB(s, b) {\n\t//  put_byte(s, (Byte)(b >> 8));\n\t//  put_byte(s, (Byte)(b & 0xff));\n\t  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n\t  s.pending_buf[s.pending++] = b & 0xff;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Read a new buffer from the current input stream, update the adler32\n\t * and total number of bytes read.  All deflate() input goes through\n\t * this function so some applications may wish to modify it to avoid\n\t * allocating a large strm->input buffer and copying from it.\n\t * (See also flush_pending()).\n\t */\n\tfunction read_buf(strm, buf, start, size) {\n\t  var len = strm.avail_in;\n\t\n\t  if (len > size) { len = size; }\n\t  if (len === 0) { return 0; }\n\t\n\t  strm.avail_in -= len;\n\t\n\t  // zmemcpy(buf, strm->next_in, len);\n\t  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n\t  if (strm.state.wrap === 1) {\n\t    strm.adler = adler32(strm.adler, buf, len, start);\n\t  }\n\t\n\t  else if (strm.state.wrap === 2) {\n\t    strm.adler = crc32(strm.adler, buf, len, start);\n\t  }\n\t\n\t  strm.next_in += len;\n\t  strm.total_in += len;\n\t\n\t  return len;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Set match_start to the longest match starting at the given string and\n\t * return its length. Matches shorter or equal to prev_length are discarded,\n\t * in which case the result is equal to prev_length and match_start is\n\t * garbage.\n\t * IN assertions: cur_match is the head of the hash chain for the current\n\t *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n\t * OUT assertion: the match length is not greater than s->lookahead.\n\t */\n\tfunction longest_match(s, cur_match) {\n\t  var chain_length = s.max_chain_length;      /* max hash chain length */\n\t  var scan = s.strstart; /* current string */\n\t  var match;                       /* matched string */\n\t  var len;                           /* length of current match */\n\t  var best_len = s.prev_length;              /* best match length so far */\n\t  var nice_match = s.nice_match;             /* stop if match long enough */\n\t  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n\t      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\t\n\t  var _win = s.window; // shortcut\n\t\n\t  var wmask = s.w_mask;\n\t  var prev  = s.prev;\n\t\n\t  /* Stop when cur_match becomes <= limit. To simplify the code,\n\t   * we prevent matches with the string of window index 0.\n\t   */\n\t\n\t  var strend = s.strstart + MAX_MATCH;\n\t  var scan_end1  = _win[scan + best_len - 1];\n\t  var scan_end   = _win[scan + best_len];\n\t\n\t  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n\t   * It is easy to get rid of this optimization if necessary.\n\t   */\n\t  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\t\n\t  /* Do not waste too much time if we already have a good match: */\n\t  if (s.prev_length >= s.good_match) {\n\t    chain_length >>= 2;\n\t  }\n\t  /* Do not look for matches beyond the end of the input. This is necessary\n\t   * to make deflate deterministic.\n\t   */\n\t  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\t\n\t  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\t\n\t  do {\n\t    // Assert(cur_match < s->strstart, \"no future\");\n\t    match = cur_match;\n\t\n\t    /* Skip to next match if the match length cannot increase\n\t     * or if the match length is less than 2.  Note that the checks below\n\t     * for insufficient lookahead only occur occasionally for performance\n\t     * reasons.  Therefore uninitialized memory will be accessed, and\n\t     * conditional jumps will be made that depend on those values.\n\t     * However the length of the match is limited to the lookahead, so\n\t     * the output of deflate is not affected by the uninitialized values.\n\t     */\n\t\n\t    if (_win[match + best_len]     !== scan_end  ||\n\t        _win[match + best_len - 1] !== scan_end1 ||\n\t        _win[match]                !== _win[scan] ||\n\t        _win[++match]              !== _win[scan + 1]) {\n\t      continue;\n\t    }\n\t\n\t    /* The check at best_len-1 can be removed because it will be made\n\t     * again later. (This heuristic is not always a win.)\n\t     * It is not necessary to compare scan[2] and match[2] since they\n\t     * are always equal when the other bytes match, given that\n\t     * the hash keys are equal and that HASH_BITS >= 8.\n\t     */\n\t    scan += 2;\n\t    match++;\n\t    // Assert(*scan == *match, \"match[2]?\");\n\t\n\t    /* We check for insufficient lookahead only every 8th comparison;\n\t     * the 256th check will be made at strstart+258.\n\t     */\n\t    do {\n\t      /*jshint noempty:false*/\n\t    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             scan < strend);\n\t\n\t    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\t\n\t    len = MAX_MATCH - (strend - scan);\n\t    scan = strend - MAX_MATCH;\n\t\n\t    if (len > best_len) {\n\t      s.match_start = cur_match;\n\t      best_len = len;\n\t      if (len >= nice_match) {\n\t        break;\n\t      }\n\t      scan_end1  = _win[scan + best_len - 1];\n\t      scan_end   = _win[scan + best_len];\n\t    }\n\t  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\t\n\t  if (best_len <= s.lookahead) {\n\t    return best_len;\n\t  }\n\t  return s.lookahead;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Fill the window when the lookahead becomes insufficient.\n\t * Updates strstart and lookahead.\n\t *\n\t * IN assertion: lookahead < MIN_LOOKAHEAD\n\t * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n\t *    At least one byte has been read, or avail_in == 0; reads are\n\t *    performed for at least two bytes (required for the zip translate_eol\n\t *    option -- not supported here).\n\t */\n\tfunction fill_window(s) {\n\t  var _w_size = s.w_size;\n\t  var p, n, m, more, str;\n\t\n\t  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\t\n\t  do {\n\t    more = s.window_size - s.lookahead - s.strstart;\n\t\n\t    // JS ints have 32 bit, block below not needed\n\t    /* Deal with !@#$% 64K limit: */\n\t    //if (sizeof(int) <= 2) {\n\t    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n\t    //        more = wsize;\n\t    //\n\t    //  } else if (more == (unsigned)(-1)) {\n\t    //        /* Very unlikely, but possible on 16 bit machine if\n\t    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n\t    //         */\n\t    //        more--;\n\t    //    }\n\t    //}\n\t\n\t\n\t    /* If the window is almost full and there is insufficient lookahead,\n\t     * move the upper half to the lower one to make room in the upper half.\n\t     */\n\t    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\t\n\t      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n\t      s.match_start -= _w_size;\n\t      s.strstart -= _w_size;\n\t      /* we now have strstart >= MAX_DIST */\n\t      s.block_start -= _w_size;\n\t\n\t      /* Slide the hash table (could be avoided with 32 bit values\n\t       at the expense of memory usage). We slide even when level == 0\n\t       to keep the hash table consistent if we switch back to level > 0\n\t       later. (Using level 0 permanently is not an optimal usage of\n\t       zlib, so we don't care about this pathological case.)\n\t       */\n\t\n\t      n = s.hash_size;\n\t      p = n;\n\t      do {\n\t        m = s.head[--p];\n\t        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n\t      } while (--n);\n\t\n\t      n = _w_size;\n\t      p = n;\n\t      do {\n\t        m = s.prev[--p];\n\t        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n\t        /* If n is not on any hash chain, prev[n] is garbage but\n\t         * its value will never be used.\n\t         */\n\t      } while (--n);\n\t\n\t      more += _w_size;\n\t    }\n\t    if (s.strm.avail_in === 0) {\n\t      break;\n\t    }\n\t\n\t    /* If there was no sliding:\n\t     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n\t     *    more == window_size - lookahead - strstart\n\t     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n\t     * => more >= window_size - 2*WSIZE + 2\n\t     * In the BIG_MEM or MMAP case (not yet supported),\n\t     *   window_size == input_size + MIN_LOOKAHEAD  &&\n\t     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n\t     * Otherwise, window_size == 2*WSIZE so more >= 2.\n\t     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\t     */\n\t    //Assert(more >= 2, \"more < 2\");\n\t    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n\t    s.lookahead += n;\n\t\n\t    /* Initialize the hash value now that we have some input: */\n\t    if (s.lookahead + s.insert >= MIN_MATCH) {\n\t      str = s.strstart - s.insert;\n\t      s.ins_h = s.window[str];\n\t\n\t      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n\t      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n\t//#if MIN_MATCH != 3\n\t//        Call update_hash() MIN_MATCH-3 more times\n\t//#endif\n\t      while (s.insert) {\n\t        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n\t        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\t\n\t        s.prev[str & s.w_mask] = s.head[s.ins_h];\n\t        s.head[s.ins_h] = str;\n\t        str++;\n\t        s.insert--;\n\t        if (s.lookahead + s.insert < MIN_MATCH) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n\t     * but this is not important since only literal bytes will be emitted.\n\t     */\n\t\n\t  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\t\n\t  /* If the WIN_INIT bytes after the end of the current data have never been\n\t   * written, then zero those bytes in order to avoid memory check reports of\n\t   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n\t   * the longest match routines.  Update the high water mark for the next\n\t   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n\t   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n\t   */\n\t//  if (s.high_water < s.window_size) {\n\t//    var curr = s.strstart + s.lookahead;\n\t//    var init = 0;\n\t//\n\t//    if (s.high_water < curr) {\n\t//      /* Previous high water mark below current data -- zero WIN_INIT\n\t//       * bytes or up to end of window, whichever is less.\n\t//       */\n\t//      init = s.window_size - curr;\n\t//      if (init > WIN_INIT)\n\t//        init = WIN_INIT;\n\t//      zmemzero(s->window + curr, (unsigned)init);\n\t//      s->high_water = curr + init;\n\t//    }\n\t//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n\t//      /* High water mark at or above current data, but below current data\n\t//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n\t//       * to end of window, whichever is less.\n\t//       */\n\t//      init = (ulg)curr + WIN_INIT - s->high_water;\n\t//      if (init > s->window_size - s->high_water)\n\t//        init = s->window_size - s->high_water;\n\t//      zmemzero(s->window + s->high_water, (unsigned)init);\n\t//      s->high_water += init;\n\t//    }\n\t//  }\n\t//\n\t//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n\t//    \"not enough room for search\");\n\t}\n\t\n\t/* ===========================================================================\n\t * Copy without compression as much as possible from the input stream, return\n\t * the current block state.\n\t * This function does not insert new strings in the dictionary since\n\t * uncompressible data is probably not useful. This function is used\n\t * only for the level=0 compression option.\n\t * NOTE: this function should be optimized to avoid extra copying from\n\t * window to pending_buf.\n\t */\n\tfunction deflate_stored(s, flush) {\n\t  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n\t   * to pending_buf_size, and each stored block has a 5 byte header:\n\t   */\n\t  var max_block_size = 0xffff;\n\t\n\t  if (max_block_size > s.pending_buf_size - 5) {\n\t    max_block_size = s.pending_buf_size - 5;\n\t  }\n\t\n\t  /* Copy as much as possible from input to output: */\n\t  for (;;) {\n\t    /* Fill the window as much as possible: */\n\t    if (s.lookahead <= 1) {\n\t\n\t      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n\t      //  s->block_start >= (long)s->w_size, \"slide too late\");\n\t//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n\t//        s.block_start >= s.w_size)) {\n\t//        throw  new Error(\"slide too late\");\n\t//      }\n\t\n\t      fill_window(s);\n\t      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t\n\t      if (s.lookahead === 0) {\n\t        break;\n\t      }\n\t      /* flush the current block */\n\t    }\n\t    //Assert(s->block_start >= 0L, \"block gone\");\n\t//    if (s.block_start < 0) throw new Error(\"block gone\");\n\t\n\t    s.strstart += s.lookahead;\n\t    s.lookahead = 0;\n\t\n\t    /* Emit a stored block if pending_buf will be full: */\n\t    var max_start = s.block_start + max_block_size;\n\t\n\t    if (s.strstart === 0 || s.strstart >= max_start) {\n\t      /* strstart == 0 is possible when wraparound on 16-bit machine */\n\t      s.lookahead = s.strstart - max_start;\n\t      s.strstart = max_start;\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t\n\t\n\t    }\n\t    /* Flush if we may have to slide, otherwise block_start may become\n\t     * negative and the data will be gone:\n\t     */\n\t    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t\n\t  s.insert = 0;\n\t\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t\n\t  if (s.strstart > s.block_start) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t\n\t  return BS_NEED_MORE;\n\t}\n\t\n\t/* ===========================================================================\n\t * Compress as much as possible from the input stream, return the current\n\t * block state.\n\t * This function does not perform lazy evaluation of matches and inserts\n\t * new strings in the dictionary only for unmatched strings or for short\n\t * matches. It is used only for the fast compression options.\n\t */\n\tfunction deflate_fast(s, flush) {\n\t  var hash_head;        /* head of the hash chain */\n\t  var bflush;           /* set if current block must be flushed */\n\t\n\t  for (;;) {\n\t    /* Make sure that we always have enough lookahead, except\n\t     * at the end of the input file. We need MAX_MATCH bytes\n\t     * for the next match, plus MIN_MATCH bytes to insert the\n\t     * string following the next match.\n\t     */\n\t    if (s.lookahead < MIN_LOOKAHEAD) {\n\t      fill_window(s);\n\t      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      if (s.lookahead === 0) {\n\t        break; /* flush the current block */\n\t      }\n\t    }\n\t\n\t    /* Insert the string window[strstart .. strstart+2] in the\n\t     * dictionary, and set hash_head to the head of the hash chain:\n\t     */\n\t    hash_head = 0/*NIL*/;\n\t    if (s.lookahead >= MIN_MATCH) {\n\t      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t      s.head[s.ins_h] = s.strstart;\n\t      /***/\n\t    }\n\t\n\t    /* Find the longest match, discarding those <= prev_length.\n\t     * At this point we have always match_length < MIN_MATCH\n\t     */\n\t    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n\t      /* To simplify the code, we prevent matches with the string\n\t       * of window index 0 (in particular we have to avoid a match\n\t       * of the string with itself at the start of the input file).\n\t       */\n\t      s.match_length = longest_match(s, hash_head);\n\t      /* longest_match() sets match_start */\n\t    }\n\t    if (s.match_length >= MIN_MATCH) {\n\t      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\t\n\t      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n\t                     s.match_length - MIN_MATCH, bflush); ***/\n\t      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\t\n\t      s.lookahead -= s.match_length;\n\t\n\t      /* Insert new strings in the hash table only if the match length\n\t       * is not too large. This saves time but degrades compression.\n\t       */\n\t      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n\t        s.match_length--; /* string at strstart already in table */\n\t        do {\n\t          s.strstart++;\n\t          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t          s.head[s.ins_h] = s.strstart;\n\t          /***/\n\t          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t           * always MIN_MATCH bytes ahead.\n\t           */\n\t        } while (--s.match_length !== 0);\n\t        s.strstart++;\n\t      } else\n\t      {\n\t        s.strstart += s.match_length;\n\t        s.match_length = 0;\n\t        s.ins_h = s.window[s.strstart];\n\t        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n\t        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\t\n\t//#if MIN_MATCH != 3\n\t//                Call UPDATE_HASH() MIN_MATCH-3 more times\n\t//#endif\n\t        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n\t         * matter since it will be recomputed at next deflate call.\n\t         */\n\t      }\n\t    } else {\n\t      /* No match, output a literal byte */\n\t      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n\t      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n\t      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\t\n\t      s.lookahead--;\n\t      s.strstart++;\n\t    }\n\t    if (bflush) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t/* ===========================================================================\n\t * Same as above, but achieves better compression. We use a lazy\n\t * evaluation for matches: a match is finally adopted only if there is\n\t * no better match at the next window position.\n\t */\n\tfunction deflate_slow(s, flush) {\n\t  var hash_head;          /* head of hash chain */\n\t  var bflush;              /* set if current block must be flushed */\n\t\n\t  var max_insert;\n\t\n\t  /* Process the input block. */\n\t  for (;;) {\n\t    /* Make sure that we always have enough lookahead, except\n\t     * at the end of the input file. We need MAX_MATCH bytes\n\t     * for the next match, plus MIN_MATCH bytes to insert the\n\t     * string following the next match.\n\t     */\n\t    if (s.lookahead < MIN_LOOKAHEAD) {\n\t      fill_window(s);\n\t      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      if (s.lookahead === 0) { break; } /* flush the current block */\n\t    }\n\t\n\t    /* Insert the string window[strstart .. strstart+2] in the\n\t     * dictionary, and set hash_head to the head of the hash chain:\n\t     */\n\t    hash_head = 0/*NIL*/;\n\t    if (s.lookahead >= MIN_MATCH) {\n\t      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t      s.head[s.ins_h] = s.strstart;\n\t      /***/\n\t    }\n\t\n\t    /* Find the longest match, discarding those <= prev_length.\n\t     */\n\t    s.prev_length = s.match_length;\n\t    s.prev_match = s.match_start;\n\t    s.match_length = MIN_MATCH - 1;\n\t\n\t    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n\t        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n\t      /* To simplify the code, we prevent matches with the string\n\t       * of window index 0 (in particular we have to avoid a match\n\t       * of the string with itself at the start of the input file).\n\t       */\n\t      s.match_length = longest_match(s, hash_head);\n\t      /* longest_match() sets match_start */\n\t\n\t      if (s.match_length <= 5 &&\n\t         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\t\n\t        /* If prev_match is also MIN_MATCH, match_start is garbage\n\t         * but we will ignore the current match anyway.\n\t         */\n\t        s.match_length = MIN_MATCH - 1;\n\t      }\n\t    }\n\t    /* If there was a match at the previous step and the current\n\t     * match is not better, output the previous match:\n\t     */\n\t    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n\t      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n\t      /* Do not insert strings in hash table beyond this. */\n\t\n\t      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\t\n\t      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n\t                     s.prev_length - MIN_MATCH, bflush);***/\n\t      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n\t      /* Insert in hash table all strings up to the end of the match.\n\t       * strstart-1 and strstart are already inserted. If there is not\n\t       * enough lookahead, the last two strings are not inserted in\n\t       * the hash table.\n\t       */\n\t      s.lookahead -= s.prev_length - 1;\n\t      s.prev_length -= 2;\n\t      do {\n\t        if (++s.strstart <= max_insert) {\n\t          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t          s.head[s.ins_h] = s.strstart;\n\t          /***/\n\t        }\n\t      } while (--s.prev_length !== 0);\n\t      s.match_available = 0;\n\t      s.match_length = MIN_MATCH - 1;\n\t      s.strstart++;\n\t\n\t      if (bflush) {\n\t        /*** FLUSH_BLOCK(s, 0); ***/\n\t        flush_block_only(s, false);\n\t        if (s.strm.avail_out === 0) {\n\t          return BS_NEED_MORE;\n\t        }\n\t        /***/\n\t      }\n\t\n\t    } else if (s.match_available) {\n\t      /* If there was no match at the previous position, output a\n\t       * single literal. If there was a match but the current match\n\t       * is longer, truncate the previous match to a single literal.\n\t       */\n\t      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n\t      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n\t      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\t\n\t      if (bflush) {\n\t        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n\t        flush_block_only(s, false);\n\t        /***/\n\t      }\n\t      s.strstart++;\n\t      s.lookahead--;\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t    } else {\n\t      /* There is no previous match to compare with, wait for\n\t       * the next step to decide.\n\t       */\n\t      s.match_available = 1;\n\t      s.strstart++;\n\t      s.lookahead--;\n\t    }\n\t  }\n\t  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n\t  if (s.match_available) {\n\t    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n\t    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n\t    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\t\n\t    s.match_available = 0;\n\t  }\n\t  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n\t * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n\t * deflate switches away from Z_RLE.)\n\t */\n\tfunction deflate_rle(s, flush) {\n\t  var bflush;            /* set if current block must be flushed */\n\t  var prev;              /* byte at distance one to match */\n\t  var scan, strend;      /* scan goes up to strend for length of run */\n\t\n\t  var _win = s.window;\n\t\n\t  for (;;) {\n\t    /* Make sure that we always have enough lookahead, except\n\t     * at the end of the input file. We need MAX_MATCH bytes\n\t     * for the longest run, plus one for the unrolled loop.\n\t     */\n\t    if (s.lookahead <= MAX_MATCH) {\n\t      fill_window(s);\n\t      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      if (s.lookahead === 0) { break; } /* flush the current block */\n\t    }\n\t\n\t    /* See how many times the previous byte repeats */\n\t    s.match_length = 0;\n\t    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n\t      scan = s.strstart - 1;\n\t      prev = _win[scan];\n\t      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n\t        strend = s.strstart + MAX_MATCH;\n\t        do {\n\t          /*jshint noempty:false*/\n\t        } while (prev === _win[++scan] && prev === _win[++scan] &&\n\t                 prev === _win[++scan] && prev === _win[++scan] &&\n\t                 prev === _win[++scan] && prev === _win[++scan] &&\n\t                 prev === _win[++scan] && prev === _win[++scan] &&\n\t                 scan < strend);\n\t        s.match_length = MAX_MATCH - (strend - scan);\n\t        if (s.match_length > s.lookahead) {\n\t          s.match_length = s.lookahead;\n\t        }\n\t      }\n\t      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n\t    }\n\t\n\t    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n\t    if (s.match_length >= MIN_MATCH) {\n\t      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\t\n\t      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n\t      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\t\n\t      s.lookahead -= s.match_length;\n\t      s.strstart += s.match_length;\n\t      s.match_length = 0;\n\t    } else {\n\t      /* No match, output a literal byte */\n\t      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n\t      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n\t      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\t\n\t      s.lookahead--;\n\t      s.strstart++;\n\t    }\n\t    if (bflush) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t  s.insert = 0;\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t/* ===========================================================================\n\t * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n\t * (It will be regenerated if this run of deflate switches away from Huffman.)\n\t */\n\tfunction deflate_huff(s, flush) {\n\t  var bflush;             /* set if current block must be flushed */\n\t\n\t  for (;;) {\n\t    /* Make sure that we have a literal to write. */\n\t    if (s.lookahead === 0) {\n\t      fill_window(s);\n\t      if (s.lookahead === 0) {\n\t        if (flush === Z_NO_FLUSH) {\n\t          return BS_NEED_MORE;\n\t        }\n\t        break;      /* flush the current block */\n\t      }\n\t    }\n\t\n\t    /* Output a literal byte */\n\t    s.match_length = 0;\n\t    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n\t    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n\t    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\t    s.lookahead--;\n\t    s.strstart++;\n\t    if (bflush) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t  s.insert = 0;\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t/* Values for max_lazy_match, good_match and max_chain_length, depending on\n\t * the desired pack level (0..9). The values given below have been tuned to\n\t * exclude worst case performance for pathological files. Better values may be\n\t * found for specific files.\n\t */\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\t  this.good_length = good_length;\n\t  this.max_lazy = max_lazy;\n\t  this.nice_length = nice_length;\n\t  this.max_chain = max_chain;\n\t  this.func = func;\n\t}\n\t\n\tvar configuration_table;\n\t\n\tconfiguration_table = [\n\t  /*      good lazy nice chain */\n\t  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n\t  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n\t  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n\t  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\t\n\t  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n\t  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n\t  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n\t  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n\t  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n\t  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n\t];\n\t\n\t\n\t/* ===========================================================================\n\t * Initialize the \"longest match\" routines for a new zlib stream\n\t */\n\tfunction lm_init(s) {\n\t  s.window_size = 2 * s.w_size;\n\t\n\t  /*** CLEAR_HASH(s); ***/\n\t  zero(s.head); // Fill with NIL (= 0);\n\t\n\t  /* Set the default configuration parameters:\n\t   */\n\t  s.max_lazy_match = configuration_table[s.level].max_lazy;\n\t  s.good_match = configuration_table[s.level].good_length;\n\t  s.nice_match = configuration_table[s.level].nice_length;\n\t  s.max_chain_length = configuration_table[s.level].max_chain;\n\t\n\t  s.strstart = 0;\n\t  s.block_start = 0;\n\t  s.lookahead = 0;\n\t  s.insert = 0;\n\t  s.match_length = s.prev_length = MIN_MATCH - 1;\n\t  s.match_available = 0;\n\t  s.ins_h = 0;\n\t}\n\t\n\t\n\tfunction DeflateState() {\n\t  this.strm = null;            /* pointer back to this zlib stream */\n\t  this.status = 0;            /* as the name implies */\n\t  this.pending_buf = null;      /* output still pending */\n\t  this.pending_buf_size = 0;  /* size of pending_buf */\n\t  this.pending_out = 0;       /* next pending byte to output to the stream */\n\t  this.pending = 0;           /* nb of bytes in the pending buffer */\n\t  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n\t  this.gzhead = null;         /* gzip header information to write */\n\t  this.gzindex = 0;           /* where in extra, name, or comment */\n\t  this.method = Z_DEFLATED; /* can only be DEFLATED */\n\t  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\t\n\t  this.w_size = 0;  /* LZ77 window size (32K by default) */\n\t  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n\t  this.w_mask = 0;  /* w_size - 1 */\n\t\n\t  this.window = null;\n\t  /* Sliding window. Input bytes are read into the second half of the window,\n\t   * and move to the first half later to keep a dictionary of at least wSize\n\t   * bytes. With this organization, matches are limited to a distance of\n\t   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n\t   * performed with a length multiple of the block size.\n\t   */\n\t\n\t  this.window_size = 0;\n\t  /* Actual size of window: 2*wSize, except when the user input buffer\n\t   * is directly used as sliding window.\n\t   */\n\t\n\t  this.prev = null;\n\t  /* Link to older string with same hash index. To limit the size of this\n\t   * array to 64K, this link is maintained only for the last 32K strings.\n\t   * An index in this array is thus a window index modulo 32K.\n\t   */\n\t\n\t  this.head = null;   /* Heads of the hash chains or NIL. */\n\t\n\t  this.ins_h = 0;       /* hash index of string to be inserted */\n\t  this.hash_size = 0;   /* number of elements in hash table */\n\t  this.hash_bits = 0;   /* log2(hash_size) */\n\t  this.hash_mask = 0;   /* hash_size-1 */\n\t\n\t  this.hash_shift = 0;\n\t  /* Number of bits by which ins_h must be shifted at each input\n\t   * step. It must be such that after MIN_MATCH steps, the oldest\n\t   * byte no longer takes part in the hash key, that is:\n\t   *   hash_shift * MIN_MATCH >= hash_bits\n\t   */\n\t\n\t  this.block_start = 0;\n\t  /* Window position at the beginning of the current output block. Gets\n\t   * negative when the window is moved backwards.\n\t   */\n\t\n\t  this.match_length = 0;      /* length of best match */\n\t  this.prev_match = 0;        /* previous match */\n\t  this.match_available = 0;   /* set if previous match exists */\n\t  this.strstart = 0;          /* start of string to insert */\n\t  this.match_start = 0;       /* start of matching string */\n\t  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\t\n\t  this.prev_length = 0;\n\t  /* Length of the best match at previous step. Matches not greater than this\n\t   * are discarded. This is used in the lazy match evaluation.\n\t   */\n\t\n\t  this.max_chain_length = 0;\n\t  /* To speed up deflation, hash chains are never searched beyond this\n\t   * length.  A higher limit improves compression ratio but degrades the\n\t   * speed.\n\t   */\n\t\n\t  this.max_lazy_match = 0;\n\t  /* Attempt to find a better match only when the current match is strictly\n\t   * smaller than this value. This mechanism is used only for compression\n\t   * levels >= 4.\n\t   */\n\t  // That's alias to max_lazy_match, don't use directly\n\t  //this.max_insert_length = 0;\n\t  /* Insert new strings in the hash table only if the match length is not\n\t   * greater than this length. This saves time but degrades compression.\n\t   * max_insert_length is used only for compression levels <= 3.\n\t   */\n\t\n\t  this.level = 0;     /* compression level (1..9) */\n\t  this.strategy = 0;  /* favor or force Huffman coding*/\n\t\n\t  this.good_match = 0;\n\t  /* Use a faster search when the previous match is longer than this */\n\t\n\t  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\t\n\t              /* used by trees.c: */\n\t\n\t  /* Didn't use ct_data typedef below to suppress compiler warning */\n\t\n\t  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n\t  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n\t  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\t\n\t  // Use flat array of DOUBLE size, with interleaved fata,\n\t  // because JS does not support effective\n\t  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n\t  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n\t  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n\t  zero(this.dyn_ltree);\n\t  zero(this.dyn_dtree);\n\t  zero(this.bl_tree);\n\t\n\t  this.l_desc   = null;         /* desc. for literal tree */\n\t  this.d_desc   = null;         /* desc. for distance tree */\n\t  this.bl_desc  = null;         /* desc. for bit length tree */\n\t\n\t  //ush bl_count[MAX_BITS+1];\n\t  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n\t  /* number of codes at each bit length for an optimal tree */\n\t\n\t  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n\t  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n\t  zero(this.heap);\n\t\n\t  this.heap_len = 0;               /* number of elements in the heap */\n\t  this.heap_max = 0;               /* element of largest frequency */\n\t  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n\t   * The same heap array is used to build all trees.\n\t   */\n\t\n\t  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n\t  zero(this.depth);\n\t  /* Depth of each subtree used as tie breaker for trees of equal frequency\n\t   */\n\t\n\t  this.l_buf = 0;          /* buffer index for literals or lengths */\n\t\n\t  this.lit_bufsize = 0;\n\t  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n\t   * limiting lit_bufsize to 64K:\n\t   *   - frequencies can be kept in 16 bit counters\n\t   *   - if compression is not successful for the first block, all input\n\t   *     data is still in the window so we can still emit a stored block even\n\t   *     when input comes from standard input.  (This can also be done for\n\t   *     all blocks if lit_bufsize is not greater than 32K.)\n\t   *   - if compression is not successful for a file smaller than 64K, we can\n\t   *     even emit a stored file instead of a stored block (saving 5 bytes).\n\t   *     This is applicable only for zip (not gzip or zlib).\n\t   *   - creating new Huffman trees less frequently may not provide fast\n\t   *     adaptation to changes in the input data statistics. (Take for\n\t   *     example a binary file with poorly compressible code followed by\n\t   *     a highly compressible string table.) Smaller buffer sizes give\n\t   *     fast adaptation but have of course the overhead of transmitting\n\t   *     trees more frequently.\n\t   *   - I can't count above 4\n\t   */\n\t\n\t  this.last_lit = 0;      /* running index in l_buf */\n\t\n\t  this.d_buf = 0;\n\t  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n\t   * the same number of elements. To use different lengths, an extra flag\n\t   * array would be necessary.\n\t   */\n\t\n\t  this.opt_len = 0;       /* bit length of current block with optimal trees */\n\t  this.static_len = 0;    /* bit length of current block with static trees */\n\t  this.matches = 0;       /* number of string matches in current block */\n\t  this.insert = 0;        /* bytes at end of window left to insert */\n\t\n\t\n\t  this.bi_buf = 0;\n\t  /* Output buffer. bits are inserted starting at the bottom (least\n\t   * significant bits).\n\t   */\n\t  this.bi_valid = 0;\n\t  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n\t   * are always zero.\n\t   */\n\t\n\t  // Used for window memory init. We safely ignore it for JS. That makes\n\t  // sense only for pointers and memory check tools.\n\t  //this.high_water = 0;\n\t  /* High water mark offset in window for initialized bytes -- bytes above\n\t   * this are set to zero in order to avoid memory check warnings when\n\t   * longest match routines access bytes past the input.  This is then\n\t   * updated to the new high water mark.\n\t   */\n\t}\n\t\n\t\n\tfunction deflateResetKeep(strm) {\n\t  var s;\n\t\n\t  if (!strm || !strm.state) {\n\t    return err(strm, Z_STREAM_ERROR);\n\t  }\n\t\n\t  strm.total_in = strm.total_out = 0;\n\t  strm.data_type = Z_UNKNOWN;\n\t\n\t  s = strm.state;\n\t  s.pending = 0;\n\t  s.pending_out = 0;\n\t\n\t  if (s.wrap < 0) {\n\t    s.wrap = -s.wrap;\n\t    /* was made negative by deflate(..., Z_FINISH); */\n\t  }\n\t  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n\t  strm.adler = (s.wrap === 2) ?\n\t    0  // crc32(0, Z_NULL, 0)\n\t  :\n\t    1; // adler32(0, Z_NULL, 0)\n\t  s.last_flush = Z_NO_FLUSH;\n\t  trees._tr_init(s);\n\t  return Z_OK;\n\t}\n\t\n\t\n\tfunction deflateReset(strm) {\n\t  var ret = deflateResetKeep(strm);\n\t  if (ret === Z_OK) {\n\t    lm_init(strm.state);\n\t  }\n\t  return ret;\n\t}\n\t\n\t\n\tfunction deflateSetHeader(strm, head) {\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n\t  strm.state.gzhead = head;\n\t  return Z_OK;\n\t}\n\t\n\t\n\tfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n\t  if (!strm) { // === Z_NULL\n\t    return Z_STREAM_ERROR;\n\t  }\n\t  var wrap = 1;\n\t\n\t  if (level === Z_DEFAULT_COMPRESSION) {\n\t    level = 6;\n\t  }\n\t\n\t  if (windowBits < 0) { /* suppress zlib wrapper */\n\t    wrap = 0;\n\t    windowBits = -windowBits;\n\t  }\n\t\n\t  else if (windowBits > 15) {\n\t    wrap = 2;           /* write gzip wrapper instead */\n\t    windowBits -= 16;\n\t  }\n\t\n\t\n\t  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n\t    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n\t    strategy < 0 || strategy > Z_FIXED) {\n\t    return err(strm, Z_STREAM_ERROR);\n\t  }\n\t\n\t\n\t  if (windowBits === 8) {\n\t    windowBits = 9;\n\t  }\n\t  /* until 256-byte window bug fixed */\n\t\n\t  var s = new DeflateState();\n\t\n\t  strm.state = s;\n\t  s.strm = strm;\n\t\n\t  s.wrap = wrap;\n\t  s.gzhead = null;\n\t  s.w_bits = windowBits;\n\t  s.w_size = 1 << s.w_bits;\n\t  s.w_mask = s.w_size - 1;\n\t\n\t  s.hash_bits = memLevel + 7;\n\t  s.hash_size = 1 << s.hash_bits;\n\t  s.hash_mask = s.hash_size - 1;\n\t  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\t\n\t  s.window = new utils.Buf8(s.w_size * 2);\n\t  s.head = new utils.Buf16(s.hash_size);\n\t  s.prev = new utils.Buf16(s.w_size);\n\t\n\t  // Don't need mem init magic for JS.\n\t  //s.high_water = 0;  /* nothing written to s->window yet */\n\t\n\t  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\t\n\t  s.pending_buf_size = s.lit_bufsize * 4;\n\t  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\t\n\t  s.d_buf = s.lit_bufsize >> 1;\n\t  s.l_buf = (1 + 2) * s.lit_bufsize;\n\t\n\t  s.level = level;\n\t  s.strategy = strategy;\n\t  s.method = method;\n\t\n\t  return deflateReset(strm);\n\t}\n\t\n\tfunction deflateInit(strm, level) {\n\t  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n\t}\n\t\n\t\n\tfunction deflate(strm, flush) {\n\t  var old_flush, s;\n\t  var beg, val; // for gzip header write only\n\t\n\t  if (!strm || !strm.state ||\n\t    flush > Z_BLOCK || flush < 0) {\n\t    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n\t  }\n\t\n\t  s = strm.state;\n\t\n\t  if (!strm.output ||\n\t      (!strm.input && strm.avail_in !== 0) ||\n\t      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n\t    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n\t  }\n\t\n\t  s.strm = strm; /* just in case */\n\t  old_flush = s.last_flush;\n\t  s.last_flush = flush;\n\t\n\t  /* Write the header */\n\t  if (s.status === INIT_STATE) {\n\t\n\t    if (s.wrap === 2) { // GZIP header\n\t      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n\t      put_byte(s, 31);\n\t      put_byte(s, 139);\n\t      put_byte(s, 8);\n\t      if (!s.gzhead) { // s->gzhead == Z_NULL\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, s.level === 9 ? 2 :\n\t                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n\t                     4 : 0));\n\t        put_byte(s, OS_CODE);\n\t        s.status = BUSY_STATE;\n\t      }\n\t      else {\n\t        put_byte(s, (s.gzhead.text ? 1 : 0) +\n\t                    (s.gzhead.hcrc ? 2 : 0) +\n\t                    (!s.gzhead.extra ? 0 : 4) +\n\t                    (!s.gzhead.name ? 0 : 8) +\n\t                    (!s.gzhead.comment ? 0 : 16)\n\t                );\n\t        put_byte(s, s.gzhead.time & 0xff);\n\t        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n\t        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n\t        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n\t        put_byte(s, s.level === 9 ? 2 :\n\t                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n\t                     4 : 0));\n\t        put_byte(s, s.gzhead.os & 0xff);\n\t        if (s.gzhead.extra && s.gzhead.extra.length) {\n\t          put_byte(s, s.gzhead.extra.length & 0xff);\n\t          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n\t        }\n\t        if (s.gzhead.hcrc) {\n\t          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n\t        }\n\t        s.gzindex = 0;\n\t        s.status = EXTRA_STATE;\n\t      }\n\t    }\n\t    else // DEFLATE header\n\t    {\n\t      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n\t      var level_flags = -1;\n\t\n\t      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n\t        level_flags = 0;\n\t      } else if (s.level < 6) {\n\t        level_flags = 1;\n\t      } else if (s.level === 6) {\n\t        level_flags = 2;\n\t      } else {\n\t        level_flags = 3;\n\t      }\n\t      header |= (level_flags << 6);\n\t      if (s.strstart !== 0) { header |= PRESET_DICT; }\n\t      header += 31 - (header % 31);\n\t\n\t      s.status = BUSY_STATE;\n\t      putShortMSB(s, header);\n\t\n\t      /* Save the adler32 of the preset dictionary: */\n\t      if (s.strstart !== 0) {\n\t        putShortMSB(s, strm.adler >>> 16);\n\t        putShortMSB(s, strm.adler & 0xffff);\n\t      }\n\t      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n\t    }\n\t  }\n\t\n\t//#ifdef GZIP\n\t  if (s.status === EXTRA_STATE) {\n\t    if (s.gzhead.extra/* != Z_NULL*/) {\n\t      beg = s.pending;  /* start of bytes to update crc */\n\t\n\t      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n\t        if (s.pending === s.pending_buf_size) {\n\t          if (s.gzhead.hcrc && s.pending > beg) {\n\t            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t          }\n\t          flush_pending(strm);\n\t          beg = s.pending;\n\t          if (s.pending === s.pending_buf_size) {\n\t            break;\n\t          }\n\t        }\n\t        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n\t        s.gzindex++;\n\t      }\n\t      if (s.gzhead.hcrc && s.pending > beg) {\n\t        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t      }\n\t      if (s.gzindex === s.gzhead.extra.length) {\n\t        s.gzindex = 0;\n\t        s.status = NAME_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = NAME_STATE;\n\t    }\n\t  }\n\t  if (s.status === NAME_STATE) {\n\t    if (s.gzhead.name/* != Z_NULL*/) {\n\t      beg = s.pending;  /* start of bytes to update crc */\n\t      //int val;\n\t\n\t      do {\n\t        if (s.pending === s.pending_buf_size) {\n\t          if (s.gzhead.hcrc && s.pending > beg) {\n\t            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t          }\n\t          flush_pending(strm);\n\t          beg = s.pending;\n\t          if (s.pending === s.pending_buf_size) {\n\t            val = 1;\n\t            break;\n\t          }\n\t        }\n\t        // JS specific: little magic to add zero terminator to end of string\n\t        if (s.gzindex < s.gzhead.name.length) {\n\t          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n\t        } else {\n\t          val = 0;\n\t        }\n\t        put_byte(s, val);\n\t      } while (val !== 0);\n\t\n\t      if (s.gzhead.hcrc && s.pending > beg) {\n\t        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t      }\n\t      if (val === 0) {\n\t        s.gzindex = 0;\n\t        s.status = COMMENT_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = COMMENT_STATE;\n\t    }\n\t  }\n\t  if (s.status === COMMENT_STATE) {\n\t    if (s.gzhead.comment/* != Z_NULL*/) {\n\t      beg = s.pending;  /* start of bytes to update crc */\n\t      //int val;\n\t\n\t      do {\n\t        if (s.pending === s.pending_buf_size) {\n\t          if (s.gzhead.hcrc && s.pending > beg) {\n\t            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t          }\n\t          flush_pending(strm);\n\t          beg = s.pending;\n\t          if (s.pending === s.pending_buf_size) {\n\t            val = 1;\n\t            break;\n\t          }\n\t        }\n\t        // JS specific: little magic to add zero terminator to end of string\n\t        if (s.gzindex < s.gzhead.comment.length) {\n\t          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n\t        } else {\n\t          val = 0;\n\t        }\n\t        put_byte(s, val);\n\t      } while (val !== 0);\n\t\n\t      if (s.gzhead.hcrc && s.pending > beg) {\n\t        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t      }\n\t      if (val === 0) {\n\t        s.status = HCRC_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = HCRC_STATE;\n\t    }\n\t  }\n\t  if (s.status === HCRC_STATE) {\n\t    if (s.gzhead.hcrc) {\n\t      if (s.pending + 2 > s.pending_buf_size) {\n\t        flush_pending(strm);\n\t      }\n\t      if (s.pending + 2 <= s.pending_buf_size) {\n\t        put_byte(s, strm.adler & 0xff);\n\t        put_byte(s, (strm.adler >> 8) & 0xff);\n\t        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n\t        s.status = BUSY_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = BUSY_STATE;\n\t    }\n\t  }\n\t//#endif\n\t\n\t  /* Flush as much pending output as possible */\n\t  if (s.pending !== 0) {\n\t    flush_pending(strm);\n\t    if (strm.avail_out === 0) {\n\t      /* Since avail_out is 0, deflate will be called again with\n\t       * more output space, but possibly with both pending and\n\t       * avail_in equal to zero. There won't be anything to do,\n\t       * but this is not an error situation so make sure we\n\t       * return OK instead of BUF_ERROR at next call of deflate:\n\t       */\n\t      s.last_flush = -1;\n\t      return Z_OK;\n\t    }\n\t\n\t    /* Make sure there is something to do and avoid duplicate consecutive\n\t     * flushes. For repeated and useless calls with Z_FINISH, we keep\n\t     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n\t     */\n\t  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n\t    flush !== Z_FINISH) {\n\t    return err(strm, Z_BUF_ERROR);\n\t  }\n\t\n\t  /* User must not provide more input after the first FINISH: */\n\t  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n\t    return err(strm, Z_BUF_ERROR);\n\t  }\n\t\n\t  /* Start a new block or continue the current one.\n\t   */\n\t  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n\t    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n\t    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n\t      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n\t        configuration_table[s.level].func(s, flush));\n\t\n\t    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n\t      s.status = FINISH_STATE;\n\t    }\n\t    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n\t      if (strm.avail_out === 0) {\n\t        s.last_flush = -1;\n\t        /* avoid BUF_ERROR next call, see above */\n\t      }\n\t      return Z_OK;\n\t      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n\t       * of deflate should use the same flush parameter to make sure\n\t       * that the flush is complete. So we don't have to output an\n\t       * empty block here, this will be done at next call. This also\n\t       * ensures that for a very small output buffer, we emit at most\n\t       * one empty block.\n\t       */\n\t    }\n\t    if (bstate === BS_BLOCK_DONE) {\n\t      if (flush === Z_PARTIAL_FLUSH) {\n\t        trees._tr_align(s);\n\t      }\n\t      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\t\n\t        trees._tr_stored_block(s, 0, 0, false);\n\t        /* For a full flush, this empty block will be recognized\n\t         * as a special marker by inflate_sync().\n\t         */\n\t        if (flush === Z_FULL_FLUSH) {\n\t          /*** CLEAR_HASH(s); ***/             /* forget history */\n\t          zero(s.head); // Fill with NIL (= 0);\n\t\n\t          if (s.lookahead === 0) {\n\t            s.strstart = 0;\n\t            s.block_start = 0;\n\t            s.insert = 0;\n\t          }\n\t        }\n\t      }\n\t      flush_pending(strm);\n\t      if (strm.avail_out === 0) {\n\t        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n\t        return Z_OK;\n\t      }\n\t    }\n\t  }\n\t  //Assert(strm->avail_out > 0, \"bug2\");\n\t  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\t\n\t  if (flush !== Z_FINISH) { return Z_OK; }\n\t  if (s.wrap <= 0) { return Z_STREAM_END; }\n\t\n\t  /* Write the trailer */\n\t  if (s.wrap === 2) {\n\t    put_byte(s, strm.adler & 0xff);\n\t    put_byte(s, (strm.adler >> 8) & 0xff);\n\t    put_byte(s, (strm.adler >> 16) & 0xff);\n\t    put_byte(s, (strm.adler >> 24) & 0xff);\n\t    put_byte(s, strm.total_in & 0xff);\n\t    put_byte(s, (strm.total_in >> 8) & 0xff);\n\t    put_byte(s, (strm.total_in >> 16) & 0xff);\n\t    put_byte(s, (strm.total_in >> 24) & 0xff);\n\t  }\n\t  else\n\t  {\n\t    putShortMSB(s, strm.adler >>> 16);\n\t    putShortMSB(s, strm.adler & 0xffff);\n\t  }\n\t\n\t  flush_pending(strm);\n\t  /* If avail_out is zero, the application will call deflate again\n\t   * to flush the rest.\n\t   */\n\t  if (s.wrap > 0) { s.wrap = -s.wrap; }\n\t  /* write the trailer only once! */\n\t  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n\t}\n\t\n\tfunction deflateEnd(strm) {\n\t  var status;\n\t\n\t  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  status = strm.state.status;\n\t  if (status !== INIT_STATE &&\n\t    status !== EXTRA_STATE &&\n\t    status !== NAME_STATE &&\n\t    status !== COMMENT_STATE &&\n\t    status !== HCRC_STATE &&\n\t    status !== BUSY_STATE &&\n\t    status !== FINISH_STATE\n\t  ) {\n\t    return err(strm, Z_STREAM_ERROR);\n\t  }\n\t\n\t  strm.state = null;\n\t\n\t  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n\t}\n\t\n\t\n\t/* =========================================================================\n\t * Initializes the compression dictionary from the given byte\n\t * sequence without producing any compressed output.\n\t */\n\tfunction deflateSetDictionary(strm, dictionary) {\n\t  var dictLength = dictionary.length;\n\t\n\t  var s;\n\t  var str, n;\n\t  var wrap;\n\t  var avail;\n\t  var next;\n\t  var input;\n\t  var tmpDict;\n\t\n\t  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  s = strm.state;\n\t  wrap = s.wrap;\n\t\n\t  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n\t  if (wrap === 1) {\n\t    /* adler32(strm->adler, dictionary, dictLength); */\n\t    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n\t  }\n\t\n\t  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\t\n\t  /* if dictionary would fill window, just replace the history */\n\t  if (dictLength >= s.w_size) {\n\t    if (wrap === 0) {            /* already empty otherwise */\n\t      /*** CLEAR_HASH(s); ***/\n\t      zero(s.head); // Fill with NIL (= 0);\n\t      s.strstart = 0;\n\t      s.block_start = 0;\n\t      s.insert = 0;\n\t    }\n\t    /* use the tail */\n\t    // dictionary = dictionary.slice(dictLength - s.w_size);\n\t    tmpDict = new utils.Buf8(s.w_size);\n\t    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n\t    dictionary = tmpDict;\n\t    dictLength = s.w_size;\n\t  }\n\t  /* insert dictionary into window and hash */\n\t  avail = strm.avail_in;\n\t  next = strm.next_in;\n\t  input = strm.input;\n\t  strm.avail_in = dictLength;\n\t  strm.next_in = 0;\n\t  strm.input = dictionary;\n\t  fill_window(s);\n\t  while (s.lookahead >= MIN_MATCH) {\n\t    str = s.strstart;\n\t    n = s.lookahead - (MIN_MATCH - 1);\n\t    do {\n\t      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n\t      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\t\n\t      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\t\n\t      s.head[s.ins_h] = str;\n\t      str++;\n\t    } while (--n);\n\t    s.strstart = str;\n\t    s.lookahead = MIN_MATCH - 1;\n\t    fill_window(s);\n\t  }\n\t  s.strstart += s.lookahead;\n\t  s.block_start = s.strstart;\n\t  s.insert = s.lookahead;\n\t  s.lookahead = 0;\n\t  s.match_length = s.prev_length = MIN_MATCH - 1;\n\t  s.match_available = 0;\n\t  strm.next_in = next;\n\t  strm.input = input;\n\t  strm.avail_in = avail;\n\t  s.wrap = wrap;\n\t  return Z_OK;\n\t}\n\t\n\t\n\texports.deflateInit = deflateInit;\n\texports.deflateInit2 = deflateInit2;\n\texports.deflateReset = deflateReset;\n\texports.deflateResetKeep = deflateResetKeep;\n\texports.deflateSetHeader = deflateSetHeader;\n\texports.deflate = deflate;\n\texports.deflateEnd = deflateEnd;\n\texports.deflateSetDictionary = deflateSetDictionary;\n\texports.deflateInfo = 'pako deflate (from Nodeca project)';\n\t\n\t/* Not implemented\n\texports.deflateBound = deflateBound;\n\texports.deflateCopy = deflateCopy;\n\texports.deflateParams = deflateParams;\n\texports.deflatePending = deflatePending;\n\texports.deflatePrime = deflatePrime;\n\texports.deflateTune = deflateTune;\n\t*/\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t\n\tvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n\t                (typeof Uint16Array !== 'undefined') &&\n\t                (typeof Int32Array !== 'undefined');\n\t\n\t\n\texports.assign = function (obj /*from1, from2, from3, ...*/) {\n\t  var sources = Array.prototype.slice.call(arguments, 1);\n\t  while (sources.length) {\n\t    var source = sources.shift();\n\t    if (!source) { continue; }\n\t\n\t    if (typeof source !== 'object') {\n\t      throw new TypeError(source + 'must be non-object');\n\t    }\n\t\n\t    for (var p in source) {\n\t      if (source.hasOwnProperty(p)) {\n\t        obj[p] = source[p];\n\t      }\n\t    }\n\t  }\n\t\n\t  return obj;\n\t};\n\t\n\t\n\t// reduce buffer size, avoiding mem copy\n\texports.shrinkBuf = function (buf, size) {\n\t  if (buf.length === size) { return buf; }\n\t  if (buf.subarray) { return buf.subarray(0, size); }\n\t  buf.length = size;\n\t  return buf;\n\t};\n\t\n\t\n\tvar fnTyped = {\n\t  arraySet: function (dest, src, src_offs, len, dest_offs) {\n\t    if (src.subarray && dest.subarray) {\n\t      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n\t      return;\n\t    }\n\t    // Fallback to ordinary array\n\t    for (var i = 0; i < len; i++) {\n\t      dest[dest_offs + i] = src[src_offs + i];\n\t    }\n\t  },\n\t  // Join array of chunks to single array.\n\t  flattenChunks: function (chunks) {\n\t    var i, l, len, pos, chunk, result;\n\t\n\t    // calculate data length\n\t    len = 0;\n\t    for (i = 0, l = chunks.length; i < l; i++) {\n\t      len += chunks[i].length;\n\t    }\n\t\n\t    // join chunks\n\t    result = new Uint8Array(len);\n\t    pos = 0;\n\t    for (i = 0, l = chunks.length; i < l; i++) {\n\t      chunk = chunks[i];\n\t      result.set(chunk, pos);\n\t      pos += chunk.length;\n\t    }\n\t\n\t    return result;\n\t  }\n\t};\n\t\n\tvar fnUntyped = {\n\t  arraySet: function (dest, src, src_offs, len, dest_offs) {\n\t    for (var i = 0; i < len; i++) {\n\t      dest[dest_offs + i] = src[src_offs + i];\n\t    }\n\t  },\n\t  // Join array of chunks to single array.\n\t  flattenChunks: function (chunks) {\n\t    return [].concat.apply([], chunks);\n\t  }\n\t};\n\t\n\t\n\t// Enable/Disable typed arrays use, for testing\n\t//\n\texports.setTyped = function (on) {\n\t  if (on) {\n\t    exports.Buf8  = Uint8Array;\n\t    exports.Buf16 = Uint16Array;\n\t    exports.Buf32 = Int32Array;\n\t    exports.assign(exports, fnTyped);\n\t  } else {\n\t    exports.Buf8  = Array;\n\t    exports.Buf16 = Array;\n\t    exports.Buf32 = Array;\n\t    exports.assign(exports, fnUntyped);\n\t  }\n\t};\n\t\n\texports.setTyped(TYPED_OK);\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar utils = __webpack_require__(35);\n\t\n\t/* Public constants ==========================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\t//var Z_FILTERED          = 1;\n\t//var Z_HUFFMAN_ONLY      = 2;\n\t//var Z_RLE               = 3;\n\tvar Z_FIXED               = 4;\n\t//var Z_DEFAULT_STRATEGY  = 0;\n\t\n\t/* Possible values of the data_type field (though see inflate()) */\n\tvar Z_BINARY              = 0;\n\tvar Z_TEXT                = 1;\n\t//var Z_ASCII             = 1; // = Z_TEXT\n\tvar Z_UNKNOWN             = 2;\n\t\n\t/*============================================================================*/\n\t\n\t\n\tfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\t\n\t// From zutil.h\n\t\n\tvar STORED_BLOCK = 0;\n\tvar STATIC_TREES = 1;\n\tvar DYN_TREES    = 2;\n\t/* The three kinds of block type */\n\t\n\tvar MIN_MATCH    = 3;\n\tvar MAX_MATCH    = 258;\n\t/* The minimum and maximum match lengths */\n\t\n\t// From deflate.h\n\t/* ===========================================================================\n\t * Internal compression state.\n\t */\n\t\n\tvar LENGTH_CODES  = 29;\n\t/* number of length codes, not counting the special END_BLOCK code */\n\t\n\tvar LITERALS      = 256;\n\t/* number of literal bytes 0..255 */\n\t\n\tvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n\t/* number of Literal or Length codes, including the END_BLOCK code */\n\t\n\tvar D_CODES       = 30;\n\t/* number of distance codes */\n\t\n\tvar BL_CODES      = 19;\n\t/* number of codes used to transfer the bit lengths */\n\t\n\tvar HEAP_SIZE     = 2 * L_CODES + 1;\n\t/* maximum heap size */\n\t\n\tvar MAX_BITS      = 15;\n\t/* All codes must not exceed MAX_BITS bits */\n\t\n\tvar Buf_size      = 16;\n\t/* size of bit buffer in bi_buf */\n\t\n\t\n\t/* ===========================================================================\n\t * Constants\n\t */\n\t\n\tvar MAX_BL_BITS = 7;\n\t/* Bit length codes must not exceed MAX_BL_BITS bits */\n\t\n\tvar END_BLOCK   = 256;\n\t/* end of block literal code */\n\t\n\tvar REP_3_6     = 16;\n\t/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\t\n\tvar REPZ_3_10   = 17;\n\t/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\t\n\tvar REPZ_11_138 = 18;\n\t/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\t\n\t/* eslint-disable comma-spacing,array-bracket-spacing */\n\tvar extra_lbits =   /* extra bits for each length code */\n\t  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\t\n\tvar extra_dbits =   /* extra bits for each distance code */\n\t  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\t\n\tvar extra_blbits =  /* extra bits for each bit length code */\n\t  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\t\n\tvar bl_order =\n\t  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n\t/* eslint-enable comma-spacing,array-bracket-spacing */\n\t\n\t/* The lengths of the bit length codes are sent in order of decreasing\n\t * probability, to avoid transmitting the lengths for unused bit length codes.\n\t */\n\t\n\t/* ===========================================================================\n\t * Local data. These are initialized only once.\n\t */\n\t\n\t// We pre-fill arrays with 0 to avoid uninitialized gaps\n\t\n\tvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\t\n\t// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\n\tvar static_ltree  = new Array((L_CODES + 2) * 2);\n\tzero(static_ltree);\n\t/* The static literal tree. Since the bit lengths are imposed, there is no\n\t * need for the L_CODES extra codes used during heap construction. However\n\t * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n\t * below).\n\t */\n\t\n\tvar static_dtree  = new Array(D_CODES * 2);\n\tzero(static_dtree);\n\t/* The static distance tree. (Actually a trivial tree since all codes use\n\t * 5 bits.)\n\t */\n\t\n\tvar _dist_code    = new Array(DIST_CODE_LEN);\n\tzero(_dist_code);\n\t/* Distance codes. The first 256 values correspond to the distances\n\t * 3 .. 258, the last 256 values correspond to the top 8 bits of\n\t * the 15 bit distances.\n\t */\n\t\n\tvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\n\tzero(_length_code);\n\t/* length code for each normalized match length (0 == MIN_MATCH) */\n\t\n\tvar base_length   = new Array(LENGTH_CODES);\n\tzero(base_length);\n\t/* First normalized length for each code (0 = MIN_MATCH) */\n\t\n\tvar base_dist     = new Array(D_CODES);\n\tzero(base_dist);\n\t/* First normalized distance for each code (0 = distance of 1) */\n\t\n\t\n\tfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\t\n\t  this.static_tree  = static_tree;  /* static tree or NULL */\n\t  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n\t  this.extra_base   = extra_base;   /* base index for extra_bits */\n\t  this.elems        = elems;        /* max number of elements in the tree */\n\t  this.max_length   = max_length;   /* max bit length for the codes */\n\t\n\t  // show if `static_tree` has data or dummy - needed for monomorphic objects\n\t  this.has_stree    = static_tree && static_tree.length;\n\t}\n\t\n\t\n\tvar static_l_desc;\n\tvar static_d_desc;\n\tvar static_bl_desc;\n\t\n\t\n\tfunction TreeDesc(dyn_tree, stat_desc) {\n\t  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n\t  this.max_code = 0;            /* largest code with non zero frequency */\n\t  this.stat_desc = stat_desc;   /* the corresponding static tree */\n\t}\n\t\n\t\n\t\n\tfunction d_code(dist) {\n\t  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Output a short LSB first on the stream.\n\t * IN assertion: there is enough room in pendingBuf.\n\t */\n\tfunction put_short(s, w) {\n\t//    put_byte(s, (uch)((w) & 0xff));\n\t//    put_byte(s, (uch)((ush)(w) >> 8));\n\t  s.pending_buf[s.pending++] = (w) & 0xff;\n\t  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send a value on a given number of bits.\n\t * IN assertion: length <= 16 and value fits in length bits.\n\t */\n\tfunction send_bits(s, value, length) {\n\t  if (s.bi_valid > (Buf_size - length)) {\n\t    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n\t    put_short(s, s.bi_buf);\n\t    s.bi_buf = value >> (Buf_size - s.bi_valid);\n\t    s.bi_valid += length - Buf_size;\n\t  } else {\n\t    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n\t    s.bi_valid += length;\n\t  }\n\t}\n\t\n\t\n\tfunction send_code(s, c, tree) {\n\t  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Reverse the first len bits of a code, using straightforward code (a faster\n\t * method would use a table)\n\t * IN assertion: 1 <= len <= 15\n\t */\n\tfunction bi_reverse(code, len) {\n\t  var res = 0;\n\t  do {\n\t    res |= code & 1;\n\t    code >>>= 1;\n\t    res <<= 1;\n\t  } while (--len > 0);\n\t  return res >>> 1;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Flush the bit buffer, keeping at most 7 bits in it.\n\t */\n\tfunction bi_flush(s) {\n\t  if (s.bi_valid === 16) {\n\t    put_short(s, s.bi_buf);\n\t    s.bi_buf = 0;\n\t    s.bi_valid = 0;\n\t\n\t  } else if (s.bi_valid >= 8) {\n\t    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n\t    s.bi_buf >>= 8;\n\t    s.bi_valid -= 8;\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Compute the optimal bit lengths for a tree and update the total bit length\n\t * for the current block.\n\t * IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t *    above are the tree nodes sorted by increasing frequency.\n\t * OUT assertions: the field len is set to the optimal bit length, the\n\t *     array bl_count contains the frequencies for each bit length.\n\t *     The length opt_len is updated; static_len is also updated if stree is\n\t *     not null.\n\t */\n\tfunction gen_bitlen(s, desc)\n\t//    deflate_state *s;\n\t//    tree_desc *desc;    /* the tree descriptor */\n\t{\n\t  var tree            = desc.dyn_tree;\n\t  var max_code        = desc.max_code;\n\t  var stree           = desc.stat_desc.static_tree;\n\t  var has_stree       = desc.stat_desc.has_stree;\n\t  var extra           = desc.stat_desc.extra_bits;\n\t  var base            = desc.stat_desc.extra_base;\n\t  var max_length      = desc.stat_desc.max_length;\n\t  var h;              /* heap index */\n\t  var n, m;           /* iterate over the tree elements */\n\t  var bits;           /* bit length */\n\t  var xbits;          /* extra bits */\n\t  var f;              /* frequency */\n\t  var overflow = 0;   /* number of elements with bit length too large */\n\t\n\t  for (bits = 0; bits <= MAX_BITS; bits++) {\n\t    s.bl_count[bits] = 0;\n\t  }\n\t\n\t  /* In a first pass, compute the optimal bit lengths (which may\n\t   * overflow in the case of the bit length tree).\n\t   */\n\t  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\t\n\t  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n\t    n = s.heap[h];\n\t    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n\t    if (bits > max_length) {\n\t      bits = max_length;\n\t      overflow++;\n\t    }\n\t    tree[n * 2 + 1]/*.Len*/ = bits;\n\t    /* We overwrite tree[n].Dad which is no longer needed */\n\t\n\t    if (n > max_code) { continue; } /* not a leaf node */\n\t\n\t    s.bl_count[bits]++;\n\t    xbits = 0;\n\t    if (n >= base) {\n\t      xbits = extra[n - base];\n\t    }\n\t    f = tree[n * 2]/*.Freq*/;\n\t    s.opt_len += f * (bits + xbits);\n\t    if (has_stree) {\n\t      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n\t    }\n\t  }\n\t  if (overflow === 0) { return; }\n\t\n\t  // Trace((stderr,\"\\nbit length overflow\\n\"));\n\t  /* This happens for example on obj2 and pic of the Calgary corpus */\n\t\n\t  /* Find the first bit length which could increase: */\n\t  do {\n\t    bits = max_length - 1;\n\t    while (s.bl_count[bits] === 0) { bits--; }\n\t    s.bl_count[bits]--;      /* move one leaf down the tree */\n\t    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n\t    s.bl_count[max_length]--;\n\t    /* The brother of the overflow item also moves one step up,\n\t     * but this does not affect bl_count[max_length]\n\t     */\n\t    overflow -= 2;\n\t  } while (overflow > 0);\n\t\n\t  /* Now recompute all bit lengths, scanning in increasing frequency.\n\t   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n\t   * lengths instead of fixing only the wrong ones. This idea is taken\n\t   * from 'ar' written by Haruhiko Okumura.)\n\t   */\n\t  for (bits = max_length; bits !== 0; bits--) {\n\t    n = s.bl_count[bits];\n\t    while (n !== 0) {\n\t      m = s.heap[--h];\n\t      if (m > max_code) { continue; }\n\t      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n\t        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n\t        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n\t        tree[m * 2 + 1]/*.Len*/ = bits;\n\t      }\n\t      n--;\n\t    }\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Generate the codes for a given tree and bit counts (which need not be\n\t * optimal).\n\t * IN assertion: the array bl_count contains the bit length statistics for\n\t * the given tree and the field len is set for all tree elements.\n\t * OUT assertion: the field code is set for all tree elements of non\n\t *     zero code length.\n\t */\n\tfunction gen_codes(tree, max_code, bl_count)\n\t//    ct_data *tree;             /* the tree to decorate */\n\t//    int max_code;              /* largest code with non zero frequency */\n\t//    ushf *bl_count;            /* number of codes at each bit length */\n\t{\n\t  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n\t  var code = 0;              /* running code value */\n\t  var bits;                  /* bit index */\n\t  var n;                     /* code index */\n\t\n\t  /* The distribution counts are first used to generate the code values\n\t   * without bit reversal.\n\t   */\n\t  for (bits = 1; bits <= MAX_BITS; bits++) {\n\t    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n\t  }\n\t  /* Check that the bit counts in bl_count are consistent. The last code\n\t   * must be all ones.\n\t   */\n\t  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n\t  //        \"inconsistent bit counts\");\n\t  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\t\n\t  for (n = 0;  n <= max_code; n++) {\n\t    var len = tree[n * 2 + 1]/*.Len*/;\n\t    if (len === 0) { continue; }\n\t    /* Now reverse the bits */\n\t    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\t\n\t    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n\t    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Initialize the various 'constant' tables.\n\t */\n\tfunction tr_static_init() {\n\t  var n;        /* iterates over tree elements */\n\t  var bits;     /* bit counter */\n\t  var length;   /* length value */\n\t  var code;     /* code value */\n\t  var dist;     /* distance index */\n\t  var bl_count = new Array(MAX_BITS + 1);\n\t  /* number of codes at each bit length for an optimal tree */\n\t\n\t  // do check in _tr_init()\n\t  //if (static_init_done) return;\n\t\n\t  /* For some embedded targets, global variables are not initialized: */\n\t/*#ifdef NO_INIT_GLOBAL_POINTERS\n\t  static_l_desc.static_tree = static_ltree;\n\t  static_l_desc.extra_bits = extra_lbits;\n\t  static_d_desc.static_tree = static_dtree;\n\t  static_d_desc.extra_bits = extra_dbits;\n\t  static_bl_desc.extra_bits = extra_blbits;\n\t#endif*/\n\t\n\t  /* Initialize the mapping length (0..255) -> length code (0..28) */\n\t  length = 0;\n\t  for (code = 0; code < LENGTH_CODES - 1; code++) {\n\t    base_length[code] = length;\n\t    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n\t      _length_code[length++] = code;\n\t    }\n\t  }\n\t  //Assert (length == 256, \"tr_static_init: length != 256\");\n\t  /* Note that the length 255 (match length 258) can be represented\n\t   * in two different ways: code 284 + 5 bits or code 285, so we\n\t   * overwrite length_code[255] to use the best encoding:\n\t   */\n\t  _length_code[length - 1] = code;\n\t\n\t  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n\t  dist = 0;\n\t  for (code = 0; code < 16; code++) {\n\t    base_dist[code] = dist;\n\t    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n\t      _dist_code[dist++] = code;\n\t    }\n\t  }\n\t  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n\t  dist >>= 7; /* from now on, all distances are divided by 128 */\n\t  for (; code < D_CODES; code++) {\n\t    base_dist[code] = dist << 7;\n\t    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n\t      _dist_code[256 + dist++] = code;\n\t    }\n\t  }\n\t  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\t\n\t  /* Construct the codes of the static literal tree */\n\t  for (bits = 0; bits <= MAX_BITS; bits++) {\n\t    bl_count[bits] = 0;\n\t  }\n\t\n\t  n = 0;\n\t  while (n <= 143) {\n\t    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n\t    n++;\n\t    bl_count[8]++;\n\t  }\n\t  while (n <= 255) {\n\t    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n\t    n++;\n\t    bl_count[9]++;\n\t  }\n\t  while (n <= 279) {\n\t    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n\t    n++;\n\t    bl_count[7]++;\n\t  }\n\t  while (n <= 287) {\n\t    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n\t    n++;\n\t    bl_count[8]++;\n\t  }\n\t  /* Codes 286 and 287 do not exist, but we must include them in the\n\t   * tree construction to get a canonical Huffman tree (longest code\n\t   * all ones)\n\t   */\n\t  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\t\n\t  /* The static distance tree is trivial: */\n\t  for (n = 0; n < D_CODES; n++) {\n\t    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n\t    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n\t  }\n\t\n\t  // Now data ready and we can init static trees\n\t  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n\t  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n\t  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\t\n\t  //static_init_done = true;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Initialize a new block.\n\t */\n\tfunction init_block(s) {\n\t  var n; /* iterates over tree elements */\n\t\n\t  /* Initialize the trees. */\n\t  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n\t  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n\t  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\t\n\t  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n\t  s.opt_len = s.static_len = 0;\n\t  s.last_lit = s.matches = 0;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Flush the bit buffer and align the output on a byte boundary\n\t */\n\tfunction bi_windup(s)\n\t{\n\t  if (s.bi_valid > 8) {\n\t    put_short(s, s.bi_buf);\n\t  } else if (s.bi_valid > 0) {\n\t    //put_byte(s, (Byte)s->bi_buf);\n\t    s.pending_buf[s.pending++] = s.bi_buf;\n\t  }\n\t  s.bi_buf = 0;\n\t  s.bi_valid = 0;\n\t}\n\t\n\t/* ===========================================================================\n\t * Copy a stored block, storing first the length and its\n\t * one's complement if requested.\n\t */\n\tfunction copy_block(s, buf, len, header)\n\t//DeflateState *s;\n\t//charf    *buf;    /* the input data */\n\t//unsigned len;     /* its length */\n\t//int      header;  /* true if block header must be written */\n\t{\n\t  bi_windup(s);        /* align on byte boundary */\n\t\n\t  if (header) {\n\t    put_short(s, len);\n\t    put_short(s, ~len);\n\t  }\n\t//  while (len--) {\n\t//    put_byte(s, *buf++);\n\t//  }\n\t  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n\t  s.pending += len;\n\t}\n\t\n\t/* ===========================================================================\n\t * Compares to subtrees, using the tree depth as tie breaker when\n\t * the subtrees have equal frequency. This minimizes the worst case length.\n\t */\n\tfunction smaller(tree, n, m, depth) {\n\t  var _n2 = n * 2;\n\t  var _m2 = m * 2;\n\t  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n\t         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n\t}\n\t\n\t/* ===========================================================================\n\t * Restore the heap property by moving down the tree starting at node k,\n\t * exchanging a node with the smallest of its two sons if necessary, stopping\n\t * when the heap property is re-established (each father smaller than its\n\t * two sons).\n\t */\n\tfunction pqdownheap(s, tree, k)\n\t//    deflate_state *s;\n\t//    ct_data *tree;  /* the tree to restore */\n\t//    int k;               /* node to move down */\n\t{\n\t  var v = s.heap[k];\n\t  var j = k << 1;  /* left son of k */\n\t  while (j <= s.heap_len) {\n\t    /* Set j to the smallest of the two sons: */\n\t    if (j < s.heap_len &&\n\t      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n\t      j++;\n\t    }\n\t    /* Exit if v is smaller than both sons */\n\t    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\t\n\t    /* Exchange v with the smallest son */\n\t    s.heap[k] = s.heap[j];\n\t    k = j;\n\t\n\t    /* And continue down the tree, setting j to the left son of k */\n\t    j <<= 1;\n\t  }\n\t  s.heap[k] = v;\n\t}\n\t\n\t\n\t// inlined manually\n\t// var SMALLEST = 1;\n\t\n\t/* ===========================================================================\n\t * Send the block data compressed using the given Huffman trees\n\t */\n\tfunction compress_block(s, ltree, dtree)\n\t//    deflate_state *s;\n\t//    const ct_data *ltree; /* literal tree */\n\t//    const ct_data *dtree; /* distance tree */\n\t{\n\t  var dist;           /* distance of matched string */\n\t  var lc;             /* match length or unmatched char (if dist == 0) */\n\t  var lx = 0;         /* running index in l_buf */\n\t  var code;           /* the code to send */\n\t  var extra;          /* number of extra bits to send */\n\t\n\t  if (s.last_lit !== 0) {\n\t    do {\n\t      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n\t      lc = s.pending_buf[s.l_buf + lx];\n\t      lx++;\n\t\n\t      if (dist === 0) {\n\t        send_code(s, lc, ltree); /* send a literal byte */\n\t        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n\t      } else {\n\t        /* Here, lc is the match length - MIN_MATCH */\n\t        code = _length_code[lc];\n\t        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n\t        extra = extra_lbits[code];\n\t        if (extra !== 0) {\n\t          lc -= base_length[code];\n\t          send_bits(s, lc, extra);       /* send the extra length bits */\n\t        }\n\t        dist--; /* dist is now the match distance - 1 */\n\t        code = d_code(dist);\n\t        //Assert (code < D_CODES, \"bad d_code\");\n\t\n\t        send_code(s, code, dtree);       /* send the distance code */\n\t        extra = extra_dbits[code];\n\t        if (extra !== 0) {\n\t          dist -= base_dist[code];\n\t          send_bits(s, dist, extra);   /* send the extra distance bits */\n\t        }\n\t      } /* literal or match pair ? */\n\t\n\t      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n\t      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n\t      //       \"pendingBuf overflow\");\n\t\n\t    } while (lx < s.last_lit);\n\t  }\n\t\n\t  send_code(s, END_BLOCK, ltree);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Construct one Huffman tree and assigns the code bit strings and lengths.\n\t * Update the total bit length for the current block.\n\t * IN assertion: the field freq is set for all tree elements.\n\t * OUT assertions: the fields len and code are set to the optimal bit length\n\t *     and corresponding code. The length opt_len is updated; static_len is\n\t *     also updated if stree is not null. The field max_code is set.\n\t */\n\tfunction build_tree(s, desc)\n\t//    deflate_state *s;\n\t//    tree_desc *desc; /* the tree descriptor */\n\t{\n\t  var tree     = desc.dyn_tree;\n\t  var stree    = desc.stat_desc.static_tree;\n\t  var has_stree = desc.stat_desc.has_stree;\n\t  var elems    = desc.stat_desc.elems;\n\t  var n, m;          /* iterate over heap elements */\n\t  var max_code = -1; /* largest code with non zero frequency */\n\t  var node;          /* new node being created */\n\t\n\t  /* Construct the initial heap, with least frequent element in\n\t   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t   * heap[0] is not used.\n\t   */\n\t  s.heap_len = 0;\n\t  s.heap_max = HEAP_SIZE;\n\t\n\t  for (n = 0; n < elems; n++) {\n\t    if (tree[n * 2]/*.Freq*/ !== 0) {\n\t      s.heap[++s.heap_len] = max_code = n;\n\t      s.depth[n] = 0;\n\t\n\t    } else {\n\t      tree[n * 2 + 1]/*.Len*/ = 0;\n\t    }\n\t  }\n\t\n\t  /* The pkzip format requires that at least one distance code exists,\n\t   * and that at least one bit should be sent even if there is only one\n\t   * possible code. So to avoid special checks later on we force at least\n\t   * two codes of non zero frequency.\n\t   */\n\t  while (s.heap_len < 2) {\n\t    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n\t    tree[node * 2]/*.Freq*/ = 1;\n\t    s.depth[node] = 0;\n\t    s.opt_len--;\n\t\n\t    if (has_stree) {\n\t      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n\t    }\n\t    /* node is 0 or 1 so it does not have extra bits */\n\t  }\n\t  desc.max_code = max_code;\n\t\n\t  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t   * establish sub-heaps of increasing lengths:\n\t   */\n\t  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\t\n\t  /* Construct the Huffman tree by repeatedly combining the least two\n\t   * frequent nodes.\n\t   */\n\t  node = elems;              /* next internal node of the tree */\n\t  do {\n\t    //pqremove(s, tree, n);  /* n = node of least frequency */\n\t    /*** pqremove ***/\n\t    n = s.heap[1/*SMALLEST*/];\n\t    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n\t    pqdownheap(s, tree, 1/*SMALLEST*/);\n\t    /***/\n\t\n\t    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\t\n\t    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n\t    s.heap[--s.heap_max] = m;\n\t\n\t    /* Create a new node father of n and m */\n\t    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n\t    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n\t    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\t\n\t    /* and insert the new node in the heap */\n\t    s.heap[1/*SMALLEST*/] = node++;\n\t    pqdownheap(s, tree, 1/*SMALLEST*/);\n\t\n\t  } while (s.heap_len >= 2);\n\t\n\t  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\t\n\t  /* At this point, the fields freq and dad are set. We can now\n\t   * generate the bit lengths.\n\t   */\n\t  gen_bitlen(s, desc);\n\t\n\t  /* The field len is now set, we can generate the bit codes */\n\t  gen_codes(tree, max_code, s.bl_count);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Scan a literal or distance tree to determine the frequencies of the codes\n\t * in the bit length tree.\n\t */\n\tfunction scan_tree(s, tree, max_code)\n\t//    deflate_state *s;\n\t//    ct_data *tree;   /* the tree to be scanned */\n\t//    int max_code;    /* and its largest code of non zero frequency */\n\t{\n\t  var n;                     /* iterates over all tree elements */\n\t  var prevlen = -1;          /* last emitted length */\n\t  var curlen;                /* length of current code */\n\t\n\t  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\t\n\t  var count = 0;             /* repeat count of the current code */\n\t  var max_count = 7;         /* max repeat count */\n\t  var min_count = 4;         /* min repeat count */\n\t\n\t  if (nextlen === 0) {\n\t    max_count = 138;\n\t    min_count = 3;\n\t  }\n\t  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\t\n\t  for (n = 0; n <= max_code; n++) {\n\t    curlen = nextlen;\n\t    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\t\n\t    if (++count < max_count && curlen === nextlen) {\n\t      continue;\n\t\n\t    } else if (count < min_count) {\n\t      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\t\n\t    } else if (curlen !== 0) {\n\t\n\t      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n\t      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\t\n\t    } else if (count <= 10) {\n\t      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\t\n\t    } else {\n\t      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n\t    }\n\t\n\t    count = 0;\n\t    prevlen = curlen;\n\t\n\t    if (nextlen === 0) {\n\t      max_count = 138;\n\t      min_count = 3;\n\t\n\t    } else if (curlen === nextlen) {\n\t      max_count = 6;\n\t      min_count = 3;\n\t\n\t    } else {\n\t      max_count = 7;\n\t      min_count = 4;\n\t    }\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send a literal or distance tree in compressed form, using the codes in\n\t * bl_tree.\n\t */\n\tfunction send_tree(s, tree, max_code)\n\t//    deflate_state *s;\n\t//    ct_data *tree; /* the tree to be scanned */\n\t//    int max_code;       /* and its largest code of non zero frequency */\n\t{\n\t  var n;                     /* iterates over all tree elements */\n\t  var prevlen = -1;          /* last emitted length */\n\t  var curlen;                /* length of current code */\n\t\n\t  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\t\n\t  var count = 0;             /* repeat count of the current code */\n\t  var max_count = 7;         /* max repeat count */\n\t  var min_count = 4;         /* min repeat count */\n\t\n\t  /* tree[max_code+1].Len = -1; */  /* guard already set */\n\t  if (nextlen === 0) {\n\t    max_count = 138;\n\t    min_count = 3;\n\t  }\n\t\n\t  for (n = 0; n <= max_code; n++) {\n\t    curlen = nextlen;\n\t    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\t\n\t    if (++count < max_count && curlen === nextlen) {\n\t      continue;\n\t\n\t    } else if (count < min_count) {\n\t      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\t\n\t    } else if (curlen !== 0) {\n\t      if (curlen !== prevlen) {\n\t        send_code(s, curlen, s.bl_tree);\n\t        count--;\n\t      }\n\t      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n\t      send_code(s, REP_3_6, s.bl_tree);\n\t      send_bits(s, count - 3, 2);\n\t\n\t    } else if (count <= 10) {\n\t      send_code(s, REPZ_3_10, s.bl_tree);\n\t      send_bits(s, count - 3, 3);\n\t\n\t    } else {\n\t      send_code(s, REPZ_11_138, s.bl_tree);\n\t      send_bits(s, count - 11, 7);\n\t    }\n\t\n\t    count = 0;\n\t    prevlen = curlen;\n\t    if (nextlen === 0) {\n\t      max_count = 138;\n\t      min_count = 3;\n\t\n\t    } else if (curlen === nextlen) {\n\t      max_count = 6;\n\t      min_count = 3;\n\t\n\t    } else {\n\t      max_count = 7;\n\t      min_count = 4;\n\t    }\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Construct the Huffman tree for the bit lengths and return the index in\n\t * bl_order of the last bit length code to send.\n\t */\n\tfunction build_bl_tree(s) {\n\t  var max_blindex;  /* index of last bit length code of non zero freq */\n\t\n\t  /* Determine the bit length frequencies for literal and distance trees */\n\t  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n\t  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\t\n\t  /* Build the bit length tree: */\n\t  build_tree(s, s.bl_desc);\n\t  /* opt_len now includes the length of the tree representations, except\n\t   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n\t   */\n\t\n\t  /* Determine the number of bit length codes to send. The pkzip format\n\t   * requires that at least 4 bit length codes be sent. (appnote.txt says\n\t   * 3 but the actual value used is 4.)\n\t   */\n\t  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n\t    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n\t      break;\n\t    }\n\t  }\n\t  /* Update opt_len to include the bit length tree and counts */\n\t  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n\t  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n\t  //        s->opt_len, s->static_len));\n\t\n\t  return max_blindex;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send the header for a block using dynamic Huffman trees: the counts, the\n\t * lengths of the bit length codes, the literal tree and the distance tree.\n\t * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\t */\n\tfunction send_all_trees(s, lcodes, dcodes, blcodes)\n\t//    deflate_state *s;\n\t//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\t{\n\t  var rank;                    /* index in bl_order */\n\t\n\t  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n\t  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n\t  //        \"too many codes\");\n\t  //Tracev((stderr, \"\\nbl counts: \"));\n\t  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n\t  send_bits(s, dcodes - 1,   5);\n\t  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n\t  for (rank = 0; rank < blcodes; rank++) {\n\t    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n\t    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n\t  }\n\t  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\t\n\t  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n\t  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\t\n\t  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n\t  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Check if the data type is TEXT or BINARY, using the following algorithm:\n\t * - TEXT if the two conditions below are satisfied:\n\t *    a) There are no non-portable control characters belonging to the\n\t *       \"black list\" (0..6, 14..25, 28..31).\n\t *    b) There is at least one printable character belonging to the\n\t *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n\t * - BINARY otherwise.\n\t * - The following partially-portable control characters form a\n\t *   \"gray list\" that is ignored in this detection algorithm:\n\t *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n\t * IN assertion: the fields Freq of dyn_ltree are set.\n\t */\n\tfunction detect_data_type(s) {\n\t  /* black_mask is the bit mask of black-listed bytes\n\t   * set bits 0..6, 14..25, and 28..31\n\t   * 0xf3ffc07f = binary 11110011111111111100000001111111\n\t   */\n\t  var black_mask = 0xf3ffc07f;\n\t  var n;\n\t\n\t  /* Check for non-textual (\"black-listed\") bytes. */\n\t  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n\t    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n\t      return Z_BINARY;\n\t    }\n\t  }\n\t\n\t  /* Check for textual (\"white-listed\") bytes. */\n\t  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n\t      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n\t    return Z_TEXT;\n\t  }\n\t  for (n = 32; n < LITERALS; n++) {\n\t    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n\t      return Z_TEXT;\n\t    }\n\t  }\n\t\n\t  /* There are no \"black-listed\" or \"white-listed\" bytes:\n\t   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n\t   */\n\t  return Z_BINARY;\n\t}\n\t\n\t\n\tvar static_init_done = false;\n\t\n\t/* ===========================================================================\n\t * Initialize the tree data structures for a new zlib stream.\n\t */\n\tfunction _tr_init(s)\n\t{\n\t\n\t  if (!static_init_done) {\n\t    tr_static_init();\n\t    static_init_done = true;\n\t  }\n\t\n\t  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n\t  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n\t  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\t\n\t  s.bi_buf = 0;\n\t  s.bi_valid = 0;\n\t\n\t  /* Initialize the first block of the first file: */\n\t  init_block(s);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send a stored block\n\t */\n\tfunction _tr_stored_block(s, buf, stored_len, last)\n\t//DeflateState *s;\n\t//charf *buf;       /* input block */\n\t//ulg stored_len;   /* length of input block */\n\t//int last;         /* one if this is the last block for a file */\n\t{\n\t  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n\t  copy_block(s, buf, stored_len, true); /* with header */\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send one empty static block to give enough lookahead for inflate.\n\t * This takes 10 bits, of which 7 may remain in the bit buffer.\n\t */\n\tfunction _tr_align(s) {\n\t  send_bits(s, STATIC_TREES << 1, 3);\n\t  send_code(s, END_BLOCK, static_ltree);\n\t  bi_flush(s);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Determine the best encoding for the current block: dynamic trees, static\n\t * trees or store, and output the encoded block to the zip file.\n\t */\n\tfunction _tr_flush_block(s, buf, stored_len, last)\n\t//DeflateState *s;\n\t//charf *buf;       /* input block, or NULL if too old */\n\t//ulg stored_len;   /* length of input block */\n\t//int last;         /* one if this is the last block for a file */\n\t{\n\t  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n\t  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\t\n\t  /* Build the Huffman trees unless a stored block is forced */\n\t  if (s.level > 0) {\n\t\n\t    /* Check if the file is binary or text */\n\t    if (s.strm.data_type === Z_UNKNOWN) {\n\t      s.strm.data_type = detect_data_type(s);\n\t    }\n\t\n\t    /* Construct the literal and distance trees */\n\t    build_tree(s, s.l_desc);\n\t    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n\t    //        s->static_len));\n\t\n\t    build_tree(s, s.d_desc);\n\t    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n\t    //        s->static_len));\n\t    /* At this point, opt_len and static_len are the total bit lengths of\n\t     * the compressed block data, excluding the tree representations.\n\t     */\n\t\n\t    /* Build the bit length tree for the above two trees, and get the index\n\t     * in bl_order of the last bit length code to send.\n\t     */\n\t    max_blindex = build_bl_tree(s);\n\t\n\t    /* Determine the best encoding. Compute the block lengths in bytes. */\n\t    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n\t    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\t\n\t    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n\t    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n\t    //        s->last_lit));\n\t\n\t    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\t\n\t  } else {\n\t    // Assert(buf != (char*)0, \"lost buf\");\n\t    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n\t  }\n\t\n\t  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n\t    /* 4: two words for the lengths */\n\t\n\t    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t     * Otherwise we can't have processed more than WSIZE input bytes since\n\t     * the last block flush, because compression would have been\n\t     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t     * transform a block into a stored block.\n\t     */\n\t    _tr_stored_block(s, buf, stored_len, last);\n\t\n\t  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\t\n\t    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n\t    compress_block(s, static_ltree, static_dtree);\n\t\n\t  } else {\n\t    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n\t    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n\t    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n\t  }\n\t  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n\t  /* The above check is made mod 2^32, for files larger than 512 MB\n\t   * and uLong implemented on 32 bits.\n\t   */\n\t  init_block(s);\n\t\n\t  if (last) {\n\t    bi_windup(s);\n\t  }\n\t  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n\t  //       s->compressed_len-7*last));\n\t}\n\t\n\t/* ===========================================================================\n\t * Save the match info and tally the frequency counts. Return true if\n\t * the current block must be flushed.\n\t */\n\tfunction _tr_tally(s, dist, lc)\n\t//    deflate_state *s;\n\t//    unsigned dist;  /* distance of matched string */\n\t//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\t{\n\t  //var out_length, in_length, dcode;\n\t\n\t  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n\t  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\t\n\t  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n\t  s.last_lit++;\n\t\n\t  if (dist === 0) {\n\t    /* lc is the unmatched char */\n\t    s.dyn_ltree[lc * 2]/*.Freq*/++;\n\t  } else {\n\t    s.matches++;\n\t    /* Here, lc is the match length - MIN_MATCH */\n\t    dist--;             /* dist = match distance - 1 */\n\t    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n\t    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n\t    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\t\n\t    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n\t    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n\t  }\n\t\n\t// (!) This block is disabled in zlib defailts,\n\t// don't enable it for binary compatibility\n\t\n\t//#ifdef TRUNCATE_BLOCK\n\t//  /* Try to guess if it is profitable to stop the current block here */\n\t//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n\t//    /* Compute an upper bound for the compressed length */\n\t//    out_length = s.last_lit*8;\n\t//    in_length = s.strstart - s.block_start;\n\t//\n\t//    for (dcode = 0; dcode < D_CODES; dcode++) {\n\t//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n\t//    }\n\t//    out_length >>>= 3;\n\t//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n\t//    //       s->last_lit, in_length, out_length,\n\t//    //       100L - out_length*100L/in_length));\n\t//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n\t//      return true;\n\t//    }\n\t//  }\n\t//#endif\n\t\n\t  return (s.last_lit === s.lit_bufsize - 1);\n\t  /* We avoid equality with lit_bufsize because of wraparound at 64K\n\t   * on 16 bit machines and because stored blocks are restricted to\n\t   * 64K-1 bytes.\n\t   */\n\t}\n\t\n\texports._tr_init  = _tr_init;\n\texports._tr_stored_block = _tr_stored_block;\n\texports._tr_flush_block  = _tr_flush_block;\n\texports._tr_tally = _tr_tally;\n\texports._tr_align = _tr_align;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// Note: adler32 takes 12% for level 0 and 2% for level 6.\n\t// It doesn't worth to make additional optimizationa as in original.\n\t// Small size is preferable.\n\t\n\tfunction adler32(adler, buf, len, pos) {\n\t  var s1 = (adler & 0xffff) |0,\n\t      s2 = ((adler >>> 16) & 0xffff) |0,\n\t      n = 0;\n\t\n\t  while (len !== 0) {\n\t    // Set limit ~ twice less than 5552, to keep\n\t    // s2 in 31-bits, because we force signed ints.\n\t    // in other case %= will fail.\n\t    n = len > 2000 ? 2000 : len;\n\t    len -= n;\n\t\n\t    do {\n\t      s1 = (s1 + buf[pos++]) |0;\n\t      s2 = (s2 + s1) |0;\n\t    } while (--n);\n\t\n\t    s1 %= 65521;\n\t    s2 %= 65521;\n\t  }\n\t\n\t  return (s1 | (s2 << 16)) |0;\n\t}\n\t\n\t\n\tmodule.exports = adler32;\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// Note: we can't get significant speed boost here.\n\t// So write code to minimize size - no pregenerated tables\n\t// and array tools dependencies.\n\t\n\t\n\t// Use ordinary array, since untyped makes no boost here\n\tfunction makeTable() {\n\t  var c, table = [];\n\t\n\t  for (var n = 0; n < 256; n++) {\n\t    c = n;\n\t    for (var k = 0; k < 8; k++) {\n\t      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n\t    }\n\t    table[n] = c;\n\t  }\n\t\n\t  return table;\n\t}\n\t\n\t// Create table on load. Just 255 signed longs. Not a problem.\n\tvar crcTable = makeTable();\n\t\n\t\n\tfunction crc32(crc, buf, len, pos) {\n\t  var t = crcTable,\n\t      end = pos + len;\n\t\n\t  crc ^= -1;\n\t\n\t  for (var i = pos; i < end; i++) {\n\t    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n\t  }\n\t\n\t  return (crc ^ (-1)); // >>> 0;\n\t}\n\t\n\t\n\tmodule.exports = crc32;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {\n\t  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n\t  1:      'stream end',          /* Z_STREAM_END      1  */\n\t  0:      '',                    /* Z_OK              0  */\n\t  '-1':   'file error',          /* Z_ERRNO         (-1) */\n\t  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n\t  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n\t  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n\t  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n\t  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n\t};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar utils         = __webpack_require__(35);\n\tvar adler32       = __webpack_require__(37);\n\tvar crc32         = __webpack_require__(38);\n\tvar inflate_fast  = __webpack_require__(41);\n\tvar inflate_table = __webpack_require__(42);\n\t\n\tvar CODES = 0;\n\tvar LENS = 1;\n\tvar DISTS = 2;\n\t\n\t/* Public constants ==========================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\t/* Allowed flush values; see deflate() and inflate() below for details */\n\t//var Z_NO_FLUSH      = 0;\n\t//var Z_PARTIAL_FLUSH = 1;\n\t//var Z_SYNC_FLUSH    = 2;\n\t//var Z_FULL_FLUSH    = 3;\n\tvar Z_FINISH        = 4;\n\tvar Z_BLOCK         = 5;\n\tvar Z_TREES         = 6;\n\t\n\t\n\t/* Return codes for the compression/decompression functions. Negative values\n\t * are errors, positive values are used for special but normal events.\n\t */\n\tvar Z_OK            = 0;\n\tvar Z_STREAM_END    = 1;\n\tvar Z_NEED_DICT     = 2;\n\t//var Z_ERRNO         = -1;\n\tvar Z_STREAM_ERROR  = -2;\n\tvar Z_DATA_ERROR    = -3;\n\tvar Z_MEM_ERROR     = -4;\n\tvar Z_BUF_ERROR     = -5;\n\t//var Z_VERSION_ERROR = -6;\n\t\n\t/* The deflate compression method */\n\tvar Z_DEFLATED  = 8;\n\t\n\t\n\t/* STATES ====================================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\tvar    HEAD = 1;       /* i: waiting for magic header */\n\tvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\n\tvar    TIME = 3;       /* i: waiting for modification time (gzip) */\n\tvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\n\tvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\n\tvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\n\tvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\n\tvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\n\tvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\n\tvar    DICTID = 10;    /* i: waiting for dictionary check value */\n\tvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\n\tvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\tvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\n\tvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\n\tvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\n\tvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\n\tvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\n\tvar        LENLENS = 18;   /* i: waiting for code length code lengths */\n\tvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\n\tvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\n\tvar            LEN = 21;       /* i: waiting for length/lit/eob code */\n\tvar            LENEXT = 22;    /* i: waiting for length extra bits */\n\tvar            DIST = 23;      /* i: waiting for distance code */\n\tvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\n\tvar            MATCH = 25;     /* o: waiting for output space to copy string */\n\tvar            LIT = 26;       /* o: waiting for output space to write literal */\n\tvar    CHECK = 27;     /* i: waiting for 32-bit check value */\n\tvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\n\tvar    DONE = 29;      /* finished check, done -- remain here until reset */\n\tvar    BAD = 30;       /* got a data error -- remain here until reset */\n\tvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\n\tvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\t\n\t/* ===========================================================================*/\n\t\n\t\n\t\n\tvar ENOUGH_LENS = 852;\n\tvar ENOUGH_DISTS = 592;\n\t//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\t\n\tvar MAX_WBITS = 15;\n\t/* 32K LZ77 window */\n\tvar DEF_WBITS = MAX_WBITS;\n\t\n\t\n\tfunction zswap32(q) {\n\t  return  (((q >>> 24) & 0xff) +\n\t          ((q >>> 8) & 0xff00) +\n\t          ((q & 0xff00) << 8) +\n\t          ((q & 0xff) << 24));\n\t}\n\t\n\t\n\tfunction InflateState() {\n\t  this.mode = 0;             /* current inflate mode */\n\t  this.last = false;          /* true if processing last block */\n\t  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n\t  this.havedict = false;      /* true if dictionary provided */\n\t  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n\t  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n\t  this.check = 0;             /* protected copy of check value */\n\t  this.total = 0;             /* protected copy of output count */\n\t  // TODO: may be {}\n\t  this.head = null;           /* where to save gzip header information */\n\t\n\t  /* sliding window */\n\t  this.wbits = 0;             /* log base 2 of requested window size */\n\t  this.wsize = 0;             /* window size or zero if not using window */\n\t  this.whave = 0;             /* valid bytes in the window */\n\t  this.wnext = 0;             /* window write index */\n\t  this.window = null;         /* allocated sliding window, if needed */\n\t\n\t  /* bit accumulator */\n\t  this.hold = 0;              /* input bit accumulator */\n\t  this.bits = 0;              /* number of bits in \"in\" */\n\t\n\t  /* for string and stored block copying */\n\t  this.length = 0;            /* literal or length of data to copy */\n\t  this.offset = 0;            /* distance back to copy string from */\n\t\n\t  /* for table and code decoding */\n\t  this.extra = 0;             /* extra bits needed */\n\t\n\t  /* fixed and dynamic code tables */\n\t  this.lencode = null;          /* starting table for length/literal codes */\n\t  this.distcode = null;         /* starting table for distance codes */\n\t  this.lenbits = 0;           /* index bits for lencode */\n\t  this.distbits = 0;          /* index bits for distcode */\n\t\n\t  /* dynamic table building */\n\t  this.ncode = 0;             /* number of code length code lengths */\n\t  this.nlen = 0;              /* number of length code lengths */\n\t  this.ndist = 0;             /* number of distance code lengths */\n\t  this.have = 0;              /* number of code lengths in lens[] */\n\t  this.next = null;              /* next available space in codes[] */\n\t\n\t  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n\t  this.work = new utils.Buf16(288); /* work area for code table building */\n\t\n\t  /*\n\t   because we don't have pointers in js, we use lencode and distcode directly\n\t   as buffers so we don't need codes\n\t  */\n\t  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n\t  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n\t  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n\t  this.sane = 0;                   /* if false, allow invalid distance too far */\n\t  this.back = 0;                   /* bits back of last unprocessed length/lit */\n\t  this.was = 0;                    /* initial length of match */\n\t}\n\t\n\tfunction inflateResetKeep(strm) {\n\t  var state;\n\t\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t  strm.total_in = strm.total_out = state.total = 0;\n\t  strm.msg = ''; /*Z_NULL*/\n\t  if (state.wrap) {       /* to support ill-conceived Java test suite */\n\t    strm.adler = state.wrap & 1;\n\t  }\n\t  state.mode = HEAD;\n\t  state.last = 0;\n\t  state.havedict = 0;\n\t  state.dmax = 32768;\n\t  state.head = null/*Z_NULL*/;\n\t  state.hold = 0;\n\t  state.bits = 0;\n\t  //state.lencode = state.distcode = state.next = state.codes;\n\t  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n\t  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\t\n\t  state.sane = 1;\n\t  state.back = -1;\n\t  //Tracev((stderr, \"inflate: reset\\n\"));\n\t  return Z_OK;\n\t}\n\t\n\tfunction inflateReset(strm) {\n\t  var state;\n\t\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t  state.wsize = 0;\n\t  state.whave = 0;\n\t  state.wnext = 0;\n\t  return inflateResetKeep(strm);\n\t\n\t}\n\t\n\tfunction inflateReset2(strm, windowBits) {\n\t  var wrap;\n\t  var state;\n\t\n\t  /* get the state */\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t\n\t  /* extract wrap request from windowBits parameter */\n\t  if (windowBits < 0) {\n\t    wrap = 0;\n\t    windowBits = -windowBits;\n\t  }\n\t  else {\n\t    wrap = (windowBits >> 4) + 1;\n\t    if (windowBits < 48) {\n\t      windowBits &= 15;\n\t    }\n\t  }\n\t\n\t  /* set number of window bits, free window if different */\n\t  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t  if (state.window !== null && state.wbits !== windowBits) {\n\t    state.window = null;\n\t  }\n\t\n\t  /* update state and reset the rest of it */\n\t  state.wrap = wrap;\n\t  state.wbits = windowBits;\n\t  return inflateReset(strm);\n\t}\n\t\n\tfunction inflateInit2(strm, windowBits) {\n\t  var ret;\n\t  var state;\n\t\n\t  if (!strm) { return Z_STREAM_ERROR; }\n\t  //strm.msg = Z_NULL;                 /* in case we return an error */\n\t\n\t  state = new InflateState();\n\t\n\t  //if (state === Z_NULL) return Z_MEM_ERROR;\n\t  //Tracev((stderr, \"inflate: allocated\\n\"));\n\t  strm.state = state;\n\t  state.window = null/*Z_NULL*/;\n\t  ret = inflateReset2(strm, windowBits);\n\t  if (ret !== Z_OK) {\n\t    strm.state = null/*Z_NULL*/;\n\t  }\n\t  return ret;\n\t}\n\t\n\tfunction inflateInit(strm) {\n\t  return inflateInit2(strm, DEF_WBITS);\n\t}\n\t\n\t\n\t/*\n\t Return state with length and distance decoding tables and index sizes set to\n\t fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n\t If BUILDFIXED is defined, then instead this routine builds the tables the\n\t first time it's called, and returns those tables the first time and\n\t thereafter.  This reduces the size of the code by about 2K bytes, in\n\t exchange for a little execution time.  However, BUILDFIXED should not be\n\t used for threaded applications, since the rewriting of the tables and virgin\n\t may not be thread-safe.\n\t */\n\tvar virgin = true;\n\t\n\tvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\t\n\tfunction fixedtables(state) {\n\t  /* build fixed huffman tables if first call (may not be thread safe) */\n\t  if (virgin) {\n\t    var sym;\n\t\n\t    lenfix = new utils.Buf32(512);\n\t    distfix = new utils.Buf32(32);\n\t\n\t    /* literal/length table */\n\t    sym = 0;\n\t    while (sym < 144) { state.lens[sym++] = 8; }\n\t    while (sym < 256) { state.lens[sym++] = 9; }\n\t    while (sym < 280) { state.lens[sym++] = 7; }\n\t    while (sym < 288) { state.lens[sym++] = 8; }\n\t\n\t    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\t\n\t    /* distance table */\n\t    sym = 0;\n\t    while (sym < 32) { state.lens[sym++] = 5; }\n\t\n\t    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\t\n\t    /* do this just once */\n\t    virgin = false;\n\t  }\n\t\n\t  state.lencode = lenfix;\n\t  state.lenbits = 9;\n\t  state.distcode = distfix;\n\t  state.distbits = 5;\n\t}\n\t\n\t\n\t/*\n\t Update the window with the last wsize (normally 32K) bytes written before\n\t returning.  If window does not exist yet, create it.  This is only called\n\t when a window is already in use, or when output has been written during this\n\t inflate call, but the end of the deflate stream has not been reached yet.\n\t It is also called to create a window for dictionary data when a dictionary\n\t is loaded.\n\t\n\t Providing output buffers larger than 32K to inflate() should provide a speed\n\t advantage, since only the last 32K of output is copied to the sliding window\n\t upon return from inflate(), and since all distances after the first 32K of\n\t output will fall in the output data, making match copies simpler and faster.\n\t The advantage may be dependent on the size of the processor's data caches.\n\t */\n\tfunction updatewindow(strm, src, end, copy) {\n\t  var dist;\n\t  var state = strm.state;\n\t\n\t  /* if it hasn't been done already, allocate space for the window */\n\t  if (state.window === null) {\n\t    state.wsize = 1 << state.wbits;\n\t    state.wnext = 0;\n\t    state.whave = 0;\n\t\n\t    state.window = new utils.Buf8(state.wsize);\n\t  }\n\t\n\t  /* copy state->wsize or less output bytes into the circular window */\n\t  if (copy >= state.wsize) {\n\t    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n\t    state.wnext = 0;\n\t    state.whave = state.wsize;\n\t  }\n\t  else {\n\t    dist = state.wsize - state.wnext;\n\t    if (dist > copy) {\n\t      dist = copy;\n\t    }\n\t    //zmemcpy(state->window + state->wnext, end - copy, dist);\n\t    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n\t    copy -= dist;\n\t    if (copy) {\n\t      //zmemcpy(state->window, end - copy, copy);\n\t      utils.arraySet(state.window, src, end - copy, copy, 0);\n\t      state.wnext = copy;\n\t      state.whave = state.wsize;\n\t    }\n\t    else {\n\t      state.wnext += dist;\n\t      if (state.wnext === state.wsize) { state.wnext = 0; }\n\t      if (state.whave < state.wsize) { state.whave += dist; }\n\t    }\n\t  }\n\t  return 0;\n\t}\n\t\n\tfunction inflate(strm, flush) {\n\t  var state;\n\t  var input, output;          // input/output buffers\n\t  var next;                   /* next input INDEX */\n\t  var put;                    /* next output INDEX */\n\t  var have, left;             /* available input and output */\n\t  var hold;                   /* bit buffer */\n\t  var bits;                   /* bits in bit buffer */\n\t  var _in, _out;              /* save starting available input and output */\n\t  var copy;                   /* number of stored or match bytes to copy */\n\t  var from;                   /* where to copy match bytes from */\n\t  var from_source;\n\t  var here = 0;               /* current decoding table entry */\n\t  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n\t  //var last;                   /* parent table entry */\n\t  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n\t  var len;                    /* length to copy for repeats, bits to drop */\n\t  var ret;                    /* return code */\n\t  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n\t  var opts;\n\t\n\t  var n; // temporary var for NEED_BITS\n\t\n\t  var order = /* permutation of code lengths */\n\t    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\t\n\t\n\t  if (!strm || !strm.state || !strm.output ||\n\t      (!strm.input && strm.avail_in !== 0)) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  state = strm.state;\n\t  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\t\n\t\n\t  //--- LOAD() ---\n\t  put = strm.next_out;\n\t  output = strm.output;\n\t  left = strm.avail_out;\n\t  next = strm.next_in;\n\t  input = strm.input;\n\t  have = strm.avail_in;\n\t  hold = state.hold;\n\t  bits = state.bits;\n\t  //---\n\t\n\t  _in = have;\n\t  _out = left;\n\t  ret = Z_OK;\n\t\n\t  inf_leave: // goto emulation\n\t  for (;;) {\n\t    switch (state.mode) {\n\t    case HEAD:\n\t      if (state.wrap === 0) {\n\t        state.mode = TYPEDO;\n\t        break;\n\t      }\n\t      //=== NEEDBITS(16);\n\t      while (bits < 16) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n\t        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n\t        //=== CRC2(state.check, hold);\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 2, 0);\n\t        //===//\n\t\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t        state.mode = FLAGS;\n\t        break;\n\t      }\n\t      state.flags = 0;           /* expect zlib header */\n\t      if (state.head) {\n\t        state.head.done = false;\n\t      }\n\t      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n\t        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n\t        strm.msg = 'incorrect header check';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n\t        strm.msg = 'unknown compression method';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      //--- DROPBITS(4) ---//\n\t      hold >>>= 4;\n\t      bits -= 4;\n\t      //---//\n\t      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n\t      if (state.wbits === 0) {\n\t        state.wbits = len;\n\t      }\n\t      else if (len > state.wbits) {\n\t        strm.msg = 'invalid window size';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.dmax = 1 << len;\n\t      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n\t      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n\t      state.mode = hold & 0x200 ? DICTID : TYPE;\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      break;\n\t    case FLAGS:\n\t      //=== NEEDBITS(16); */\n\t      while (bits < 16) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      state.flags = hold;\n\t      if ((state.flags & 0xff) !== Z_DEFLATED) {\n\t        strm.msg = 'unknown compression method';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      if (state.flags & 0xe000) {\n\t        strm.msg = 'unknown header flags set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      if (state.head) {\n\t        state.head.text = ((hold >> 8) & 1);\n\t      }\n\t      if (state.flags & 0x0200) {\n\t        //=== CRC2(state.check, hold);\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 2, 0);\n\t        //===//\n\t      }\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = TIME;\n\t      /* falls through */\n\t    case TIME:\n\t      //=== NEEDBITS(32); */\n\t      while (bits < 32) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if (state.head) {\n\t        state.head.time = hold;\n\t      }\n\t      if (state.flags & 0x0200) {\n\t        //=== CRC4(state.check, hold)\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        hbuf[2] = (hold >>> 16) & 0xff;\n\t        hbuf[3] = (hold >>> 24) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 4, 0);\n\t        //===\n\t      }\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = OS;\n\t      /* falls through */\n\t    case OS:\n\t      //=== NEEDBITS(16); */\n\t      while (bits < 16) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if (state.head) {\n\t        state.head.xflags = (hold & 0xff);\n\t        state.head.os = (hold >> 8);\n\t      }\n\t      if (state.flags & 0x0200) {\n\t        //=== CRC2(state.check, hold);\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 2, 0);\n\t        //===//\n\t      }\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = EXLEN;\n\t      /* falls through */\n\t    case EXLEN:\n\t      if (state.flags & 0x0400) {\n\t        //=== NEEDBITS(16); */\n\t        while (bits < 16) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.length = hold;\n\t        if (state.head) {\n\t          state.head.extra_len = hold;\n\t        }\n\t        if (state.flags & 0x0200) {\n\t          //=== CRC2(state.check, hold);\n\t          hbuf[0] = hold & 0xff;\n\t          hbuf[1] = (hold >>> 8) & 0xff;\n\t          state.check = crc32(state.check, hbuf, 2, 0);\n\t          //===//\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t      }\n\t      else if (state.head) {\n\t        state.head.extra = null/*Z_NULL*/;\n\t      }\n\t      state.mode = EXTRA;\n\t      /* falls through */\n\t    case EXTRA:\n\t      if (state.flags & 0x0400) {\n\t        copy = state.length;\n\t        if (copy > have) { copy = have; }\n\t        if (copy) {\n\t          if (state.head) {\n\t            len = state.head.extra_len - state.length;\n\t            if (!state.head.extra) {\n\t              // Use untyped array for more conveniend processing later\n\t              state.head.extra = new Array(state.head.extra_len);\n\t            }\n\t            utils.arraySet(\n\t              state.head.extra,\n\t              input,\n\t              next,\n\t              // extra field is limited to 65536 bytes\n\t              // - no need for additional size check\n\t              copy,\n\t              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n\t              len\n\t            );\n\t            //zmemcpy(state.head.extra + len, next,\n\t            //        len + copy > state.head.extra_max ?\n\t            //        state.head.extra_max - len : copy);\n\t          }\n\t          if (state.flags & 0x0200) {\n\t            state.check = crc32(state.check, input, copy, next);\n\t          }\n\t          have -= copy;\n\t          next += copy;\n\t          state.length -= copy;\n\t        }\n\t        if (state.length) { break inf_leave; }\n\t      }\n\t      state.length = 0;\n\t      state.mode = NAME;\n\t      /* falls through */\n\t    case NAME:\n\t      if (state.flags & 0x0800) {\n\t        if (have === 0) { break inf_leave; }\n\t        copy = 0;\n\t        do {\n\t          // TODO: 2 or 1 bytes?\n\t          len = input[next + copy++];\n\t          /* use constant limit because in js we should not preallocate memory */\n\t          if (state.head && len &&\n\t              (state.length < 65536 /*state.head.name_max*/)) {\n\t            state.head.name += String.fromCharCode(len);\n\t          }\n\t        } while (len && copy < have);\n\t\n\t        if (state.flags & 0x0200) {\n\t          state.check = crc32(state.check, input, copy, next);\n\t        }\n\t        have -= copy;\n\t        next += copy;\n\t        if (len) { break inf_leave; }\n\t      }\n\t      else if (state.head) {\n\t        state.head.name = null;\n\t      }\n\t      state.length = 0;\n\t      state.mode = COMMENT;\n\t      /* falls through */\n\t    case COMMENT:\n\t      if (state.flags & 0x1000) {\n\t        if (have === 0) { break inf_leave; }\n\t        copy = 0;\n\t        do {\n\t          len = input[next + copy++];\n\t          /* use constant limit because in js we should not preallocate memory */\n\t          if (state.head && len &&\n\t              (state.length < 65536 /*state.head.comm_max*/)) {\n\t            state.head.comment += String.fromCharCode(len);\n\t          }\n\t        } while (len && copy < have);\n\t        if (state.flags & 0x0200) {\n\t          state.check = crc32(state.check, input, copy, next);\n\t        }\n\t        have -= copy;\n\t        next += copy;\n\t        if (len) { break inf_leave; }\n\t      }\n\t      else if (state.head) {\n\t        state.head.comment = null;\n\t      }\n\t      state.mode = HCRC;\n\t      /* falls through */\n\t    case HCRC:\n\t      if (state.flags & 0x0200) {\n\t        //=== NEEDBITS(16); */\n\t        while (bits < 16) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        if (hold !== (state.check & 0xffff)) {\n\t          strm.msg = 'header crc mismatch';\n\t          state.mode = BAD;\n\t          break;\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t      }\n\t      if (state.head) {\n\t        state.head.hcrc = ((state.flags >> 9) & 1);\n\t        state.head.done = true;\n\t      }\n\t      strm.adler = state.check = 0;\n\t      state.mode = TYPE;\n\t      break;\n\t    case DICTID:\n\t      //=== NEEDBITS(32); */\n\t      while (bits < 32) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      strm.adler = state.check = zswap32(hold);\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = DICT;\n\t      /* falls through */\n\t    case DICT:\n\t      if (state.havedict === 0) {\n\t        //--- RESTORE() ---\n\t        strm.next_out = put;\n\t        strm.avail_out = left;\n\t        strm.next_in = next;\n\t        strm.avail_in = have;\n\t        state.hold = hold;\n\t        state.bits = bits;\n\t        //---\n\t        return Z_NEED_DICT;\n\t      }\n\t      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n\t      state.mode = TYPE;\n\t      /* falls through */\n\t    case TYPE:\n\t      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n\t      /* falls through */\n\t    case TYPEDO:\n\t      if (state.last) {\n\t        //--- BYTEBITS() ---//\n\t        hold >>>= bits & 7;\n\t        bits -= bits & 7;\n\t        //---//\n\t        state.mode = CHECK;\n\t        break;\n\t      }\n\t      //=== NEEDBITS(3); */\n\t      while (bits < 3) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      state.last = (hold & 0x01)/*BITS(1)*/;\n\t      //--- DROPBITS(1) ---//\n\t      hold >>>= 1;\n\t      bits -= 1;\n\t      //---//\n\t\n\t      switch ((hold & 0x03)/*BITS(2)*/) {\n\t      case 0:                             /* stored block */\n\t        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n\t        //        state.last ? \" (last)\" : \"\"));\n\t        state.mode = STORED;\n\t        break;\n\t      case 1:                             /* fixed block */\n\t        fixedtables(state);\n\t        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n\t        //        state.last ? \" (last)\" : \"\"));\n\t        state.mode = LEN_;             /* decode codes */\n\t        if (flush === Z_TREES) {\n\t          //--- DROPBITS(2) ---//\n\t          hold >>>= 2;\n\t          bits -= 2;\n\t          //---//\n\t          break inf_leave;\n\t        }\n\t        break;\n\t      case 2:                             /* dynamic block */\n\t        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n\t        //        state.last ? \" (last)\" : \"\"));\n\t        state.mode = TABLE;\n\t        break;\n\t      case 3:\n\t        strm.msg = 'invalid block type';\n\t        state.mode = BAD;\n\t      }\n\t      //--- DROPBITS(2) ---//\n\t      hold >>>= 2;\n\t      bits -= 2;\n\t      //---//\n\t      break;\n\t    case STORED:\n\t      //--- BYTEBITS() ---// /* go to byte boundary */\n\t      hold >>>= bits & 7;\n\t      bits -= bits & 7;\n\t      //---//\n\t      //=== NEEDBITS(32); */\n\t      while (bits < 32) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n\t        strm.msg = 'invalid stored block lengths';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.length = hold & 0xffff;\n\t      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n\t      //        state.length));\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = COPY_;\n\t      if (flush === Z_TREES) { break inf_leave; }\n\t      /* falls through */\n\t    case COPY_:\n\t      state.mode = COPY;\n\t      /* falls through */\n\t    case COPY:\n\t      copy = state.length;\n\t      if (copy) {\n\t        if (copy > have) { copy = have; }\n\t        if (copy > left) { copy = left; }\n\t        if (copy === 0) { break inf_leave; }\n\t        //--- zmemcpy(put, next, copy); ---\n\t        utils.arraySet(output, input, next, copy, put);\n\t        //---//\n\t        have -= copy;\n\t        next += copy;\n\t        left -= copy;\n\t        put += copy;\n\t        state.length -= copy;\n\t        break;\n\t      }\n\t      //Tracev((stderr, \"inflate:       stored end\\n\"));\n\t      state.mode = TYPE;\n\t      break;\n\t    case TABLE:\n\t      //=== NEEDBITS(14); */\n\t      while (bits < 14) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n\t      //--- DROPBITS(5) ---//\n\t      hold >>>= 5;\n\t      bits -= 5;\n\t      //---//\n\t      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n\t      //--- DROPBITS(5) ---//\n\t      hold >>>= 5;\n\t      bits -= 5;\n\t      //---//\n\t      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n\t      //--- DROPBITS(4) ---//\n\t      hold >>>= 4;\n\t      bits -= 4;\n\t      //---//\n\t//#ifndef PKZIP_BUG_WORKAROUND\n\t      if (state.nlen > 286 || state.ndist > 30) {\n\t        strm.msg = 'too many length or distance symbols';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t//#endif\n\t      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n\t      state.have = 0;\n\t      state.mode = LENLENS;\n\t      /* falls through */\n\t    case LENLENS:\n\t      while (state.have < state.ncode) {\n\t        //=== NEEDBITS(3);\n\t        while (bits < 3) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n\t        //--- DROPBITS(3) ---//\n\t        hold >>>= 3;\n\t        bits -= 3;\n\t        //---//\n\t      }\n\t      while (state.have < 19) {\n\t        state.lens[order[state.have++]] = 0;\n\t      }\n\t      // We have separate tables & no pointers. 2 commented lines below not needed.\n\t      //state.next = state.codes;\n\t      //state.lencode = state.next;\n\t      // Switch to use dynamic table\n\t      state.lencode = state.lendyn;\n\t      state.lenbits = 7;\n\t\n\t      opts = { bits: state.lenbits };\n\t      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n\t      state.lenbits = opts.bits;\n\t\n\t      if (ret) {\n\t        strm.msg = 'invalid code lengths set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n\t      state.have = 0;\n\t      state.mode = CODELENS;\n\t      /* falls through */\n\t    case CODELENS:\n\t      while (state.have < state.nlen + state.ndist) {\n\t        for (;;) {\n\t          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n\t          here_bits = here >>> 24;\n\t          here_op = (here >>> 16) & 0xff;\n\t          here_val = here & 0xffff;\n\t\n\t          if ((here_bits) <= bits) { break; }\n\t          //--- PULLBYTE() ---//\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t          //---//\n\t        }\n\t        if (here_val < 16) {\n\t          //--- DROPBITS(here.bits) ---//\n\t          hold >>>= here_bits;\n\t          bits -= here_bits;\n\t          //---//\n\t          state.lens[state.have++] = here_val;\n\t        }\n\t        else {\n\t          if (here_val === 16) {\n\t            //=== NEEDBITS(here.bits + 2);\n\t            n = here_bits + 2;\n\t            while (bits < n) {\n\t              if (have === 0) { break inf_leave; }\n\t              have--;\n\t              hold += input[next++] << bits;\n\t              bits += 8;\n\t            }\n\t            //===//\n\t            //--- DROPBITS(here.bits) ---//\n\t            hold >>>= here_bits;\n\t            bits -= here_bits;\n\t            //---//\n\t            if (state.have === 0) {\n\t              strm.msg = 'invalid bit length repeat';\n\t              state.mode = BAD;\n\t              break;\n\t            }\n\t            len = state.lens[state.have - 1];\n\t            copy = 3 + (hold & 0x03);//BITS(2);\n\t            //--- DROPBITS(2) ---//\n\t            hold >>>= 2;\n\t            bits -= 2;\n\t            //---//\n\t          }\n\t          else if (here_val === 17) {\n\t            //=== NEEDBITS(here.bits + 3);\n\t            n = here_bits + 3;\n\t            while (bits < n) {\n\t              if (have === 0) { break inf_leave; }\n\t              have--;\n\t              hold += input[next++] << bits;\n\t              bits += 8;\n\t            }\n\t            //===//\n\t            //--- DROPBITS(here.bits) ---//\n\t            hold >>>= here_bits;\n\t            bits -= here_bits;\n\t            //---//\n\t            len = 0;\n\t            copy = 3 + (hold & 0x07);//BITS(3);\n\t            //--- DROPBITS(3) ---//\n\t            hold >>>= 3;\n\t            bits -= 3;\n\t            //---//\n\t          }\n\t          else {\n\t            //=== NEEDBITS(here.bits + 7);\n\t            n = here_bits + 7;\n\t            while (bits < n) {\n\t              if (have === 0) { break inf_leave; }\n\t              have--;\n\t              hold += input[next++] << bits;\n\t              bits += 8;\n\t            }\n\t            //===//\n\t            //--- DROPBITS(here.bits) ---//\n\t            hold >>>= here_bits;\n\t            bits -= here_bits;\n\t            //---//\n\t            len = 0;\n\t            copy = 11 + (hold & 0x7f);//BITS(7);\n\t            //--- DROPBITS(7) ---//\n\t            hold >>>= 7;\n\t            bits -= 7;\n\t            //---//\n\t          }\n\t          if (state.have + copy > state.nlen + state.ndist) {\n\t            strm.msg = 'invalid bit length repeat';\n\t            state.mode = BAD;\n\t            break;\n\t          }\n\t          while (copy--) {\n\t            state.lens[state.have++] = len;\n\t          }\n\t        }\n\t      }\n\t\n\t      /* handle error breaks in while */\n\t      if (state.mode === BAD) { break; }\n\t\n\t      /* check for end-of-block code (better have one) */\n\t      if (state.lens[256] === 0) {\n\t        strm.msg = 'invalid code -- missing end-of-block';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t\n\t      /* build code tables -- note: do not change the lenbits or distbits\n\t         values here (9 and 6) without reading the comments in inftrees.h\n\t         concerning the ENOUGH constants, which depend on those values */\n\t      state.lenbits = 9;\n\t\n\t      opts = { bits: state.lenbits };\n\t      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n\t      // We have separate tables & no pointers. 2 commented lines below not needed.\n\t      // state.next_index = opts.table_index;\n\t      state.lenbits = opts.bits;\n\t      // state.lencode = state.next;\n\t\n\t      if (ret) {\n\t        strm.msg = 'invalid literal/lengths set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t\n\t      state.distbits = 6;\n\t      //state.distcode.copy(state.codes);\n\t      // Switch to use dynamic table\n\t      state.distcode = state.distdyn;\n\t      opts = { bits: state.distbits };\n\t      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n\t      // We have separate tables & no pointers. 2 commented lines below not needed.\n\t      // state.next_index = opts.table_index;\n\t      state.distbits = opts.bits;\n\t      // state.distcode = state.next;\n\t\n\t      if (ret) {\n\t        strm.msg = 'invalid distances set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      //Tracev((stderr, 'inflate:       codes ok\\n'));\n\t      state.mode = LEN_;\n\t      if (flush === Z_TREES) { break inf_leave; }\n\t      /* falls through */\n\t    case LEN_:\n\t      state.mode = LEN;\n\t      /* falls through */\n\t    case LEN:\n\t      if (have >= 6 && left >= 258) {\n\t        //--- RESTORE() ---\n\t        strm.next_out = put;\n\t        strm.avail_out = left;\n\t        strm.next_in = next;\n\t        strm.avail_in = have;\n\t        state.hold = hold;\n\t        state.bits = bits;\n\t        //---\n\t        inflate_fast(strm, _out);\n\t        //--- LOAD() ---\n\t        put = strm.next_out;\n\t        output = strm.output;\n\t        left = strm.avail_out;\n\t        next = strm.next_in;\n\t        input = strm.input;\n\t        have = strm.avail_in;\n\t        hold = state.hold;\n\t        bits = state.bits;\n\t        //---\n\t\n\t        if (state.mode === TYPE) {\n\t          state.back = -1;\n\t        }\n\t        break;\n\t      }\n\t      state.back = 0;\n\t      for (;;) {\n\t        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n\t        here_bits = here >>> 24;\n\t        here_op = (here >>> 16) & 0xff;\n\t        here_val = here & 0xffff;\n\t\n\t        if (here_bits <= bits) { break; }\n\t        //--- PULLBYTE() ---//\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t        //---//\n\t      }\n\t      if (here_op && (here_op & 0xf0) === 0) {\n\t        last_bits = here_bits;\n\t        last_op = here_op;\n\t        last_val = here_val;\n\t        for (;;) {\n\t          here = state.lencode[last_val +\n\t                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n\t          here_bits = here >>> 24;\n\t          here_op = (here >>> 16) & 0xff;\n\t          here_val = here & 0xffff;\n\t\n\t          if ((last_bits + here_bits) <= bits) { break; }\n\t          //--- PULLBYTE() ---//\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t          //---//\n\t        }\n\t        //--- DROPBITS(last.bits) ---//\n\t        hold >>>= last_bits;\n\t        bits -= last_bits;\n\t        //---//\n\t        state.back += last_bits;\n\t      }\n\t      //--- DROPBITS(here.bits) ---//\n\t      hold >>>= here_bits;\n\t      bits -= here_bits;\n\t      //---//\n\t      state.back += here_bits;\n\t      state.length = here_val;\n\t      if (here_op === 0) {\n\t        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n\t        //        \"inflate:         literal '%c'\\n\" :\n\t        //        \"inflate:         literal 0x%02x\\n\", here.val));\n\t        state.mode = LIT;\n\t        break;\n\t      }\n\t      if (here_op & 32) {\n\t        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n\t        state.back = -1;\n\t        state.mode = TYPE;\n\t        break;\n\t      }\n\t      if (here_op & 64) {\n\t        strm.msg = 'invalid literal/length code';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.extra = here_op & 15;\n\t      state.mode = LENEXT;\n\t      /* falls through */\n\t    case LENEXT:\n\t      if (state.extra) {\n\t        //=== NEEDBITS(state.extra);\n\t        n = state.extra;\n\t        while (bits < n) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n\t        //--- DROPBITS(state.extra) ---//\n\t        hold >>>= state.extra;\n\t        bits -= state.extra;\n\t        //---//\n\t        state.back += state.extra;\n\t      }\n\t      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n\t      state.was = state.length;\n\t      state.mode = DIST;\n\t      /* falls through */\n\t    case DIST:\n\t      for (;;) {\n\t        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n\t        here_bits = here >>> 24;\n\t        here_op = (here >>> 16) & 0xff;\n\t        here_val = here & 0xffff;\n\t\n\t        if ((here_bits) <= bits) { break; }\n\t        //--- PULLBYTE() ---//\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t        //---//\n\t      }\n\t      if ((here_op & 0xf0) === 0) {\n\t        last_bits = here_bits;\n\t        last_op = here_op;\n\t        last_val = here_val;\n\t        for (;;) {\n\t          here = state.distcode[last_val +\n\t                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n\t          here_bits = here >>> 24;\n\t          here_op = (here >>> 16) & 0xff;\n\t          here_val = here & 0xffff;\n\t\n\t          if ((last_bits + here_bits) <= bits) { break; }\n\t          //--- PULLBYTE() ---//\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t          //---//\n\t        }\n\t        //--- DROPBITS(last.bits) ---//\n\t        hold >>>= last_bits;\n\t        bits -= last_bits;\n\t        //---//\n\t        state.back += last_bits;\n\t      }\n\t      //--- DROPBITS(here.bits) ---//\n\t      hold >>>= here_bits;\n\t      bits -= here_bits;\n\t      //---//\n\t      state.back += here_bits;\n\t      if (here_op & 64) {\n\t        strm.msg = 'invalid distance code';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.offset = here_val;\n\t      state.extra = (here_op) & 15;\n\t      state.mode = DISTEXT;\n\t      /* falls through */\n\t    case DISTEXT:\n\t      if (state.extra) {\n\t        //=== NEEDBITS(state.extra);\n\t        n = state.extra;\n\t        while (bits < n) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n\t        //--- DROPBITS(state.extra) ---//\n\t        hold >>>= state.extra;\n\t        bits -= state.extra;\n\t        //---//\n\t        state.back += state.extra;\n\t      }\n\t//#ifdef INFLATE_STRICT\n\t      if (state.offset > state.dmax) {\n\t        strm.msg = 'invalid distance too far back';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t//#endif\n\t      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n\t      state.mode = MATCH;\n\t      /* falls through */\n\t    case MATCH:\n\t      if (left === 0) { break inf_leave; }\n\t      copy = _out - left;\n\t      if (state.offset > copy) {         /* copy from window */\n\t        copy = state.offset - copy;\n\t        if (copy > state.whave) {\n\t          if (state.sane) {\n\t            strm.msg = 'invalid distance too far back';\n\t            state.mode = BAD;\n\t            break;\n\t          }\n\t// (!) This block is disabled in zlib defailts,\n\t// don't enable it for binary compatibility\n\t//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n\t//          Trace((stderr, \"inflate.c too far\\n\"));\n\t//          copy -= state.whave;\n\t//          if (copy > state.length) { copy = state.length; }\n\t//          if (copy > left) { copy = left; }\n\t//          left -= copy;\n\t//          state.length -= copy;\n\t//          do {\n\t//            output[put++] = 0;\n\t//          } while (--copy);\n\t//          if (state.length === 0) { state.mode = LEN; }\n\t//          break;\n\t//#endif\n\t        }\n\t        if (copy > state.wnext) {\n\t          copy -= state.wnext;\n\t          from = state.wsize - copy;\n\t        }\n\t        else {\n\t          from = state.wnext - copy;\n\t        }\n\t        if (copy > state.length) { copy = state.length; }\n\t        from_source = state.window;\n\t      }\n\t      else {                              /* copy from output */\n\t        from_source = output;\n\t        from = put - state.offset;\n\t        copy = state.length;\n\t      }\n\t      if (copy > left) { copy = left; }\n\t      left -= copy;\n\t      state.length -= copy;\n\t      do {\n\t        output[put++] = from_source[from++];\n\t      } while (--copy);\n\t      if (state.length === 0) { state.mode = LEN; }\n\t      break;\n\t    case LIT:\n\t      if (left === 0) { break inf_leave; }\n\t      output[put++] = state.length;\n\t      left--;\n\t      state.mode = LEN;\n\t      break;\n\t    case CHECK:\n\t      if (state.wrap) {\n\t        //=== NEEDBITS(32);\n\t        while (bits < 32) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          // Use '|' insdead of '+' to make sure that result is signed\n\t          hold |= input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        _out -= left;\n\t        strm.total_out += _out;\n\t        state.total += _out;\n\t        if (_out) {\n\t          strm.adler = state.check =\n\t              /*UPDATE(state.check, put - _out, _out);*/\n\t              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\t\n\t        }\n\t        _out = left;\n\t        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n\t        if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n\t          strm.msg = 'incorrect data check';\n\t          state.mode = BAD;\n\t          break;\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n\t      }\n\t      state.mode = LENGTH;\n\t      /* falls through */\n\t    case LENGTH:\n\t      if (state.wrap && state.flags) {\n\t        //=== NEEDBITS(32);\n\t        while (bits < 32) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        if (hold !== (state.total & 0xffffffff)) {\n\t          strm.msg = 'incorrect length check';\n\t          state.mode = BAD;\n\t          break;\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n\t      }\n\t      state.mode = DONE;\n\t      /* falls through */\n\t    case DONE:\n\t      ret = Z_STREAM_END;\n\t      break inf_leave;\n\t    case BAD:\n\t      ret = Z_DATA_ERROR;\n\t      break inf_leave;\n\t    case MEM:\n\t      return Z_MEM_ERROR;\n\t    case SYNC:\n\t      /* falls through */\n\t    default:\n\t      return Z_STREAM_ERROR;\n\t    }\n\t  }\n\t\n\t  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\t\n\t  /*\n\t     Return from inflate(), updating the total counts and the check value.\n\t     If there was no progress during the inflate() call, return a buffer\n\t     error.  Call updatewindow() to create and/or update the window state.\n\t     Note: a memory error from inflate() is non-recoverable.\n\t   */\n\t\n\t  //--- RESTORE() ---\n\t  strm.next_out = put;\n\t  strm.avail_out = left;\n\t  strm.next_in = next;\n\t  strm.avail_in = have;\n\t  state.hold = hold;\n\t  state.bits = bits;\n\t  //---\n\t\n\t  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n\t                      (state.mode < CHECK || flush !== Z_FINISH))) {\n\t    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n\t      state.mode = MEM;\n\t      return Z_MEM_ERROR;\n\t    }\n\t  }\n\t  _in -= strm.avail_in;\n\t  _out -= strm.avail_out;\n\t  strm.total_in += _in;\n\t  strm.total_out += _out;\n\t  state.total += _out;\n\t  if (state.wrap && _out) {\n\t    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n\t      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n\t  }\n\t  strm.data_type = state.bits + (state.last ? 64 : 0) +\n\t                    (state.mode === TYPE ? 128 : 0) +\n\t                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n\t  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n\t    ret = Z_BUF_ERROR;\n\t  }\n\t  return ret;\n\t}\n\t\n\tfunction inflateEnd(strm) {\n\t\n\t  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  var state = strm.state;\n\t  if (state.window) {\n\t    state.window = null;\n\t  }\n\t  strm.state = null;\n\t  return Z_OK;\n\t}\n\t\n\tfunction inflateGetHeader(strm, head) {\n\t  var state;\n\t\n\t  /* check state */\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\t\n\t  /* save header structure */\n\t  state.head = head;\n\t  head.done = false;\n\t  return Z_OK;\n\t}\n\t\n\tfunction inflateSetDictionary(strm, dictionary) {\n\t  var dictLength = dictionary.length;\n\t\n\t  var state;\n\t  var dictid;\n\t  var ret;\n\t\n\t  /* check state */\n\t  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t\n\t  if (state.wrap !== 0 && state.mode !== DICT) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  /* check for correct dictionary identifier */\n\t  if (state.mode === DICT) {\n\t    dictid = 1; /* adler32(0, null, 0)*/\n\t    /* dictid = adler32(dictid, dictionary, dictLength); */\n\t    dictid = adler32(dictid, dictionary, dictLength, 0);\n\t    if (dictid !== state.check) {\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  /* copy dictionary to window using updatewindow(), which will amend the\n\t   existing dictionary if appropriate */\n\t  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n\t  if (ret) {\n\t    state.mode = MEM;\n\t    return Z_MEM_ERROR;\n\t  }\n\t  state.havedict = 1;\n\t  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n\t  return Z_OK;\n\t}\n\t\n\texports.inflateReset = inflateReset;\n\texports.inflateReset2 = inflateReset2;\n\texports.inflateResetKeep = inflateResetKeep;\n\texports.inflateInit = inflateInit;\n\texports.inflateInit2 = inflateInit2;\n\texports.inflate = inflate;\n\texports.inflateEnd = inflateEnd;\n\texports.inflateGetHeader = inflateGetHeader;\n\texports.inflateSetDictionary = inflateSetDictionary;\n\texports.inflateInfo = 'pako inflate (from Nodeca project)';\n\t\n\t/* Not implemented\n\texports.inflateCopy = inflateCopy;\n\texports.inflateGetDictionary = inflateGetDictionary;\n\texports.inflateMark = inflateMark;\n\texports.inflatePrime = inflatePrime;\n\texports.inflateSync = inflateSync;\n\texports.inflateSyncPoint = inflateSyncPoint;\n\texports.inflateUndermine = inflateUndermine;\n\t*/\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// See state defs from inflate.js\n\tvar BAD = 30;       /* got a data error -- remain here until reset */\n\tvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\t\n\t/*\n\t   Decode literal, length, and distance codes and write out the resulting\n\t   literal and match bytes until either not enough input or output is\n\t   available, an end-of-block is encountered, or a data error is encountered.\n\t   When large enough input and output buffers are supplied to inflate(), for\n\t   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n\t   inflate execution time is spent in this routine.\n\t\n\t   Entry assumptions:\n\t\n\t        state.mode === LEN\n\t        strm.avail_in >= 6\n\t        strm.avail_out >= 258\n\t        start >= strm.avail_out\n\t        state.bits < 8\n\t\n\t   On return, state.mode is one of:\n\t\n\t        LEN -- ran out of enough output space or enough available input\n\t        TYPE -- reached end of block code, inflate() to interpret next block\n\t        BAD -- error in block data\n\t\n\t   Notes:\n\t\n\t    - The maximum input bits used by a length/distance pair is 15 bits for the\n\t      length code, 5 bits for the length extra, 15 bits for the distance code,\n\t      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n\t      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n\t      checking for available input while decoding.\n\t\n\t    - The maximum bytes that a single length/distance pair can output is 258\n\t      bytes, which is the maximum length that can be coded.  inflate_fast()\n\t      requires strm.avail_out >= 258 for each loop to avoid checking for\n\t      output space.\n\t */\n\tmodule.exports = function inflate_fast(strm, start) {\n\t  var state;\n\t  var _in;                    /* local strm.input */\n\t  var last;                   /* have enough input while in < last */\n\t  var _out;                   /* local strm.output */\n\t  var beg;                    /* inflate()'s initial strm.output */\n\t  var end;                    /* while out < end, enough space available */\n\t//#ifdef INFLATE_STRICT\n\t  var dmax;                   /* maximum distance from zlib header */\n\t//#endif\n\t  var wsize;                  /* window size or zero if not using window */\n\t  var whave;                  /* valid bytes in the window */\n\t  var wnext;                  /* window write index */\n\t  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n\t  var s_window;               /* allocated sliding window, if wsize != 0 */\n\t  var hold;                   /* local strm.hold */\n\t  var bits;                   /* local strm.bits */\n\t  var lcode;                  /* local strm.lencode */\n\t  var dcode;                  /* local strm.distcode */\n\t  var lmask;                  /* mask for first level of length codes */\n\t  var dmask;                  /* mask for first level of distance codes */\n\t  var here;                   /* retrieved table entry */\n\t  var op;                     /* code bits, operation, extra bits, or */\n\t                              /*  window position, window bytes to copy */\n\t  var len;                    /* match length, unused bytes */\n\t  var dist;                   /* match distance */\n\t  var from;                   /* where to copy match from */\n\t  var from_source;\n\t\n\t\n\t  var input, output; // JS specific, because we have no pointers\n\t\n\t  /* copy state to local variables */\n\t  state = strm.state;\n\t  //here = state.here;\n\t  _in = strm.next_in;\n\t  input = strm.input;\n\t  last = _in + (strm.avail_in - 5);\n\t  _out = strm.next_out;\n\t  output = strm.output;\n\t  beg = _out - (start - strm.avail_out);\n\t  end = _out + (strm.avail_out - 257);\n\t//#ifdef INFLATE_STRICT\n\t  dmax = state.dmax;\n\t//#endif\n\t  wsize = state.wsize;\n\t  whave = state.whave;\n\t  wnext = state.wnext;\n\t  s_window = state.window;\n\t  hold = state.hold;\n\t  bits = state.bits;\n\t  lcode = state.lencode;\n\t  dcode = state.distcode;\n\t  lmask = (1 << state.lenbits) - 1;\n\t  dmask = (1 << state.distbits) - 1;\n\t\n\t\n\t  /* decode literals and length/distances until end-of-block or not enough\n\t     input data or output space */\n\t\n\t  top:\n\t  do {\n\t    if (bits < 15) {\n\t      hold += input[_in++] << bits;\n\t      bits += 8;\n\t      hold += input[_in++] << bits;\n\t      bits += 8;\n\t    }\n\t\n\t    here = lcode[hold & lmask];\n\t\n\t    dolen:\n\t    for (;;) { // Goto emulation\n\t      op = here >>> 24/*here.bits*/;\n\t      hold >>>= op;\n\t      bits -= op;\n\t      op = (here >>> 16) & 0xff/*here.op*/;\n\t      if (op === 0) {                          /* literal */\n\t        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n\t        //        \"inflate:         literal '%c'\\n\" :\n\t        //        \"inflate:         literal 0x%02x\\n\", here.val));\n\t        output[_out++] = here & 0xffff/*here.val*/;\n\t      }\n\t      else if (op & 16) {                     /* length base */\n\t        len = here & 0xffff/*here.val*/;\n\t        op &= 15;                           /* number of extra bits */\n\t        if (op) {\n\t          if (bits < op) {\n\t            hold += input[_in++] << bits;\n\t            bits += 8;\n\t          }\n\t          len += hold & ((1 << op) - 1);\n\t          hold >>>= op;\n\t          bits -= op;\n\t        }\n\t        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n\t        if (bits < 15) {\n\t          hold += input[_in++] << bits;\n\t          bits += 8;\n\t          hold += input[_in++] << bits;\n\t          bits += 8;\n\t        }\n\t        here = dcode[hold & dmask];\n\t\n\t        dodist:\n\t        for (;;) { // goto emulation\n\t          op = here >>> 24/*here.bits*/;\n\t          hold >>>= op;\n\t          bits -= op;\n\t          op = (here >>> 16) & 0xff/*here.op*/;\n\t\n\t          if (op & 16) {                      /* distance base */\n\t            dist = here & 0xffff/*here.val*/;\n\t            op &= 15;                       /* number of extra bits */\n\t            if (bits < op) {\n\t              hold += input[_in++] << bits;\n\t              bits += 8;\n\t              if (bits < op) {\n\t                hold += input[_in++] << bits;\n\t                bits += 8;\n\t              }\n\t            }\n\t            dist += hold & ((1 << op) - 1);\n\t//#ifdef INFLATE_STRICT\n\t            if (dist > dmax) {\n\t              strm.msg = 'invalid distance too far back';\n\t              state.mode = BAD;\n\t              break top;\n\t            }\n\t//#endif\n\t            hold >>>= op;\n\t            bits -= op;\n\t            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n\t            op = _out - beg;                /* max distance in output */\n\t            if (dist > op) {                /* see if copy from window */\n\t              op = dist - op;               /* distance back in window */\n\t              if (op > whave) {\n\t                if (state.sane) {\n\t                  strm.msg = 'invalid distance too far back';\n\t                  state.mode = BAD;\n\t                  break top;\n\t                }\n\t\n\t// (!) This block is disabled in zlib defailts,\n\t// don't enable it for binary compatibility\n\t//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n\t//                if (len <= op - whave) {\n\t//                  do {\n\t//                    output[_out++] = 0;\n\t//                  } while (--len);\n\t//                  continue top;\n\t//                }\n\t//                len -= op - whave;\n\t//                do {\n\t//                  output[_out++] = 0;\n\t//                } while (--op > whave);\n\t//                if (op === 0) {\n\t//                  from = _out - dist;\n\t//                  do {\n\t//                    output[_out++] = output[from++];\n\t//                  } while (--len);\n\t//                  continue top;\n\t//                }\n\t//#endif\n\t              }\n\t              from = 0; // window index\n\t              from_source = s_window;\n\t              if (wnext === 0) {           /* very common case */\n\t                from += wsize - op;\n\t                if (op < len) {         /* some from window */\n\t                  len -= op;\n\t                  do {\n\t                    output[_out++] = s_window[from++];\n\t                  } while (--op);\n\t                  from = _out - dist;  /* rest from output */\n\t                  from_source = output;\n\t                }\n\t              }\n\t              else if (wnext < op) {      /* wrap around window */\n\t                from += wsize + wnext - op;\n\t                op -= wnext;\n\t                if (op < len) {         /* some from end of window */\n\t                  len -= op;\n\t                  do {\n\t                    output[_out++] = s_window[from++];\n\t                  } while (--op);\n\t                  from = 0;\n\t                  if (wnext < len) {  /* some from start of window */\n\t                    op = wnext;\n\t                    len -= op;\n\t                    do {\n\t                      output[_out++] = s_window[from++];\n\t                    } while (--op);\n\t                    from = _out - dist;      /* rest from output */\n\t                    from_source = output;\n\t                  }\n\t                }\n\t              }\n\t              else {                      /* contiguous in window */\n\t                from += wnext - op;\n\t                if (op < len) {         /* some from window */\n\t                  len -= op;\n\t                  do {\n\t                    output[_out++] = s_window[from++];\n\t                  } while (--op);\n\t                  from = _out - dist;  /* rest from output */\n\t                  from_source = output;\n\t                }\n\t              }\n\t              while (len > 2) {\n\t                output[_out++] = from_source[from++];\n\t                output[_out++] = from_source[from++];\n\t                output[_out++] = from_source[from++];\n\t                len -= 3;\n\t              }\n\t              if (len) {\n\t                output[_out++] = from_source[from++];\n\t                if (len > 1) {\n\t                  output[_out++] = from_source[from++];\n\t                }\n\t              }\n\t            }\n\t            else {\n\t              from = _out - dist;          /* copy direct from output */\n\t              do {                        /* minimum length is three */\n\t                output[_out++] = output[from++];\n\t                output[_out++] = output[from++];\n\t                output[_out++] = output[from++];\n\t                len -= 3;\n\t              } while (len > 2);\n\t              if (len) {\n\t                output[_out++] = output[from++];\n\t                if (len > 1) {\n\t                  output[_out++] = output[from++];\n\t                }\n\t              }\n\t            }\n\t          }\n\t          else if ((op & 64) === 0) {          /* 2nd level distance code */\n\t            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n\t            continue dodist;\n\t          }\n\t          else {\n\t            strm.msg = 'invalid distance code';\n\t            state.mode = BAD;\n\t            break top;\n\t          }\n\t\n\t          break; // need to emulate goto via \"continue\"\n\t        }\n\t      }\n\t      else if ((op & 64) === 0) {              /* 2nd level length code */\n\t        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n\t        continue dolen;\n\t      }\n\t      else if (op & 32) {                     /* end-of-block */\n\t        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n\t        state.mode = TYPE;\n\t        break top;\n\t      }\n\t      else {\n\t        strm.msg = 'invalid literal/length code';\n\t        state.mode = BAD;\n\t        break top;\n\t      }\n\t\n\t      break; // need to emulate goto via \"continue\"\n\t    }\n\t  } while (_in < last && _out < end);\n\t\n\t  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n\t  len = bits >> 3;\n\t  _in -= len;\n\t  bits -= len << 3;\n\t  hold &= (1 << bits) - 1;\n\t\n\t  /* update state and return */\n\t  strm.next_in = _in;\n\t  strm.next_out = _out;\n\t  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n\t  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n\t  state.hold = hold;\n\t  state.bits = bits;\n\t  return;\n\t};\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar utils = __webpack_require__(35);\n\t\n\tvar MAXBITS = 15;\n\tvar ENOUGH_LENS = 852;\n\tvar ENOUGH_DISTS = 592;\n\t//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\t\n\tvar CODES = 0;\n\tvar LENS = 1;\n\tvar DISTS = 2;\n\t\n\tvar lbase = [ /* Length codes 257..285 base */\n\t  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n\t  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n\t];\n\t\n\tvar lext = [ /* Length codes 257..285 extra */\n\t  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n\t  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n\t];\n\t\n\tvar dbase = [ /* Distance codes 0..29 base */\n\t  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n\t  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n\t  8193, 12289, 16385, 24577, 0, 0\n\t];\n\t\n\tvar dext = [ /* Distance codes 0..29 extra */\n\t  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n\t  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n\t  28, 28, 29, 29, 64, 64\n\t];\n\t\n\tmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n\t{\n\t  var bits = opts.bits;\n\t      //here = opts.here; /* table entry for duplication */\n\t\n\t  var len = 0;               /* a code's length in bits */\n\t  var sym = 0;               /* index of code symbols */\n\t  var min = 0, max = 0;          /* minimum and maximum code lengths */\n\t  var root = 0;              /* number of index bits for root table */\n\t  var curr = 0;              /* number of index bits for current table */\n\t  var drop = 0;              /* code bits to drop for sub-table */\n\t  var left = 0;                   /* number of prefix codes available */\n\t  var used = 0;              /* code entries in table used */\n\t  var huff = 0;              /* Huffman code */\n\t  var incr;              /* for incrementing code, index */\n\t  var fill;              /* index for replicating entries */\n\t  var low;               /* low bits for current root entry */\n\t  var mask;              /* mask for low root bits */\n\t  var next;             /* next available space in table */\n\t  var base = null;     /* base value table to use */\n\t  var base_index = 0;\n\t//  var shoextra;    /* extra bits table to use */\n\t  var end;                    /* use base and extra for symbol > end */\n\t  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n\t  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n\t  var extra = null;\n\t  var extra_index = 0;\n\t\n\t  var here_bits, here_op, here_val;\n\t\n\t  /*\n\t   Process a set of code lengths to create a canonical Huffman code.  The\n\t   code lengths are lens[0..codes-1].  Each length corresponds to the\n\t   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n\t   symbols by length from short to long, and retaining the symbol order\n\t   for codes with equal lengths.  Then the code starts with all zero bits\n\t   for the first code of the shortest length, and the codes are integer\n\t   increments for the same length, and zeros are appended as the length\n\t   increases.  For the deflate format, these bits are stored backwards\n\t   from their more natural integer increment ordering, and so when the\n\t   decoding tables are built in the large loop below, the integer codes\n\t   are incremented backwards.\n\t\n\t   This routine assumes, but does not check, that all of the entries in\n\t   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n\t   1..MAXBITS is interpreted as that code length.  zero means that that\n\t   symbol does not occur in this code.\n\t\n\t   The codes are sorted by computing a count of codes for each length,\n\t   creating from that a table of starting indices for each length in the\n\t   sorted table, and then entering the symbols in order in the sorted\n\t   table.  The sorted table is work[], with that space being provided by\n\t   the caller.\n\t\n\t   The length counts are used for other purposes as well, i.e. finding\n\t   the minimum and maximum length codes, determining if there are any\n\t   codes at all, checking for a valid set of lengths, and looking ahead\n\t   at length counts to determine sub-table sizes when building the\n\t   decoding tables.\n\t   */\n\t\n\t  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n\t  for (len = 0; len <= MAXBITS; len++) {\n\t    count[len] = 0;\n\t  }\n\t  for (sym = 0; sym < codes; sym++) {\n\t    count[lens[lens_index + sym]]++;\n\t  }\n\t\n\t  /* bound code lengths, force root to be within code lengths */\n\t  root = bits;\n\t  for (max = MAXBITS; max >= 1; max--) {\n\t    if (count[max] !== 0) { break; }\n\t  }\n\t  if (root > max) {\n\t    root = max;\n\t  }\n\t  if (max === 0) {                     /* no symbols to code at all */\n\t    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n\t    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n\t    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n\t    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\t\n\t\n\t    //table.op[opts.table_index] = 64;\n\t    //table.bits[opts.table_index] = 1;\n\t    //table.val[opts.table_index++] = 0;\n\t    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\t\n\t    opts.bits = 1;\n\t    return 0;     /* no symbols, but wait for decoding to report error */\n\t  }\n\t  for (min = 1; min < max; min++) {\n\t    if (count[min] !== 0) { break; }\n\t  }\n\t  if (root < min) {\n\t    root = min;\n\t  }\n\t\n\t  /* check for an over-subscribed or incomplete set of lengths */\n\t  left = 1;\n\t  for (len = 1; len <= MAXBITS; len++) {\n\t    left <<= 1;\n\t    left -= count[len];\n\t    if (left < 0) {\n\t      return -1;\n\t    }        /* over-subscribed */\n\t  }\n\t  if (left > 0 && (type === CODES || max !== 1)) {\n\t    return -1;                      /* incomplete set */\n\t  }\n\t\n\t  /* generate offsets into symbol table for each length for sorting */\n\t  offs[1] = 0;\n\t  for (len = 1; len < MAXBITS; len++) {\n\t    offs[len + 1] = offs[len] + count[len];\n\t  }\n\t\n\t  /* sort symbols by length, by symbol order within each length */\n\t  for (sym = 0; sym < codes; sym++) {\n\t    if (lens[lens_index + sym] !== 0) {\n\t      work[offs[lens[lens_index + sym]]++] = sym;\n\t    }\n\t  }\n\t\n\t  /*\n\t   Create and fill in decoding tables.  In this loop, the table being\n\t   filled is at next and has curr index bits.  The code being used is huff\n\t   with length len.  That code is converted to an index by dropping drop\n\t   bits off of the bottom.  For codes where len is less than drop + curr,\n\t   those top drop + curr - len bits are incremented through all values to\n\t   fill the table with replicated entries.\n\t\n\t   root is the number of index bits for the root table.  When len exceeds\n\t   root, sub-tables are created pointed to by the root entry with an index\n\t   of the low root bits of huff.  This is saved in low to check for when a\n\t   new sub-table should be started.  drop is zero when the root table is\n\t   being filled, and drop is root when sub-tables are being filled.\n\t\n\t   When a new sub-table is needed, it is necessary to look ahead in the\n\t   code lengths to determine what size sub-table is needed.  The length\n\t   counts are used for this, and so count[] is decremented as codes are\n\t   entered in the tables.\n\t\n\t   used keeps track of how many table entries have been allocated from the\n\t   provided *table space.  It is checked for LENS and DIST tables against\n\t   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n\t   the initial root table size constants.  See the comments in inftrees.h\n\t   for more information.\n\t\n\t   sym increments through all symbols, and the loop terminates when\n\t   all codes of length max, i.e. all codes, have been processed.  This\n\t   routine permits incomplete codes, so another loop after this one fills\n\t   in the rest of the decoding tables with invalid code markers.\n\t   */\n\t\n\t  /* set up for code type */\n\t  // poor man optimization - use if-else instead of switch,\n\t  // to avoid deopts in old v8\n\t  if (type === CODES) {\n\t    base = extra = work;    /* dummy value--not used */\n\t    end = 19;\n\t\n\t  } else if (type === LENS) {\n\t    base = lbase;\n\t    base_index -= 257;\n\t    extra = lext;\n\t    extra_index -= 257;\n\t    end = 256;\n\t\n\t  } else {                    /* DISTS */\n\t    base = dbase;\n\t    extra = dext;\n\t    end = -1;\n\t  }\n\t\n\t  /* initialize opts for loop */\n\t  huff = 0;                   /* starting code */\n\t  sym = 0;                    /* starting code symbol */\n\t  len = min;                  /* starting code length */\n\t  next = table_index;              /* current table to fill in */\n\t  curr = root;                /* current table index bits */\n\t  drop = 0;                   /* current bits to drop from code for index */\n\t  low = -1;                   /* trigger new sub-table when len > root */\n\t  used = 1 << root;          /* use root table entries */\n\t  mask = used - 1;            /* mask for comparing low */\n\t\n\t  /* check available table space */\n\t  if ((type === LENS && used > ENOUGH_LENS) ||\n\t    (type === DISTS && used > ENOUGH_DISTS)) {\n\t    return 1;\n\t  }\n\t\n\t  var i = 0;\n\t  /* process all codes and make table entries */\n\t  for (;;) {\n\t    i++;\n\t    /* create table entry */\n\t    here_bits = len - drop;\n\t    if (work[sym] < end) {\n\t      here_op = 0;\n\t      here_val = work[sym];\n\t    }\n\t    else if (work[sym] > end) {\n\t      here_op = extra[extra_index + work[sym]];\n\t      here_val = base[base_index + work[sym]];\n\t    }\n\t    else {\n\t      here_op = 32 + 64;         /* end of block */\n\t      here_val = 0;\n\t    }\n\t\n\t    /* replicate for those indices with low len bits equal to huff */\n\t    incr = 1 << (len - drop);\n\t    fill = 1 << curr;\n\t    min = fill;                 /* save offset to next table */\n\t    do {\n\t      fill -= incr;\n\t      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n\t    } while (fill !== 0);\n\t\n\t    /* backwards increment the len-bit code huff */\n\t    incr = 1 << (len - 1);\n\t    while (huff & incr) {\n\t      incr >>= 1;\n\t    }\n\t    if (incr !== 0) {\n\t      huff &= incr - 1;\n\t      huff += incr;\n\t    } else {\n\t      huff = 0;\n\t    }\n\t\n\t    /* go to next symbol, update count, len */\n\t    sym++;\n\t    if (--count[len] === 0) {\n\t      if (len === max) { break; }\n\t      len = lens[lens_index + work[sym]];\n\t    }\n\t\n\t    /* create new sub-table if needed */\n\t    if (len > root && (huff & mask) !== low) {\n\t      /* if first time, transition to sub-tables */\n\t      if (drop === 0) {\n\t        drop = root;\n\t      }\n\t\n\t      /* increment past last table */\n\t      next += min;            /* here min is 1 << curr */\n\t\n\t      /* determine length of next table */\n\t      curr = len - drop;\n\t      left = 1 << curr;\n\t      while (curr + drop < max) {\n\t        left -= count[curr + drop];\n\t        if (left <= 0) { break; }\n\t        curr++;\n\t        left <<= 1;\n\t      }\n\t\n\t      /* check for enough space */\n\t      used += 1 << curr;\n\t      if ((type === LENS && used > ENOUGH_LENS) ||\n\t        (type === DISTS && used > ENOUGH_DISTS)) {\n\t        return 1;\n\t      }\n\t\n\t      /* point entry in root table to sub-table */\n\t      low = huff & mask;\n\t      /*table.op[low] = curr;\n\t      table.bits[low] = root;\n\t      table.val[low] = next - opts.table_index;*/\n\t      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n\t    }\n\t  }\n\t\n\t  /* fill in remaining table entry if code is incomplete (guaranteed to have\n\t   at most one remaining entry, since if the code is incomplete, the\n\t   maximum code length that was allowed to get this far is one bit) */\n\t  if (huff !== 0) {\n\t    //table.op[next + huff] = 64;            /* invalid code marker */\n\t    //table.bits[next + huff] = len - drop;\n\t    //table.val[next + huff] = 0;\n\t    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n\t  }\n\t\n\t  /* set return parameters */\n\t  //opts.table_index += used;\n\t  opts.bits = root;\n\t  return 0;\n\t};\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t\n\tfunction ZStream() {\n\t  /* next input byte */\n\t  this.input = null; // JS specific, because we have no pointers\n\t  this.next_in = 0;\n\t  /* number of bytes available at input */\n\t  this.avail_in = 0;\n\t  /* total number of input bytes read so far */\n\t  this.total_in = 0;\n\t  /* next output byte should be put there */\n\t  this.output = null; // JS specific, because we have no pointers\n\t  this.next_out = 0;\n\t  /* remaining free space at output */\n\t  this.avail_out = 0;\n\t  /* total number of bytes output so far */\n\t  this.total_out = 0;\n\t  /* last error message, NULL if no error */\n\t  this.msg = ''/*Z_NULL*/;\n\t  /* not visible by applications */\n\t  this.state = null;\n\t  /* best guess about the data type: binary or text */\n\t  this.data_type = 2/*Z_UNKNOWN*/;\n\t  /* adler32 value of the uncompressed data */\n\t  this.adler = 0;\n\t}\n\t\n\tmodule.exports = ZStream;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"name\": \"doppiojvm\",\n\t\t\"version\": \"0.3.1\",\n\t\t\"engine\": \"node >= 4.0.0\",\n\t\t\"license\": \"MIT\",\n\t\t\"main\": \"dist/release/doppio.js\",\n\t\t\"typings\": \"dist/typings/src/doppiojvm\",\n\t\t\"dependencies\": {\n\t\t\t\"async\": \"^1.5.2\",\n\t\t\t\"browserfs\": \"^0.5.12\",\n\t\t\t\"glob\": \"^7.0.3\",\n\t\t\t\"gunzip-maybe\": \"^1.3.1\",\n\t\t\t\"optimist\": \"~0.6\",\n\t\t\t\"pako\": \"^1.0.1\",\n\t\t\t\"rimraf\": \"^2.5.2\",\n\t\t\t\"source-map-support\": \"^0.4.0\",\n\t\t\t\"tar-fs\": \"^1.12.0\"\n\t\t},\n\t\t\"devDependencies\": {\n\t\t\t\"bfs-buffer\": \"^0.1.7\",\n\t\t\t\"bfs-path\": \"^0.1.2\",\n\t\t\t\"bfs-process\": \"^0.1.6\",\n\t\t\t\"body-parser\": \"^1.15.1\",\n\t\t\t\"cpr\": \"^1.1.1\",\n\t\t\t\"detect-browser\": \"^1.3.1\",\n\t\t\t\"escodegen\": \"^1.8.0\",\n\t\t\t\"esprima\": \"^2.7.2\",\n\t\t\t\"estraverse\": \"^4.2.0\",\n\t\t\t\"express\": \"^4.13.4\",\n\t\t\t\"grunt\": \"^1.0\",\n\t\t\t\"grunt-cli\": \"^1.2\",\n\t\t\t\"grunt-contrib-compress\": \"^1.2.0\",\n\t\t\t\"grunt-contrib-connect\": \"^1.0\",\n\t\t\t\"grunt-contrib-copy\": \"^1.0\",\n\t\t\t\"grunt-contrib-uglify\": \"^1.0\",\n\t\t\t\"grunt-karma\": \"^1.0\",\n\t\t\t\"grunt-lineending\": \"^0.2.4\",\n\t\t\t\"grunt-merge-source-maps\": \"^0.1.0\",\n\t\t\t\"grunt-newer\": \"^1.2.0\",\n\t\t\t\"grunt-ts\": \"^5.5\",\n\t\t\t\"grunt-webpack\": \"^1.0.11\",\n\t\t\t\"imports-loader\": \"^0.6.5\",\n\t\t\t\"jasmine-core\": \"^2.3.4\",\n\t\t\t\"json-loader\": \"^0.5.4\",\n\t\t\t\"karma\": \"^0.13.22\",\n\t\t\t\"karma-chrome-launcher\": \"^1.0\",\n\t\t\t\"karma-firefox-launcher\": \"^1.0\",\n\t\t\t\"karma-ie-launcher\": \"^1.0\",\n\t\t\t\"karma-jasmine\": \"^1.0\",\n\t\t\t\"karma-opera-launcher\": \"^1.0\",\n\t\t\t\"karma-safari-launcher\": \"^1.0\",\n\t\t\t\"locate-java-home\": \"^0.1.4\",\n\t\t\t\"semver\": \"^5.1.0\",\n\t\t\t\"source-map-loader\": \"^0.1.5\",\n\t\t\t\"typescript\": \"^1.8.10\",\n\t\t\t\"uglify-js\": \"^2.6.2\",\n\t\t\t\"underscore\": \"^1.8.3\",\n\t\t\t\"webpack\": \"^1.13.1\",\n\t\t\t\"webpack-dev-server\": \"^1.14.1\"\n\t\t},\n\t\t\"scripts\": {\n\t\t\t\"test\": \"grunt test\",\n\t\t\t\"prepublish\": \"node ./prepublish.js\",\n\t\t\t\"install\": \"node ./install.js\",\n\t\t\t\"appveyor-test\": \"grunt test-browser-appveyor\"\n\t\t},\n\t\t\"repository\": {\n\t\t\t\"type\": \"git\",\n\t\t\t\"url\": \"http://github.com/plasma-umass/doppio.git\"\n\t\t},\n\t\t\"bin\": {\n\t\t\t\"doppio\": \"./bin/doppio\",\n\t\t\t\"doppioh\": \"./bin/doppioh\",\n\t\t\t\"doppio-dev\": \"./bin/doppio-dev\",\n\t\t\t\"doppio-fast-dev\": \"./bin/doppio-fast-dev\"\n\t\t}\n\t};\n\n/***/ },\n/* 45 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function text_diff(a,b,c){return new SequenceMatcher(a,b).text_diff(c)}function __ntuplecomp(a,b){for(var c=Math.max(a.length,b.length),d=0;c>d;d++){if(a[d]<b[d])return-1;if(a[d]>b[d])return 1}return a.length==b.length?0:a.length<b.length?-1:1}function __dictget(a,b,c){return a.hasOwnProperty(b)?a[b]:c}exports.text_diff=text_diff;var SequenceMatcher=function(){function a(a,b){this.a=a,this.b=b,this.b2j={};for(var c=0;c<b.length;c++){var d=b[c];this.b2j.hasOwnProperty(d)?this.b2j[d].push(c):this.b2j[d]=[c]}}return a.prototype.find_longest_match=function(a,b,c,d){for(var e=this.a,f=this.b,g=this.b2j,h=a,i=c,j=0,k={},l=a;b>l;l++){var m={},n=__dictget(g,e[l],[]);for(var o in n)if(n.hasOwnProperty(o)){var p=n[o];if(c>p)continue;if(p>=d)break;var q=__dictget(k,p-1,0)+1;m[p]=q,q>j&&(h=l-q+1,i=p-q+1,j=q)}k=m}for(;h>a&&i>c&&e[h-1]==f[i-1];)h--,i--,j++;for(;b>h+j&&d>i+j&&e[h+j]==f[i+j];)j++;return[h,i,j]},a.prototype.get_matching_blocks=function(){if(null!=this.matching_blocks)return this.matching_blocks;for(var a=this.a.length,b=this.b.length,c=[[0,a,0,b]],d=[];c.length;){var e=c.pop(),f=e[0],g=e[1],h=e[2],i=e[3],j=this.find_longest_match(f,g,h,i),k=j[0],l=j[1],m=j[2];m&&(d.push(j),k>f&&l>h&&c.push([f,k,h,l]),g>k+m&&i>l+m&&c.push([k+m,g,l+m,i]))}d.sort(__ntuplecomp);for(var n=0,o=0,p=0,q=[],r=0;r<d.length;r++){var s=d[r],t=s[0],u=s[1],v=s[2];n+p==t&&o+p==u?p+=v:(p&&q.push([n,o,p]),n=t,o=u,p=v)}return p&&q.push([n,o,p]),q.push([a,b,0]),this.matching_blocks=q,this.matching_blocks},a.prototype.get_opcodes=function(){if(null!=this.opcodes)return this.opcodes;var a=0,b=0,c=[];this.opcodes=c;for(var d=this.get_matching_blocks(),e=0;e<d.length;e++){var f=d[e],g=f[0],h=f[1],i=f[2],j=\"\";g>a&&h>b?j=\"replace\":g>a?j=\"delete\":h>b&&(j=\"insert\"),j&&c.push([j,a,g,b,h]),a=g+i,b=h+i,i&&c.push([\"equal\",g,a,h,b])}return c},a.prototype.text_diff=function(a){for(var b=this.get_opcodes(),c=[],d=[],e=[],f=0,g=-1,h=0;h<b.length;h++){var i=b[h];if(\"equal\"!==i[0]){var j=i[1],k=i[3],l=i[2]-1,m=i[4]-1,n=Math.min(j,k),o=Math.max(l,m),p=\"\";switch(i[0]){case\"delete\":p=\" < \";break;case\"insert\":p=\" > \";break;case\"replace\":p=\" | \"}for(var q=Math.max(g+1,n-a);n>q;q++){var r=q+\": \";q<this.a.length?(d.push(r+this.a[q]),f=Math.max(f,this.a[q].length+r.length)):d.push(r),q<this.b.length?e.push(this.b[q]):e.push(\"\"),c.push(\"   \")}for(var q=n;o>=q;q++){var r=q+\": \";q>=j&&l>=q?(d.push(r+this.a[q]),f=Math.max(f,this.a[q].length+r.length)):d.push(r),q>=k&&m>=q?e.push(this.b[q]):e.push(\"\"),c.push(p)}g=o}}for(var q=0;q<c.length;q++){var s=d[q],t=e[q];s.length<f&&(s+=new Array(f-s.length+1).join(\" \")),c[q]=s+c[q]+t}return c},a}();exports.SequenceMatcher=SequenceMatcher;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var JVM=__webpack_require__(5);exports.JVM=JVM;var CLI=__webpack_require__(47);exports.CLI=CLI;var ClassFile=__webpack_require__(49);exports.ClassFile=ClassFile;var Threading=__webpack_require__(15);exports.Threading=Threading;var Long=__webpack_require__(8);exports.Long=Long;var Util=__webpack_require__(6);exports.Util=Util;var Enums=__webpack_require__(9);exports.Enums=Enums;var Interfaces=__webpack_require__(50);exports.Interfaces=Interfaces;var Monitor=__webpack_require__(25);exports.Monitor=Monitor;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {\"use strict\";function java(a,b,c,d){void 0===d&&(d=function(a){});var e,f=parser.parse(a),g=f[\"default\"],h=f.X;if(b.properties=g.mapOption(\"D\"),g.flag(\"help\",!1))return printHelp(b.launcherName,parser.help(\"default\"),c,0);if(g.flag(\"X\",!1))return printNonStandardHelp(b.launcherName,parser.help(\"X\"),c,0);var i=h.stringOption(\"log\",\"ERROR\");if(b.intMode=h.flag(\"int\",!1),b.dumpJITStats=h.flag(\"dump-JIT-stats\",!1),/^[0-9]+$/.test(i))logging.log_level=parseInt(i,10);else{var j=logging[i.toUpperCase()];if(null==j)return process.stderr.write(\"Unrecognized log level: \"+i+\".\"),printHelp(b.launcherName,parser.help(\"default\"),c,1);logging.log_level=j}h.flag(\"list-class-cache\",!1)&&(c=function(a){return function(b){var c=e.getBootstrapClassLoader().getLoadedClassFiles();process.stdout.write(c.join(\"\\n\")+\"\\n\"),a(b)}}(c)),g.flag(\"enablesystemassertions\",!1)&&(b.enableSystemAssertions=!0),g.flag(\"disablesystemassertions\",!1)&&(b.enableSystemAssertions=!1),g.flag(\"enableassertions\",!1)?b.enableAssertions=!0:g.stringOption(\"enableassertions\",null)&&(b.enableAssertions=g.stringOption(\"enableassertions\",null).split(\":\")),g.stringOption(\"disableassertions\",null)&&(b.disableAssertions=g.stringOption(\"disableassertions\",null).split(\":\"));var k=h.stringOption(\"bootclasspath\",null);null!==k&&(b.bootstrapClasspath=k.split(\":\"));var l=h.stringOption(\"bootclasspath/a\",null);l&&(b.bootstrapClasspath=b.bootstrapClasspath.concat(l.split(\":\")));var m=h.stringOption(\"bootclasspath/p\",null);m&&(b.bootstrapClasspath=m.split(\":\").concat(b.bootstrapClasspath)),b.classpath||(b.classpath=[]),g.stringOption(\"jar\",null)?b.classpath.push(g.stringOption(\"jar\",null)):g.stringOption(\"classpath\",null)?b.classpath=b.classpath.concat(g.stringOption(\"classpath\",null).split(\":\")):b.classpath.push(process.cwd());var n=g.stringOption(\"native-classpath\",null);n&&(b.nativeClasspath=b.nativeClasspath.concat(n.split(\":\"))),e=new JVM(b,function(a){a?(process.stderr.write(\"Error constructing JVM:\\n\"),process.stderr.write(a.toString()+\"\\n\"),c(1)):launchJvm(g,b,e,c,d)}),e.setPrintJITCompilation(h.flag(\"X:+PrintCompilation\",!1));var o=h.stringOption(\"vtrace-methods\",null);o&&o.split(\":\").forEach(function(a){return e.vtraceMethod(a)});var p=h.stringOption(\"dumpCompiledCode\",null);p&&e.dumpCompiledCode(p)}function launchJvm(a,b,c,d,e){var f=a.unparsedArgs();if(a.stringOption(\"jar\",null))c.runJar(f,d),e(c);else if(f.length>0){var g=f[0];\".class\"===g.slice(-6)&&(g=g.slice(0,-6)),-1!==g.indexOf(\".\")&&(g=util.descriptor2typestr(util.int_classname(g))),c.runClass(g,f.slice(1),d),e(c)}else printHelp(b.launcherName,parser.help(\"default\"),d,0)}function printHelp(a,b,c,d){process.stdout.write(\"Usage: \"+a+\" [-options] class [args...]\\n        (to execute a class)\\nor  \"+a+\" [-options] -jar jarfile [args...]\\n        (to execute a jar file)\\nwhere options include:\\n\"+b),c(d)}function printNonStandardHelp(a,b,c,d){process.stdout.write(b+\"\\n\\nThe -X options are non-standard and subject to change without notice.\\n\"),c(d)}var option_parser_1=__webpack_require__(48),JVM=__webpack_require__(5),util=__webpack_require__(6),logging=__webpack_require__(17),parser=new option_parser_1.OptionParser({\"default\":{classpath:{type:3,alias:\"cp\",optDesc:\" <class search path of directories and zip/jar files>\",desc:\"A : separated list of directories, JAR archives, and ZIP archives to search for class files.\"},D:{type:4,optDesc:\"<name>=<value>\",desc:\"set a system property\"},jar:{type:3,stopParsing:!0},help:{alias:\"?\",desc:\"print this help message\"},X:{desc:\"print help on non-standard options\"},enableassertions:{type:2,optDesc:\"[:<packagename>...|:<classname>]\",alias:\"ea\",desc:\"enable assertions with specified granularity\"},disableassertions:{type:2,optDesc:\"[:<packagename>...|:<classname>]\",alias:\"da\",desc:\"disable assertions with specified granularity\"},enablesystemassertions:{alias:\"esa\",desc:\"enable system assertions\"},disablesystemassertions:{alias:\"dsa\",desc:\"disable system assertions \"}},X:{\"int\":{desc:\"interpreted mode execution only\"},\"dump-JIT-stats\":{desc:\"dump JIT statistics\"},log:{desc:\"log level, [0-10]|vtrace|trace|debug|error\",type:3},\"vtrace-methods\":{type:3,optDesc:\" <java/lang/Object/getHashCode()I:...>\",desc:\"specify particular methods to vtrace separated by colons\"},\"list-class-cache\":{desc:\"list all of the bootstrap loaded classes after execution\"},\"dump-compiled-code\":{type:3,optDesc:\" <directory>\",desc:\"location to dump compiled object definitions\"},\"native-classpath\":{type:3,optDesc:\" <class search path of directories>\",desc:\"A : separated list of directories to search for native mathods in JS files.\"},\"bootclasspath/a\":{type:1,optDesc:\":<directories and zip/jar files separated by :>\",desc:\"append to end of bootstrap class path\"},\"bootclasspath/p\":{type:1,optDesc:\":<directories and zip/jar files separated by :>\",desc:\"prepend in front of bootstrap class path\"},bootclasspath:{type:1,optDesc:\":<directories and zip/jar files separated by :>\",desc:\"set search path for bootstrap classes and resources\"},\"X:+PrintCompilation\":{desc:\"Print JIT compilation details\"}}});module.exports=java;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function getOptName(a,b){return\"default\"!==a?\"\"+a+b:b}function printCol(a,b){for(var c=a,d=b-a.length;d-- >0;)c+=\" \";return c}function _showHelp(a,b){var c={},d=13;return Object.keys(a).forEach(function(d){var e=a[d];if(!e.stopParsing){var f=[d];null!=e.alias&&f.push(e.alias);var g;g=e.optDesc?f.map(function(a){return\"-\"+b+a+e.optDesc}).join(\"\\n\"):f.map(function(a){return\"-\"+b+a}).join(\" | \"),c[g]=e}}),Object.keys(c).map(function(a){var b=c[a];if(b.optDesc){var e=a.split(\"\\n\"),f=e.map(function(a){return\"    \"+a});return f.join(\"\\n\")+\"\\n                  \"+b.desc}var g=printCol(a,d);return g.length===d?\"    \"+g+\" \"+b.desc:\"    \"+g+\"\\n                  \"+b.desc}).join(\"\\n\")+\"\\n\"}var PrefixParseResult=function(){function a(a,b){void 0===b&&(b=[]),this._result=a,this._unparsedArgs=b}return a.prototype.unparsedArgs=function(){return this._unparsedArgs},a.prototype.flag=function(a,b){var c=this._result[a];return\"boolean\"==typeof c?c:b},a.prototype.stringOption=function(a,b){var c=this._result[a];return\"string\"==typeof c?c:b},a.prototype.mapOption=function(a){var b=this._result[a];return\"object\"==typeof b?b:{}},a}();exports.PrefixParseResult=PrefixParseResult;var OptionParser=function(){function a(a){var b=this;this._parseMap={},this._prefixes=[],this._mapArgs=[],this._rawDesc=a,this._prefixes=Object.keys(a),this._prefixes.forEach(function(c){var d=a[c],e=Object.keys(d);e.slice(0).forEach(function(a){var f=d[a];f.type||(f.type=0),4===f.type&&b._mapArgs.push(a),f.prefix=c,f.name=a,b._parseMap[getOptName(c,a)]=f,f.alias&&(e.push(f.alias),b._parseMap[getOptName(c,f.alias)]=f)})})}return a.prototype.parse=function(a){var b,c=this,d={},e=0;for(this._prefixes.forEach(function(a){return d[a]={}}),a=a.map(function(a){return a.trim()}).filter(function(a){return\"\"!==a}),b=a.length;b>e;){var f=a[e];if(\"-\"!==f[0])break;f=f.slice(1);var g;if(g=this._parseMap[f])switch(g.type){case 0:case 2:d[g.prefix][g.name]=!0;break;case 3:case 1:if(e++,!(b>e))throw new Error(\"-\"+f+\" requires an argument.\");d[g.prefix][g.name]=a[e];break;case 4:break;default:throw new Error(\"INTERNAL ERROR: Invalid parse type for -\"+f+\".\")}else if(this._mapArgs.filter(function(a){return f.slice(0,a.length)===a?(g=c._parseMap[a],!0):!1}).length>0){var h=f.slice(g.name.length),i=d[g.prefix][g.name];i||(i=d[g.prefix][g.name]={});var j=h.indexOf(\"=\");-1!==j?i[h.slice(0,j)]=h.slice(j+1):i[h]=\"\"}else{if(-1===f.indexOf(\":\")||!(g=this._parseMap[f.slice(0,f.indexOf(\":\"))]))throw new Error(\"Unrecognized option: -\"+f);if(1!==g.type&&2!==g.type)throw new Error(\"Unrecognized option: -\"+f);d[g.prefix][g.name]=f.slice(f.indexOf(\":\")+1)}if(g.stopParsing){e++;break}e++}var k=a.slice(e),l={};return Object.keys(d).forEach(function(a){l[a]=new PrefixParseResult(d[a],k)}),l},a.prototype.help=function(a){return _showHelp(this._rawDesc[a],\"default\"===a?\"\":a)},a}();exports.OptionParser=OptionParser;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";function __export(a){for(var b in a)exports.hasOwnProperty(b)||(exports[b]=a[b])}var ConstantPool=__webpack_require__(23);exports.ConstantPool=ConstantPool;var Attributes=__webpack_require__(12);exports.Attributes=Attributes,__export(__webpack_require__(21)),__export(__webpack_require__(11)),__export(__webpack_require__(20)),__export(__webpack_require__(26));\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var Assert=__webpack_require__(13);exports.Assert=Assert;var Logging=__webpack_require__(17);exports.Logging=Logging;var Difflib=__webpack_require__(45);exports.Difflib=Difflib;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** release/doppio.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 13765c460d8dad63bb85\n **/","/// <reference path=\"../typings/index.d.ts\" />\n// Main entry point for browserify. Separate from doppiojvm.ts so we can reference\n// main.d.ts here without polluting our official typings.\nimport doppiojvm = require('./doppiojvm');\nexport = doppiojvm;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/index.ts\n **/","/**\n * Top-level doppio interface. Exposed through the `DoppioJVM` global.\n */\nimport * as Testing from './testing';\nimport Heap = require('./heap');\nimport * as VM from './VM';\nimport * as Debug from './Debug';\n\nexport {Testing, VM, Heap, Debug};\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/doppiojvm.ts\n **/","\"use strict\";\nimport JVM = require('./jvm');\nimport util = require('./util');\nimport difflib = require('./difflib');\nimport path = require('path');\nimport fs = require('fs');\nimport interfaces = require('./interfaces');\nimport logging = require('./logging');\n\nexport interface TestingError extends Error {\n  originalError?: any;\n  fatal?: boolean;\n}\n\nfunction makeTestingError(msg: string, origErr?: any, fatal?: boolean): TestingError {\n  var err = <TestingError> new Error(msg);\n  err.originalError = origErr;\n  err.fatal = fatal;\n  return err;\n}\n\n/**\n * Captures stdout/stderr.\n * @todo Do this the proper Node way once BFS is more compliant.\n */\nclass OutputCapturer {\n  private _stdoutWrite = process.stdout.write;\n  private _stderrWrite = process.stderr.write;\n  private _data: string = \"\";\n  private _isCapturing = false;\n\n  private debugWrite(str: string): void {\n    this._stdoutWrite.apply(process.stdout, [str, 'utf8']);\n  }\n\n  /**\n   * Begin capturing output.\n   */\n  public start(clear?: boolean): void {\n    if (this._isCapturing) {\n      throw new Error(`Already capturing.`);\n    }\n    this._isCapturing = true;\n    if (clear) {\n      this._data = \"\";\n    }\n    process.stderr.write = process.stdout.write = (data: any, arg2?: any, arg3?: any): boolean => {\n      if (typeof(data) !== 'string') {\n        // Buffer.\n        data = data.toString();\n      }\n      this._data += data;\n      return true;\n    };\n  }\n\n  /**\n   * Stop capturing output.\n   */\n  public stop(): void {\n    if (!this._isCapturing) {\n      // May be called twice when there's a catastrophic error.\n      return;\n    }\n    this._isCapturing = false;\n    process.stderr.write = this._stderrWrite;\n    process.stdout.write = this._stdoutWrite;\n  }\n\n  /**\n   * Retrieve the captured output.\n   * @param clear Clear the captured output.\n   */\n  public getOutput(clear?: boolean): string {\n    var data = this._data;\n    if (clear) {\n      this._data = \"\";\n    }\n    return data;\n  }\n}\n\n/**\n * Doppio testing options.\n */\nexport interface TestOptions extends interfaces.JVMOptions {\n  /**\n   * Classes to test. Each can be in one of the following forms:\n   * - foo.bar.Baz\n   * - foo/bar/Baz\n   */\n  testClasses?: string[];\n}\n\n/**\n * Represents a single unit test, where we compare Doppio's output to the native\n * JVM.\n */\nexport class DoppioTest {\n  /**\n   * Test runner options.\n   */\n  private opts: TestOptions;\n  /**\n   * The class to test.\n   */\n  public cls: string;\n  /**\n   * Path to the file recording the output from the native JVM.\n   */\n  private outFile: string;\n  /**\n   * The output capturer for this test.\n   */\n  private outputCapturer: OutputCapturer = new OutputCapturer();\n\n  constructor(opts: TestOptions, cls: string) {\n    this.opts = opts;\n    if (cls.indexOf('.') !== -1) {\n      // Convert foo.bar.Baz => foo/bar/Baz\n      cls = util.descriptor2typestr(util.int_classname(cls));\n    }\n    this.cls = cls;\n    this.outFile = path.resolve(opts.doppioHomePath, cls) + \".runout\";\n  }\n\n  /**\n   * Constructs a new JVM for the test.\n   */\n  private constructJVM(cb: (err: any, jvm?: JVM) => void): void {\n    new JVM(<any> util.merge(JVM.getDefaultOptions(this.opts.doppioHomePath), this.opts, {\n      classpath: [this.opts.doppioHomePath],\n      enableAssertions: true,\n      enableSystemAssertions: true\n    }), cb);\n  }\n\n  /**\n   * Runs the unit test.\n   */\n  public run(registerGlobalErrorTrap: (cb: (err: Error) => void) => void, cb: (err: Error, actual?: string, expected?: string, diff?: string) => void) {\n    var outputCapturer = this.outputCapturer, _jvm: JVM = null, terminated: boolean = false, jvmConstructHasFinished: boolean = false,\n      hasFinished: boolean = false;\n    registerGlobalErrorTrap((err) => {\n      if (_jvm) {\n        try {\n          _jvm.halt(1);\n        } catch (e) {\n          err.message += `\\n\\nAdditionally, test runner received the following error while trying to halt the JVM: ${e}${e.stack ? `\\n\\n${e.stack}` : ''}\\n\\nOriginal error's stack trace:`;\n        }\n      }\n      outputCapturer.stop();\n      cb(makeTestingError(`Uncaught error. Aborting further tests.\\n\\t${err}${err.stack ? `\\n\\n${err.stack}` : ``}`, err, true));\n    });\n\n    this.constructJVM((err: any, jvm?: JVM) => {\n      _jvm = jvm;\n      if (terminated) {\n        // Already handled.\n        return;\n      }\n      if (jvmConstructHasFinished) {\n        return cb(makeTestingError(`constructJVM returned twice. Aborting further tests.`, null, true));\n      }\n      jvmConstructHasFinished = true;\n\n      if (err) {\n        cb(makeTestingError(`Could not construct JVM:\\n${err}`, err));\n      } else {\n        outputCapturer.start(true);\n        jvm.runClass(this.cls, [], (status: number) => {\n          if (terminated) {\n            // Already handled.\n            return;\n          }\n          outputCapturer.stop();\n          if(hasFinished) {\n            return cb(makeTestingError(`JVM triggered completion callback twice. Aborting further tests.`, null, true));\n          }\n          hasFinished = true;\n\n          var actual = outputCapturer.getOutput(true);\n          fs.readFile(this.outFile, { encoding: 'utf8' }, (err: any, expected?: string) => {\n            if (err) {\n              cb(makeTestingError(`Could not read runout file:\\n${err}`, err));\n            } else {\n              var diffText = diff(actual, expected), errMsg: string = null;\n              if (diffText !== null) {\n                errMsg = `Output does not match native JVM.`;\n              }\n              cb(errMsg ? makeTestingError(errMsg) : null, actual, expected, diffText);\n            }\n          });\n        });\n      }\n    });\n  }\n}\n\n/**\n * Locate all of Doppio's test classes, and pass them to the callback.\n */\nfunction findTestClasses(doppioDir: string, cb: (files: string[]) => void): void {\n  var testDir = path.resolve(doppioDir, path.join('classes', 'test'));\n  fs.readdir(testDir, (err, files) => {\n    if (err) {\n      cb([]);\n    } else {\n      cb(files.filter((file) => path.extname(file) === '.java')\n              .map((file) => path.join('classes','test', path.basename(file, '.java'))));\n    }\n  });\n}\n\n/**\n * Retrieve all of the unit tests.\n */\nexport function getTests(opts: TestOptions, cb: (tests: DoppioTest[]) => void): void {\n  var testClasses = opts.testClasses,\n    tests: DoppioTest[];\n  if (testClasses == null || testClasses.length === 0) {\n    // If no test classes are specified, get ALL the tests!\n    findTestClasses(opts.doppioHomePath, (testClasses) => {\n      opts.testClasses = testClasses;\n      getTests(opts, cb);\n    });\n  } else {\n    cb(testClasses.map((testClass: string): DoppioTest => {\n      return new DoppioTest(opts, testClass);\n    }));\n  }\n}\n\n/**\n * Returns a formatted diff between doppioOut and nativeOut.\n * Returns NULL if the strings are identical.\n */\nexport function diff(doppioOut: string, nativeOut: string): string {\n  // @todo Robust to Windows line breaks!\n  var doppioLines = doppioOut.split(/\\n/),\n    jvmLines = nativeOut.split(/\\n/),\n    diff: string[] = difflib.text_diff(doppioLines, jvmLines, 2);\n  if (diff.length > 0) {\n    return 'Doppio | Java\\n' + diff.join('\\n');\n  }\n  return null;\n}\n\n/**\n * Run the specified tests.\n */\nexport function runTests(opts: TestOptions, quiet: boolean, continueAfterFailure: boolean, hideDiffs: boolean,\n  registerGlobalErrorTrap: (cb: (err: Error) => void) => void, cb: (err?: TestingError) => void): void {\n  function print(str: string): void {\n    if (!quiet) {\n      process.stdout.write(str);\n    }\n  }\n\n  getTests(opts, (tests) => {\n    util.asyncForEach(tests, (test: DoppioTest, nextTest: (err?: any) => void) => {\n      var hasFinished = false;\n      print(`[${test.cls}]: Running... `);\n      test.run(registerGlobalErrorTrap, (err: TestingError, actual?: string, expected?: string, diff?: string): void => {\n        if (err && !hideDiffs && diff) {\n          err.message += `\\n${diff}`\n        }\n\n        if (err) {\n          print(`fail.\\n\\t${err.message}\\n`);\n          if (err.originalError && err.originalError.stack) {\n            print(`${err.stack}\\n`);\n          }\n          if (!continueAfterFailure || (<TestingError> err)['fatal']) {\n            err.message = `Failed ${test.cls}: ${err.message}`;\n            nextTest(err);\n          } else {\n            nextTest();\n          }\n        } else {\n          print(`pass.\\n`);\n          nextTest();\n        }\n      });\n    }, cb);\n  });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/testing.ts\n **/","var BrowserFS = require('browserfs');module.exports=BrowserFS.BFSRequire('process');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./shims/process.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"BrowserFS\"\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\nimport util = require('./util');\nimport SafeMap = require('./SafeMap');\nimport methods = require('./methods');\nimport {ClassData, ReferenceClassData, ArrayClassData} from './ClassData';\nimport ClassLoader = require('./ClassLoader');\nimport fs = require('fs');\nimport path = require('path');\nimport buffer = require('buffer');\nimport {JVMThread} from './threading';\nimport {ThreadStatus, JVMStatus} from './enums';\nimport Heap = require('./heap');\nimport assert = require('./assert');\nimport interfaces = require('./interfaces');\nimport JVMTypes = require('../includes/JVMTypes');\nimport Parker = require('./parker');\nimport ThreadPool from './threadpool';\nimport logging = require('./logging');\nimport JDKInfo = require('../vendor/java_home/jdk.json');\ndeclare var RELEASE: boolean;\n\n// Do not import, otherwise TypeScript will prune it.\n// Referenced only in eval'd code.\nlet BrowserFS = require('browserfs');\nlet deflate = require('pako/lib/zlib/deflate');\nlet inflate = require('pako/lib/zlib/inflate');\nlet zstream = require('pako/lib/zlib/zstream');\nlet crc32 = require('pako/lib/zlib/crc32');\nlet adler32 = require('pako/lib/zlib/adler32');\n// For version information.\nlet pkg: any;\nif (util.are_in_browser()) {\n  pkg = require('../package.json');\n} else {\n  pkg = require('../../../package.json');\n}\n\n\n// XXX: We currently initialize these classes at JVM bootup. This is expensive.\n// We should attempt to prune this list as much as possible.\nvar coreClasses = [\n  'Ljava/lang/String;',\n  'Ljava/lang/Class;', 'Ljava/lang/ClassLoader;',\n  'Ljava/lang/reflect/Constructor;', 'Ljava/lang/reflect/Field;',\n  'Ljava/lang/reflect/Method;',\n  'Ljava/lang/Error;', 'Ljava/lang/StackTraceElement;',\n  'Ljava/lang/System;',\n  'Ljava/lang/Thread;',\n  'Ljava/lang/ThreadGroup;',\n  'Ljava/lang/Throwable;',\n  'Ljava/nio/ByteOrder;',\n  'Lsun/misc/VM;', 'Lsun/reflect/ConstantPool;', 'Ljava/lang/Byte;',\n  'Ljava/lang/Character;', 'Ljava/lang/Double;', 'Ljava/lang/Float;',\n  'Ljava/lang/Integer;', 'Ljava/lang/Long;', 'Ljava/lang/Short;',\n  'Ljava/lang/Void;', 'Ljava/io/FileDescriptor;',\n  'Ljava/lang/Boolean;', '[Lsun/management/MemoryManagerImpl;',\n  '[Lsun/management/MemoryPoolImpl;',\n  // Contains important FS constants used by natives. These constants are\n  // inlined into JCL class files, so it typically never gets initialized\n  // implicitly by the JVM.\n  'Lsun/nio/fs/UnixConstants;'\n];\n\n/**\n * Encapsulates a single JVM instance.\n */\nclass JVM {\n  private systemProperties: {[prop: string]: string} = null;\n  private internedStrings: SafeMap<JVMTypes.java_lang_String> = new SafeMap<JVMTypes.java_lang_String>();\n  private bsCl: ClassLoader.BootstrapClassLoader = null;\n  private threadPool: ThreadPool<JVMThread> = null;\n  private natives: { [clsName: string]: { [methSig: string]: Function } } = {};\n  // 20MB heap\n  // @todo Make heap resizeable.\n  private heap: Heap = new Heap(20 * 1024 * 1024);\n  private nativeClasspath: string[] = null;\n  private startupTime: Date = new Date();\n  private terminationCb: (code: number) => void = null;\n  // The initial JVM thread used to kick off execution.\n  private firstThread: JVMThread = null;\n  private responsiveness: number | (() => number) = null;\n  private enableSystemAssertions: boolean = false;\n  private enabledAssertions: boolean | string[] = false;\n  private disabledAssertions: string[] = [];\n  private printJITCompilation: boolean = false;\n  private systemClassLoader: ClassLoader.ClassLoader = null;\n  private nextRef: number = 0;\n  // Set of all of the methods we want vtrace to be enabled on.\n  // DEBUG builds only.\n  private vtraceMethods: {[fullSig: string]: boolean} = {};\n  // [DEBUG] directory to dump compiled code to.\n  private dumpCompiledCodeDir: string = null;\n  // Handles parking/unparking threads.\n  private parker = new Parker();\n  // The current status of the JVM.\n  private status: JVMStatus = JVMStatus.BOOTING;\n  // The JVM's planned exit code.\n  private exitCode: number = 0;\n\n  // is JIT disabled?\n  private jitDisabled: boolean = false;\n  private dumpJITStats: boolean = false;\n\n  /**\n   * (Async) Construct a new instance of the Java Virtual Machine.\n   */\n  constructor(opts: interfaces.JVMOptions, cb: (e: any, jvm?: JVM) => void) {\n    if (typeof(opts.doppioHomePath) !== 'string') {\n      throw new TypeError(\"opts.doppioHomePath *must* be specified.\");\n    }\n    opts = <interfaces.JVMOptions> util.merge(JVM.getDefaultOptions(opts.doppioHomePath), opts);\n\n    this.jitDisabled = opts.intMode;\n    this.dumpJITStats = opts.dumpJITStats;\n\n    var bootstrapClasspath: string[] = opts.bootstrapClasspath.map((p: string): string => path.resolve(p)),\n      // JVM bootup tasks, from first to last task.\n      bootupTasks: {(next: (err?: any) => void): void}[] = [],\n      firstThread: JVMThread,\n      firstThreadObj: JVMTypes.java_lang_Thread;\n\n    // Sanity checks.\n    if (!Array.isArray(opts.bootstrapClasspath) || opts.bootstrapClasspath.length === 0) {\n      throw new TypeError(\"opts.bootstrapClasspath must be specified as an array of file paths.\");\n    }\n    if (!Array.isArray(opts.classpath)) {\n      throw new TypeError(\"opts.classpath must be specified as an array of file paths.\");\n    }\n    if(typeof(opts.javaHomePath) !== 'string') {\n      throw new TypeError(\"opts.javaHomePath must be specified.\");\n    }\n    if (!Array.isArray(opts.nativeClasspath) || opts.nativeClasspath.length === 0) {\n      throw new TypeError(\"opts.nativeClasspath must be specified as an array of file paths.\");\n    }\n\n    this.nativeClasspath = opts.nativeClasspath;\n    if (opts.enableSystemAssertions) {\n      this.enableSystemAssertions = opts.enableSystemAssertions;\n    }\n    if (opts.enableAssertions) {\n      this.enabledAssertions = opts.enableAssertions;\n    }\n    if (opts.disableAssertions) {\n      this.disabledAssertions = opts.disableAssertions;\n    }\n\n    this.responsiveness = opts.responsiveness;\n\n    this._initSystemProperties(bootstrapClasspath,\n      opts.classpath.map((p: string): string => path.resolve(p)),\n      path.resolve(opts.javaHomePath),\n      path.resolve(opts.tmpDir),\n      opts.properties);\n\n    /**\n     * Task #1: Initialize native methods.\n     */\n    bootupTasks.push((next: (err?: any) => void): void => {\n      this.initializeNatives(next);\n    });\n\n    /**\n     * Task #2: Construct the bootstrap class loader.\n     */\n    bootupTasks.push((next: (err?: any) => void): void => {\n      this.bsCl =\n        new ClassLoader.BootstrapClassLoader(this.systemProperties['java.home'], bootstrapClasspath, next);\n    });\n\n    /**\n     * Task #3: Construct the thread pool, resolve thread class, and construct\n     * the first thread.\n     */\n    bootupTasks.push((next: (err?: any) => void): void => {\n      this.threadPool = new ThreadPool<JVMThread>((): boolean => { return this.threadPoolIsEmpty(); });\n      // Resolve Ljava/lang/Thread so we can fake a thread.\n      // NOTE: This should never actually use the Thread object unless\n      // there's an error loading java/lang/Thread and associated classes.\n      this.bsCl.resolveClass(null, 'Ljava/lang/Thread;', (threadCdata: ReferenceClassData<JVMTypes.java_lang_Thread>) => {\n        if (threadCdata == null) {\n          // Failed.\n          next(\"Failed to resolve java/lang/Thread.\");\n        } else {\n          // Construct a thread.\n          firstThreadObj = new (threadCdata.getConstructor(null))(null);\n          firstThreadObj.$thread = firstThread = this.firstThread = new JVMThread(this, this.threadPool, firstThreadObj);\n          firstThreadObj.ref = 1;\n          firstThreadObj['java/lang/Thread/priority'] = 5;\n          firstThreadObj['java/lang/Thread/name'] = util.initCarr(this.bsCl, 'main');\n          firstThreadObj['java/lang/Thread/blockerLock'] = new ((<ReferenceClassData<JVMTypes.java_lang_Object>> this.bsCl.getResolvedClass('Ljava/lang/Object;')).getConstructor(firstThread))(firstThread);\n          next();\n        }\n      });\n    });\n\n    /**\n     * Task #4: Preinitialize some essential JVM classes, and initializes the\n     * JVM's ThreadGroup once that class is initialized.\n     */\n    bootupTasks.push((next: (err?: any) => void): void => {\n      util.asyncForEach<string>(coreClasses, (coreClass: string, nextItem: (err?: any) => void) => {\n        this.bsCl.initializeClass(firstThread, coreClass, (cdata: ClassData) => {\n          if (cdata == null) {\n            nextItem(`Failed to initialize ${coreClass}`);\n          } else {\n            // One of the later preinitialized classes references Thread.group.\n            // Initialize the system's ThreadGroup now.\n            if (coreClass === 'Ljava/lang/ThreadGroup;') {\n              // Construct a ThreadGroup object for the first thread.\n              var threadGroupCons = (<ReferenceClassData<JVMTypes.java_lang_ThreadGroup>> cdata).getConstructor(firstThread),\n                groupObj = new threadGroupCons(firstThread);\n              groupObj['<init>()V'](firstThread, null, (e?: JVMTypes.java_lang_Throwable) => {\n                // Tell the initial thread to use this group.\n                firstThreadObj['java/lang/Thread/group'] = groupObj;\n                nextItem(e);\n              });\n            } else {\n              nextItem();\n            }\n          }\n        });\n      }, next);\n    });\n\n    /**\n     * Task #5: Initialize the system class.\n     */\n    bootupTasks.push((next: (err?: any) => void): void => {\n      // Initialize the system class (initializes things like println/etc).\n      var sysInit = <typeof JVMTypes.java_lang_System> (<ReferenceClassData<JVMTypes.java_lang_System>> this.bsCl.getInitializedClass(firstThread, 'Ljava/lang/System;')).getConstructor(firstThread);\n      sysInit['java/lang/System/initializeSystemClass()V'](firstThread, null, next);;\n    });\n\n    /**\n     * Task #6: Initialize the application's classloader.\n     */\n    bootupTasks.push((next: (err?: any) => void) => {\n      var clCons = <typeof JVMTypes.java_lang_ClassLoader> (<ReferenceClassData<JVMTypes.java_lang_ClassLoader>> this.bsCl.getInitializedClass(firstThread, 'Ljava/lang/ClassLoader;')).getConstructor(firstThread);\n      clCons['java/lang/ClassLoader/getSystemClassLoader()Ljava/lang/ClassLoader;'](firstThread, null, (e?: JVMTypes.java_lang_Throwable, rv?: JVMTypes.java_lang_ClassLoader) => {\n        if (e) {\n          next(e);\n        } else {\n          this.systemClassLoader = rv.$loader;\n          firstThreadObj['java/lang/Thread/contextClassLoader'] = rv;\n\n          // Initialize assertion data.\n          // TODO: Is there a better way to force this? :|\n          let defaultAssertionStatus = this.enabledAssertions === true ? 1 : 0;\n          rv['java/lang/ClassLoader/setDefaultAssertionStatus(Z)V'](firstThread, [defaultAssertionStatus], next);\n        }\n      });\n    });\n\n    /**\n     * Task #7: Initialize DoppioJVM's security provider for things like cryptographically strong RNG.\n     */\n    bootupTasks.push((next: (err?: any) => void) => {\n      this.bsCl.initializeClass(firstThread, 'Ldoppio/security/DoppioProvider;', (cdata) => {\n        next(cdata ? null : new Error(`Failed to initialize DoppioProvider.`));\n      });\n    });\n\n    // Perform bootup tasks, and then trigger the callback function.\n    util.asyncSeries(bootupTasks, (err?: any): void => {\n      // XXX: Without setImmediate, the firstThread won't clear out the stack\n      // frame that triggered us, and the firstThread won't transition to a\n      // 'terminated' status.\n      setImmediate(() => {\n        if (err) {\n          this.status = JVMStatus.TERMINATED;\n          cb(err);\n        } else {\n          this.status = JVMStatus.BOOTED;\n          cb(null, this);\n        }\n      });\n    });\n  }\n\n  public getResponsiveness():number {\n    const resp = this.responsiveness;\n    if (typeof resp === 'number') {\n      return resp;\n    } else if (typeof resp === 'function') {\n      return resp();\n    }\n  }\n\n  public static getDefaultOptions(doppioHome: string): interfaces.JVMOptions {\n    let javaHome = path.join(doppioHome, 'vendor', 'java_home');\n    return {\n      doppioHomePath: doppioHome,\n      classpath: ['.'],\n      bootstrapClasspath: JDKInfo.classpath.map((item) => path.join(javaHome, item)),\n      javaHomePath: javaHome,\n      nativeClasspath: [path.join(doppioHome, 'natives')],\n      enableSystemAssertions: false,\n      enableAssertions: false,\n      disableAssertions: null,\n      properties: {},\n      tmpDir: '/tmp',\n      responsiveness: 1000,\n      intMode: false,\n      dumpJITStats: false\n    };\n  }\n\n  /**\n   * Get the URL to the version of the JDK that DoppioJVM was compiled with.\n   */\n  public static getCompiledJDKURL(): string {\n    return JDKInfo.url;\n  }\n\n  /**\n   * Get the JDK information that DoppioJVM was compiled against.\n   */\n  public static getJDKInfo(): any {\n    return JDKInfo;\n  }\n\n  public getSystemClassLoader(): ClassLoader.ClassLoader {\n    return this.systemClassLoader;\n  }\n\n  public static isReleaseBuild(): boolean {\n    return typeof(RELEASE) !== 'undefined' && RELEASE;\n  }\n\n  /**\n   * Get the next \"ref\" number for JVM objects.\n   */\n  public getNextRef(): number {\n    return this.nextRef++;\n  }\n\n  /**\n   * Retrieve the JVM's parker. Handles parking/unparking threads.\n   */\n  public getParker(): Parker {\n    return this.parker;\n  }\n\n  /**\n   * Run the specified class on this JVM instance.\n   * @param className The name of the class to run. Can be specified in either\n   *   foo.bar.Baz or foo/bar/Baz format.\n   * @param args Command line arguments passed to the class.\n   * @param cb Called when the JVM finishes executing. Called with 'true' if\n   *   the JVM exited normally, 'false' if there was an error.\n   */\n  public runClass(className: string, args: string[], cb: (code: number) => void): void {\n    if (this.status !== JVMStatus.BOOTED) {\n      switch (this.status) {\n        case JVMStatus.BOOTING:\n          throw new Error(`JVM is currently booting up. Please wait for it to call the bootup callback, which you passed to the constructor.`);\n        case JVMStatus.RUNNING:\n          throw new Error(`JVM is already running.`);\n        case JVMStatus.TERMINATED:\n          throw new Error(`This JVM has already terminated. Please create a new JVM.`);\n        case JVMStatus.TERMINATING:\n          throw new Error(`This JVM is currently terminating. You should create a new JVM for each class you wish to run.`);\n      }\n    }\n    this.terminationCb = cb;\n\n    var thread = this.firstThread;\n    assert(thread != null, `Thread isn't created yet?`);\n    // Convert foo.bar.Baz => Lfoo/bar/Baz;\n    className = util.int_classname(className);\n\n    // Initialize the class.\n    this.systemClassLoader.initializeClass(thread, className, (cdata: ReferenceClassData<any>) => {\n      // If cdata is null, there was an error that ended execution.\n      if (cdata != null) {\n        // Convert the arguments.\n        var strArrCons = (<ArrayClassData<JVMTypes.java_lang_String>> this.bsCl.getInitializedClass(thread, '[Ljava/lang/String;')).getConstructor(thread),\n          jvmifiedArgs = new strArrCons(thread, args.length), i: number;\n\n        for (i = 0; i < args.length; i++) {\n          jvmifiedArgs.array[i] = util.initString(this.bsCl, args[i]);\n        }\n\n        // Find the main method, and run it.\n        this.status = JVMStatus.RUNNING;\n        var cdataStatics = <any> cdata.getConstructor(thread);\n        if (cdataStatics['main([Ljava/lang/String;)V']) {\n          cdataStatics['main([Ljava/lang/String;)V'](thread, [jvmifiedArgs]);\n        } else {\n          thread.throwNewException(\"Ljava/lang/NoSuchMethodError;\", `Could not find main method in class ${cdata.getExternalName()}.`);\n        }\n      } else {\n        process.stdout.write(`Error: Could not find or load main class ${util.ext_classname(className)}\\n`);\n        // Erroneous exit.\n        this.terminationCb(1);\n      }\n    });\n  }\n\n  /**\n   * Returns 'true' if confined to interpreter mode\n   */\n  public isJITDisabled(): boolean {\n    return this.jitDisabled;\n  }\n\n  /**\n   * [DEBUG] Returns 'true' if the specified method should be vtraced.\n   */\n  public shouldVtrace(sig: string): boolean {\n    return this.vtraceMethods[sig] === true;\n  }\n\n  /**\n   * [DEBUG] Specify a method to vtrace.\n   */\n  public vtraceMethod(sig: string): void {\n    this.vtraceMethods[sig] = true;\n  }\n\n  /**\n   * Run the specified JAR file on this JVM instance.\n   * @param args Command line arguments passed to the class.\n   * @param cb Called when the JVM finishes executing. Called with 'true' if\n   *   the JVM exited normally, 'false' if there was an error.\n   */\n  public runJar(args: string[], cb: (code: number) => void): void {\n    this.runClass('doppio.JarLauncher', args, cb);\n  }\n\n  /**\n   * Called when the ThreadPool is empty.\n   */\n  private threadPoolIsEmpty(): boolean {\n    var systemClass: ReferenceClassData<JVMTypes.java_lang_System>,\n      systemCons: typeof JVMTypes.java_lang_System;\n    switch (this.status) {\n      case JVMStatus.BOOTING:\n        // Ignore empty thread pools during boot process.\n        return false;\n      case JVMStatus.BOOTED:\n        assert(false, `Thread pool should not become empty after JVM is booted, but before it begins to run.`);\n        return false;\n      case JVMStatus.RUNNING:\n        this.status = JVMStatus.TERMINATING;\n        systemClass = <any> this.bsCl.getInitializedClass(this.firstThread, 'Ljava/lang/System;');\n        assert(systemClass !== null, `Invariant failure: System class must be initialized when JVM is in RUNNING state.`);\n        systemCons = <any> systemClass.getConstructor(this.firstThread);\n        // This is a normal, non-erroneous exit. When this function completes, threadPoolIsEmpty() will be invoked again.\n        systemCons['java/lang/System/exit(I)V'](this.firstThread, [0]);\n        return false;\n      case JVMStatus.TERMINATED:\n        assert(false, `Invariant failure: Thread pool cannot be emptied post-JVM termination.`);\n        return false;\n      case JVMStatus.TERMINATING:\n\n        if (!RELEASE && this.dumpJITStats) {\n          methods.dumpStats();\n        }\n\n        this.status = JVMStatus.TERMINATED;\n        if (this.terminationCb) {\n          this.terminationCb(this.exitCode);\n        }\n        this.firstThread.close();\n        return true;\n    }\n  }\n\n  /**\n   * Check if the JVM has started running the main class.\n   */\n  public hasVMBooted(): boolean {\n    return !(this.status === JVMStatus.BOOTING || this.status === JVMStatus.BOOTED);\n  }\n\n  /**\n   * Completely halt the JVM.\n   */\n  public halt(status: number): void {\n    this.exitCode = status;\n    this.status = JVMStatus.TERMINATING;\n    this.threadPool.getThreads().forEach((t) => {\n      t.setStatus(ThreadStatus.TERMINATED);\n    });\n  }\n\n  /**\n   * Retrieve the given system property.\n   */\n  public getSystemProperty(prop: string): string {\n    return this.systemProperties[prop];\n  }\n\n  /**\n   * Retrieve an array of all of the system property names.\n   */\n  public getSystemPropertyNames(): string[] {\n    return Object.keys(this.systemProperties);\n  }\n\n  /**\n   * Retrieve the unmanaged heap.\n   */\n  public getHeap(): Heap {\n    return this.heap;\n  }\n\n  /**\n   * Interns the given JavaScript string. Returns the interned string.\n   */\n  public internString(str: string, javaObj?: JVMTypes.java_lang_String): JVMTypes.java_lang_String {\n    if (this.internedStrings.has(str)) {\n      return this.internedStrings.get(str);\n    } else {\n      if (!javaObj) {\n        javaObj = util.initString(this.bsCl, str);\n      }\n      this.internedStrings.set(str, javaObj);\n      return javaObj;\n    }\n  }\n\n  /**\n   * Evaluate native modules. Emulates CommonJS functionality.\n   */\n  private evalNativeModule(mod: string): any {\n    \"use strict\"; // Prevent eval from being terrible.\n    var rv: any,\n      // Provide the natives with the Doppio API, if needed.\n      DoppioJVM = require('./doppiojvm'),\n      Buffer = (<any> buffer).Buffer,\n      process2 = process,\n      savedRequire = typeof require !== 'undefined' ? require : function(moduleName: string): any {\n        throw new Error(`Cannot find module ${moduleName}`);\n      };\n    (() => {\n      /* tslint:disable:no-unused-variable */\n      /**\n       * Called by the native method file. Registers the package's native\n       * methods with the JVM.\n       */\n      function registerNatives(defs: any): void {\n        rv = defs;\n      }\n      /**\n       * Emulates CommonJS require().\n       * Placed into an eval() call to avoid browserify-dereq from\n       * fucking renaming the goddamn thing to _dereq_.\n       */\n      eval(`\nvar process = process2;\nfunction require(name) {\n  switch(name) {\n    case 'doppiojvm':\n    case '../doppiojvm':\n      return DoppioJVM;\n    case 'fs':\n      return fs;\n    case 'path':\n      return path;\n    case 'buffer':\n      return buffer;\n    case 'browserfs':\n      return BrowserFS;\n    case 'pako/lib/zlib/zstream':\n      return zstream;\n    case 'pako/lib/zlib/inflate':\n      return inflate;\n    case 'pako/lib/zlib/deflate':\n      return deflate;\n    case 'pako/lib/zlib/crc32':\n      return crc32;\n    case 'pako/lib/zlib/adler32':\n      return adler32;\n    case 'crypto':\n      return util.are_in_browser() ? null : savedRequire('crypto');\n    default:\n      return savedRequire(name);\n  }\n}\n/**\n * Emulate AMD module 'define' function for natives compiled as AMD modules.\n */\nfunction define(resources, module) {\n  var args = [];\n  resources.forEach(function(resource) {\n    switch (resource) {\n      case 'require':\n        args.push(require);\n        break;\n      case 'exports':\n        args.push({});\n        break;\n      default:\n        args.push(require(resource));\n        break;\n    }\n  });\n  module.apply(null, args);\n}\neval(mod);\n`);\n      /* tslint:enable:no-unused-variable */\n    })();\n    return rv;\n  }\n\n  /**\n   * Register native methods with the virtual machine.\n   */\n  public registerNatives(newNatives: { [clsName: string]: { [methSig: string]: Function } }): void {\n    var clsName: string, methSig: string;\n    for (clsName in newNatives) {\n      if (newNatives.hasOwnProperty(clsName)) {\n        if (!this.natives.hasOwnProperty(clsName)) {\n          this.natives[clsName] = {};\n        }\n        var clsMethods = newNatives[clsName];\n        for (methSig in clsMethods) {\n          if (clsMethods.hasOwnProperty(methSig)) {\n            // Don't check if it exists already. This allows us to overwrite\n            // native methods dynamically at runtime.\n            this.natives[clsName][methSig] = clsMethods[methSig];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Convenience function. Register a single native method with the virtual\n   * machine. Can be used to update existing native methods based on runtime\n   * information.\n   */\n  public registerNative(clsName: string, methSig: string, native: Function): void {\n    this.registerNatives({ clsName: { methSig: native } });\n  }\n\n  /**\n   * Retrieve the native method for the given method of the given class.\n   * Returns null if none found.\n   */\n  public getNative(clsName: string, methSig: string): Function {\n    clsName = util.descriptor2typestr(clsName);\n    if (this.natives.hasOwnProperty(clsName)) {\n      var clsMethods = this.natives[clsName];\n      if (clsMethods.hasOwnProperty(methSig)) {\n        return clsMethods[methSig];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * !!DO NOT MUTATE THE RETURNED VALUE!!\n   * Used by the find_invalid_natives tool.\n   */\n  public getNatives(): { [clsName: string]: { [methSig: string]: Function } } {\n    return this.natives;\n  }\n\n  /**\n   * Loads in all of the native method modules prior to execution.\n   * Currently a hack around our classloader.\n   * @todo Make neater with util.async stuff.\n   */\n  private initializeNatives(doneCb: () => void): void {\n    var nextDir = () => {\n      if (i === this.nativeClasspath.length) {\n        // Next phase: Load up the files.\n        var count: number = processFiles.length;\n        processFiles.forEach((file: string) => {\n          fs.readFile(file, (err: any, data: NodeBuffer) => {\n            if (!err) {\n              this.registerNatives(this.evalNativeModule(data.toString()));\n            }\n            if (--count === 0) {\n              doneCb();\n            }\n          });\n        });\n      } else {\n        var dir = this.nativeClasspath[i++];\n        fs.readdir(dir, (err: any, files: string[]) => {\n          if (err) {\n            return doneCb();\n          }\n\n          var j: number, file: string;\n          for (j = 0; j < files.length; j++) {\n            file = files[j];\n            if (file.substring(file.length - 3, file.length) === '.js') {\n              processFiles.push(path.join(dir, file));\n            }\n          }\n          nextDir();\n        });\n      }\n    }, i: number = 0, processFiles: string[] = [];\n\n    nextDir();\n  }\n\n  /**\n   * [Private] Same as reset_system_properties, but called by the constructor.\n   */\n  private _initSystemProperties(bootstrapClasspath: string[], javaClassPath: string[], javaHomePath: string, tmpDir: string, opts: {[name: string]: string}): void {\n    this.systemProperties = util.merge({\n      'java.class.path': javaClassPath.join(':'),\n      'java.home': javaHomePath,\n      'java.ext.dirs': path.join(javaHomePath, 'lib', 'ext'),\n      'java.io.tmpdir': tmpDir,\n      'sun.boot.class.path': bootstrapClasspath.join(':'),\n      'file.encoding': 'UTF-8',\n      'java.vendor': 'Doppio',\n      'java.version': '1.8',\n      'java.vendor.url': 'https://github.com/plasma-umass/doppio',\n      'java.class.version': '52.0',\n      'java.specification.version': '1.8',\n      'line.separator': '\\n',\n      'file.separator': path.sep,\n      'path.separator': ':',\n      'user.dir': path.resolve('.'),\n      'user.home': '.',\n      'user.name': 'DoppioUser',\n      'os.name': 'doppio',\n      'os.arch': 'js',\n      'os.version': '0',\n      'java.vm.name': 'DoppioJVM 32-bit VM',\n      'java.vm.version': pkg.version,\n      'java.vm.vendor': 'PLASMA@UMass',\n      'java.awt.headless': (util.are_in_browser()).toString(), // true if we're using the console frontend\n      'java.awt.graphicsenv': 'classes.awt.CanvasGraphicsEnvironment',\n      'jline.terminal': 'jline.UnsupportedTerminal', // we can't shell out to `stty`,\n      'sun.arch.data.model': '32', // Identify as 32-bit, because that's how we act.\n      'sun.jnu.encoding': \"UTF-8\" // Determines how Java parses command line options.\n    }, opts);\n  }\n\n  /**\n   * Retrieves the bootstrap class loader.\n   */\n  public getBootstrapClassLoader(): ClassLoader.BootstrapClassLoader {\n    return this.bsCl;\n  }\n\n  public getStartupTime(): Date {\n    return this.startupTime;\n  }\n\n  /**\n   * Returns `true` if system assertions are enabled, false otherwise.\n   */\n  public areSystemAssertionsEnabled(): boolean {\n    return this.enableSystemAssertions;\n  }\n\n  /**\n   * Get a listing of classes with assertions enabled. Can also return 'true' or 'false.\n   */\n  public getEnabledAssertions(): string[] | boolean {\n    return this.enabledAssertions;\n  }\n\n  /**\n   * Get a listing of classes with assertions disabled.\n   */\n  public getDisabledAssertions(): string[] {\n    return this.disabledAssertions;\n  }\n\n  public setPrintJITCompilation(enabledOrNot: boolean) {\n    this.printJITCompilation = enabledOrNot;\n  }\n\n  public shouldPrintJITCompilation(): boolean {\n    return this.printJITCompilation;\n  }\n\n  /**\n   * Specifies a directory to dump compiled code to.\n   */\n  public dumpCompiledCode(dir: string): void {\n    this.dumpCompiledCodeDir = dir;\n  }\n\n  public shouldDumpCompiledCode(): boolean {\n    return this.dumpCompiledCodeDir !== null;\n  }\n\n  public dumpObjectDefinition(cls: ClassData, evalText: string): void {\n    if (this.shouldDumpCompiledCode()) {\n      fs.writeFile(path.resolve(this.dumpCompiledCodeDir, cls.getExternalName() + \"_object.dump\"), evalText, () => {});\n    }\n  }\n\n  public dumpBridgeMethod(methodSig: string, evalText: string): void {\n    if (this.shouldDumpCompiledCode()) {\n      fs.appendFile(path.resolve(this.dumpCompiledCodeDir, \"vmtarget_bridge_methods.dump\"), `${methodSig}:\\n${evalText}\\n\\n`, () => {});\n    }\n  }\n\n  /**\n   * Asynchronously dumps JVM state to a file. Currently limited to thread\n   * state.\n   */\n  public dumpState(filename: string, cb: (er: any) => void): void {\n    fs.appendFile(filename, this.threadPool.getThreads().map((t: JVMThread) => `Thread ${t.getRef()}:\\n` + t.getPrintableStackTrace()).join(\"\\n\\n\"), cb);\n  }\n}\n\nexport = JVM;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/jvm.ts\n **/","\"use strict\";\nimport gLong = require('./gLong');\nimport threading = require('./threading');\nimport enums = require('./enums');\nimport JVMTypes = require('../includes/JVMTypes');\nimport BrowserFS = require('browserfs');\n\n// For type information\nimport ClassLoader = require('./ClassLoader');\nimport ClassData = require('./ClassData');\n\nlet BFSUtils = BrowserFS.BFSRequire('bfs_utils');\n\n/**\n * util contains stateless utility functions that are used around Doppio's\n * codebase.\n * TODO: Separate general JS utility methods from JVM utility methods.\n */\n\n/**\n * Merges object literals together into a new object. Emulates underscore's merge function.\n */\nexport function merge(...literals: {[prop: string]: any}[]): {[prop: string]: any} {\n  var newObject: {[prop: string]: any} = {};\n  literals.forEach((literal) => {\n    Object.keys(literal).forEach((key) => {\n      newObject[key] = literal[key];\n    });\n  });\n  return newObject;\n}\n\nexport function are_in_browser(): boolean {\n  return process.platform === 'browser';\n}\n\nexport var typedArraysSupported: boolean = typeof ArrayBuffer !== \"undefined\";\n\n/**\n * Converts JVM internal names into JS-safe names. Only for use with reference\n * types.\n * Ljava/lang/Object; => java_lang_Object\n * Lfoo/Bar_baz; => foo_Bar__baz\n *\n * Is NOT meant to be unambiguous!\n *\n * Also handles the special characters described here:\n * https://blogs.oracle.com/jrose/entry/symbolic_freedom_in_the_vm\n */\nexport function jvmName2JSName(jvmName: string): string {\n  switch (jvmName[0]) {\n    case 'L':\n      return jvmName.slice(1, jvmName.length - 1).replace(/_/g, '__')\n        // Remove / replace characters that are invalid for JS symbols.\n        .replace(/[\\/.;$<>\\[\\]:\\\\=^-]/g, '_');\n    case '[':\n      return `ARR_${jvmName2JSName(jvmName.slice(1))}`;\n    default:\n      return jvmName;\n  }\n}\n\n/**\n * Re-escapes JVM names for eval'd code. Otherwise, JavaScript removes the escapes.\n */\nexport function reescapeJVMName(jvmName: string): string {\n  return jvmName.replace(/\\\\/g, '\\\\\\\\');\n}\n\n/**\n * Applies an async function to each element of a list, in order.\n */\nexport function asyncForEach<T>(\n      lst: Array<T>,\n      fn: (elem: T, next_item: (err?: any) => void) => void,\n      done_cb: (err?: any) => void\n  ): void {\n  var i = -1;\n  function process(err?: any): void {\n    if (err) {\n      done_cb(err);\n    } else {\n      i++;\n      if (i < lst.length) {\n        fn(lst[i], process);\n      } else {\n        done_cb();\n      }\n    }\n  }\n  process();\n}\n\n/**\n * Runs the specified tasks in series.\n */\nexport function asyncSeries(tasks: {(next: (err?: any) => void): void}[], doneCb: (err?: any) => void) {\n  var i = -1;\n  function process(err?: any): void {\n    if (err) {\n      doneCb(err);\n    } else {\n      i++;\n      if (i < tasks.length) {\n        tasks[i](process);\n      } else {\n        doneCb();\n      }\n    }\n  }\n  process();\n}\n\n/**\n * Applies the function to each element of the list in order in series.\n * The first element that returns success halts the process, and triggers\n * done_cb. If no elements return success, done_cb is triggered with no\n * arguments.\n *\n * I wrote this specifically for classloading, but it may have uses elsewhere.\n */\nexport function asyncFind<T>(\n    lst: Array<T>,\n    fn: (elem: T, nextItem: (success: boolean) => void) => void,\n    done_cb: (elem?: T) => void\n  ): void {\n  var i = -1;\n  function process(success: boolean): void {\n    if (success) {\n      done_cb(lst[i]);\n    } else {\n      i++;\n      if (i < lst.length) {\n        fn(lst[i], process);\n      } else {\n        done_cb();\n      }\n    }\n  }\n  process(false);\n}\n\nif (!(<any> Math)['imul']) {\n  (<any> Math)['imul'] = function(a: number, b: number) {\n    // polyfill from https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/imul\n    var ah = (a >>> 16) & 0xffff;\n    var al = a & 0xffff;\n    var bh = (b >>> 16) & 0xffff;\n    var bl = b & 0xffff;\n    // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n  };\n}\n\nif (!(<any> Math)['expm1']) {\n  (<any> Math)['expm1'] = function(x: number): number {\n    if (Math.abs(x) < 1e-5) {\n      return x + 0.5*x*x;\n    } else {\n      return Math.exp(x) - 1.0;\n    }\n  };\n}\n\nif (!(<any> Math)['sinh']){\n  (<any> Math)['sinh'] = function(a: number): number {\n    var exp = Math.exp(a);\n    return (exp - 1 / exp) / 2;\n  }\n}\n\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function (searchElement, fromIndex?) {\n    if (this == null) {\n      throw new TypeError();\n    }\n    var t = Object(this);\n    var len = t.length >>> 0;\n\n    if (len === 0) {\n      return -1;\n    }\n    var n = 0;\n    if (fromIndex !== undefined) {\n      n = Number(fromIndex);\n      if (n != n) { // shortcut for verifying if it's NaN\n        n = 0;\n      } else if (n != 0 && n != Infinity && n != -Infinity) {\n        n = ((n > 0 ? 1 : 0) || -1) * Math.floor(Math.abs(n));\n      }\n    }\n    if (n >= len) {\n      return -1;\n    }\n    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n    for (; k < len; k++) {\n      if (k in t && t[k] === searchElement) {\n        return k;\n      }\n    }\n    return -1;\n  };\n}\n\n/**\n * Checks if accessingCls has permission to a field or method with the given\n * flags on owningCls.\n *\n * Modifier    | Class | Package | Subclass | World\n * ————————————+———————+—————————+——————————+———————\n * public      |  y    |    y    |    y     |   y\n * ————————————+———————+—————————+——————————+———————\n * protected   |  y    |    y    |    y     |   n\n * ————————————+———————+—————————+——————————+———————\n * no modifier |  y    |    y    |    n     |   n\n * ————————————+———————+—————————+——————————+———————\n * private     |  y    |    n    |    n     |   n\n *\n * y: accessible\n * n: not accessible\n */\nexport function checkAccess(accessingCls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, owningCls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, accessFlags: Flags): boolean {\n  if (accessFlags.isPublic()) {\n    return true;\n  } else if (accessFlags.isProtected()) {\n    return accessingCls.getPackageName() === owningCls.getPackageName() || accessingCls.isSubclass(owningCls);\n  } else if (accessFlags.isPrivate()) {\n    return accessingCls === owningCls;\n  } else {\n    return accessingCls.getPackageName() === owningCls.getPackageName();\n  }\n}\n\n/**\n * Truncates a floating point into an integer.\n */\nexport function float2int(a: number): number {\n  if (a > enums.Constants.INT_MAX) {\n    return enums.Constants.INT_MAX;\n  } else if (a < enums.Constants.INT_MIN) {\n    return enums.Constants.INT_MIN;\n  } else {\n    return a | 0;\n  }\n}\n\nvar supportsArrayBuffers = typeof(ArrayBuffer) !== 'undefined';\n\n/**\n * Converts a byte array to a buffer. **Copies.**\n */\nexport function byteArray2Buffer(bytes: number[] | Int8Array, offset: number = 0, len: number = bytes.length): NodeBuffer {\n  if (supportsArrayBuffers && ArrayBuffer.isView(bytes)) {\n    let offset = (<Int8Array> bytes).byteOffset;\n    return new Buffer(<any> (<Int8Array> bytes).buffer.slice(offset, offset + bytes.length));\n  } else {\n    var buff = new Buffer(len), i: number;\n    for (i = 0; i < len; i++) {\n      buff.writeInt8(bytes[offset + i], i);\n    }\n    return buff;\n  }\n}\n\nexport interface Arrayish {\n  [idx: number]: number;\n}\n\nexport function isUint8Array(arr: Arrayish): arr is Uint8Array {\n  if (arr && typeof(Uint8Array) !== \"undefined\" && arr instanceof Uint8Array) {\n    return true;\n  }\n  return false;\n}\n\nexport function isInt8Array(arr: Arrayish): arr is Int8Array {\n  if (arr && typeof(Int8Array) !== \"undefined\" && arr instanceof Int8Array) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Converts an Int8Array or an array of 8-bit signed ints into\n * a Uint8Array or an array of 8-bit unsigned ints.\n */\nexport function i82u8(arr: number[] | Int8Array, start: number, len: number): number[] | Uint8Array {\n  if (isInt8Array(arr)) {\n    return new Uint8Array(arr.buffer, arr.byteOffset + start, len);\n  } else if (Array.isArray(arr)) {\n    if (typeof(Uint8Array) !== \"undefined\") {\n      var i8arr = new Int8Array(len);\n      if (start === 0 && len === arr.length) {\n        i8arr.set(arr, 0);\n      } else {\n        i8arr.set(arr.slice(start, start + len), 0);\n      }\n      return new Uint8Array(i8arr.buffer);\n    } else {\n      // Slow way.\n      let rv = new Array<number>(len);\n      for (let i = 0; i < len; i++) {\n        rv[i] = arr[start + i] & 0xFF;\n      }\n      return rv;\n    }\n  } else {\n    throw new TypeError(`Invalid array.`);\n  }\n}\n\n/**\n * Converts an Uint8Array or an array of 8-bit unsigned ints into\n * an Int8Array or an array of 8-bit signed ints.\n */\nexport function u82i8(arr: number[] | Uint8Array, start: number, len: number): number[] | Int8Array {\n  if (isUint8Array(arr)) {\n    return new Int8Array(arr.buffer, arr.byteOffset + start, len);\n  } else if (Array.isArray(arr)) {\n    if (typeof(Int8Array) !== \"undefined\") {\n      var u8arr = new Uint8Array(len);\n      if (start === 0 && len === arr.length) {\n        u8arr.set(arr, 0);\n      } else {\n        u8arr.set(arr.slice(start, start + len), 0);\n      }\n      return new Int8Array(u8arr.buffer);\n    } else {\n      // Slow way.\n      let rv = new Array<number>(len);\n      for (let i = 0; i < len; i++) {\n        rv[i] = arr[start + i];\n        if (rv[i] > 127) {\n          // Sign extend.\n          rv[i] |= 0xFFFFFF80\n        }\n      }\n      return rv;\n    }\n  } else {\n    throw new TypeError(`Invalid array.`);\n  }\n}\n\n/**\n * Converts a buffer into either an Int8Array, or an array of signed 8-bit ints.\n */\nexport function buff2i8(buff: NodeBuffer): Int8Array | number[] {\n  let arrayish = BFSUtils.buffer2Arrayish(buff);\n  return u82i8(<any> arrayish, 0, arrayish.length);\n}\n\n// Call this ONLY on the result of two non-NaN numbers.\nexport function wrapFloat(a: number): number {\n  if (a > 3.40282346638528860e+38) {\n    return Number.POSITIVE_INFINITY;\n  }\n  if (0 < a && a < 1.40129846432481707e-45) {\n    return 0;\n  }\n  if (a < -3.40282346638528860e+38) {\n    return Number.NEGATIVE_INFINITY;\n  }\n  if (0 > a && a > -1.40129846432481707e-45) {\n    return 0;\n  }\n  return a;\n}\n\n// Convert :count chars starting from :offset in a Java character array into a JS string\nexport function chars2jsStr(jvmCarr: JVMTypes.JVMArray<number>, offset: number = 0, count: number = jvmCarr.array.length): string {\n  var i : number, carrArray = jvmCarr.array, rv = \"\", endOffset = offset + count;\n  for (i = offset; i < endOffset; i++) {\n    rv += String.fromCharCode(carrArray[i]);\n  }\n  return rv;\n}\n\n// TODO: Is this used anywhere where we are *not* inserting the bytestr into\n// a JVMArray object?\n// TODO: Could inject this as a static String method...\nexport function bytestr2Array(byteStr: string): number[] {\n  var rv : number[] = [];\n  for (var i = 0; i < byteStr.length; i++) {\n    rv.push(byteStr.charCodeAt(i));\n  }\n  return rv;\n}\n\nexport function array2bytestr(byteArray: number[]): string {\n  // XXX: We'd like to use String.fromCharCode(bytecode_array...)\n  //  but that fails on Webkit with arrays longer than 2^31. See issue #129 for details.\n  var rv = '';\n  for (var i = 0; i < byteArray.length; i++) {\n    rv += String.fromCharCode(byteArray[i]);\n  }\n  return rv;\n}\n\n/**\n * Bit masks for the flag byte.\n */\nexport enum FlagMasks {\n  PUBLIC = 0x1,\n  PRIVATE = 0x2,\n  PROTECTED = 0x4,\n  STATIC = 0x8,\n  FINAL = 0x10,\n  SYNCHRONIZED = 0x20,\n  SUPER = 0x20,\n  VOLATILE = 0x40,\n  TRANSIENT = 0x80,\n  VARARGS = 0x80,\n  NATIVE = 0x100,\n  INTERFACE = 0x200,\n  ABSTRACT = 0x400,\n  STRICT = 0x800\n}\n\n/**\n * Represents a 'flag byte'. See �4 of the JVM spec.\n * @todo Separate METHOD flags and CLASS flags.\n */\nexport class Flags {\n  private byte: number;\n  constructor(byte: number) {\n    this.byte = byte;\n  }\n\n  public isPublic(): boolean {\n    return (this.byte & FlagMasks.PUBLIC) > 0;\n  }\n\n  public isPrivate(): boolean {\n    return (this.byte & FlagMasks.PRIVATE) > 0;\n  }\n\n  public isProtected(): boolean {\n    return (this.byte & FlagMasks.PROTECTED) > 0;\n  }\n\n  public isStatic(): boolean {\n    return (this.byte & FlagMasks.STATIC) > 0;\n  }\n\n  public isFinal(): boolean {\n    return (this.byte & FlagMasks.FINAL) > 0;\n  }\n\n  public isSynchronized(): boolean {\n    return (this.byte & FlagMasks.SYNCHRONIZED) > 0;\n  }\n\n  public isSuper(): boolean {\n    return (this.byte & FlagMasks.SUPER) > 0;\n  }\n\n  public isVolatile(): boolean {\n    return (this.byte & FlagMasks.VOLATILE) > 0;\n  }\n\n  public isTransient(): boolean {\n    return (this.byte & FlagMasks.TRANSIENT) > 0;\n  }\n\n  public isNative(): boolean {\n    return (this.byte & FlagMasks.NATIVE) > 0;\n  }\n\n  public isInterface(): boolean {\n    return (this.byte & FlagMasks.INTERFACE) > 0;\n  }\n\n  public isAbstract(): boolean {\n    return (this.byte & FlagMasks.ABSTRACT) > 0;\n  }\n\n  public isStrict(): boolean {\n    return (this.byte & FlagMasks.STRICT) > 0;\n  }\n\n  /**\n   * Changes a function to native. Used for trapped methods.\n   */\n  public setNative(n: boolean): void {\n    if (n) {\n      this.byte = this.byte | FlagMasks.NATIVE;\n    } else {\n      this.byte = this.byte & (~FlagMasks.NATIVE);\n    }\n  }\n\n  public isVarArgs(): boolean {\n    return (this.byte & FlagMasks.VARARGS) > 0;\n  }\n\n  public getRawByte(): number {\n    return this.byte;\n  }\n}\n\nexport function initialValue(type_str: string): any {\n  if (type_str === 'J') return gLong.ZERO;\n  var c = type_str[0];\n  if (c === '[' || c === 'L') return null;\n  return 0;\n}\n\n/**\n * Java classes are represented internally using slashes as delimiters.\n * These helper functions convert between the two representations.\n * Ljava/lang/Class; => java.lang.Class\n */\nexport function ext_classname(str: string): string {\n  return descriptor2typestr(str).replace(/\\//g, '.');\n}\n\n/**\n * java.lang.Class => Ljava/lang/Class;\n */\nexport function int_classname(str: string): string {\n  return typestr2descriptor(str.replace(/\\./g, '/'));\n}\n\nexport function verify_int_classname(str: string): boolean {\n  var array_nesting = str.match(/^\\[*/)[0].length;\n  if (array_nesting > 255) {\n    return false;\n  }\n  if (array_nesting > 0) {\n    str = str.slice(array_nesting);\n  }\n  if (str[0] === 'L') {\n    if (str[str.length - 1] !== ';') {\n      return false;\n    }\n    str = str.slice(1, -1);\n  }\n  if (str in internal2external) {\n    return true;\n  }\n  if (str.match(/\\/{2,}/)) {\n    return false;\n  }\n  var parts = str.split('/');\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].match(/[^$_a-z0-9]/i)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport var internal2external: { [internalType: string]: string } = {\n  B: 'byte',\n  C: 'char',\n  D: 'double',\n  F: 'float',\n  I: 'int',\n  J: 'long',\n  S: 'short',\n  V: 'void',\n  Z: 'boolean'\n};\n\nexport var external2internal: { [externalType: string]: string } = {};\nfor (var k in internal2external) {\n  external2internal[internal2external[k]] = k;\n}\n\n/**\n * Given a method descriptor, returns the typestrings for the return type\n * and the parameters.\n *\n * e.g. (Ljava/lang/Class;Z)Ljava/lang/String; =>\n *        [\"Ljava/lang/Class;\", \"Z\", \"Ljava/lang/String;\"]\n */\nexport function getTypes(methodDescriptor: string): string[] {\n  var i = 0, types: string[] = [], endIdx: number;\n  for (i = 0; i < methodDescriptor.length; i++) {\n    switch (methodDescriptor.charAt(i)) {\n      case '(':\n      case ')':\n        //Skip.\n        break;\n      case 'L':\n        // Reference type.\n        endIdx = methodDescriptor.indexOf(';', i);\n        types.push(methodDescriptor.slice(i, endIdx + 1));\n        i = endIdx;\n        break;\n      case '[':\n        endIdx = i + 1;\n        // Find the start of the component.\n        while (methodDescriptor.charAt(endIdx) === '[') {\n          endIdx++;\n        }\n        if (methodDescriptor.charAt(endIdx) === 'L') {\n          // Reference component. Read ahead to end.\n          endIdx = methodDescriptor.indexOf(';', endIdx);\n          types.push(methodDescriptor.slice(i, endIdx + 1));\n        } else {\n          // Primitive component.\n          types.push(methodDescriptor.slice(i, endIdx + 1));\n        }\n        i = endIdx;\n        break;\n      default:\n        // Primitive type.\n        types.push(methodDescriptor.charAt(i));\n        break;\n    }\n  }\n  return types;\n}\n\n// Get the component type of an array type string.\n// Cut off the [L and ; for arrays of classes.\nexport function get_component_type(type_str: string): string {\n  return type_str.slice(1);\n}\n\nexport function is_array_type(type_str: string): boolean {\n  return type_str[0] === '[';\n}\n\nexport function is_primitive_type(type_str: string): boolean {\n  return type_str in internal2external;\n}\n\nexport function is_reference_type(type_str: string): boolean {\n  return type_str[0] === 'L';\n}\n\n/**\n * Converts type descriptors into standardized internal type strings.\n * Ljava/lang/Class; => java/lang/Class   Reference types\n * [Ljava/lang/Class; is unchanged        Array types\n * C => char                              Primitive types\n */\nexport function descriptor2typestr(type_str: string): string {\n  var c = type_str[0];\n  if (c in internal2external) return internal2external[c];\n  if (c === 'L') return type_str.slice(1, -1);\n  if (c === '[') return type_str;\n  // no match\n  throw new Error(\"Unrecognized type string: \" + type_str);\n}\n\n// Takes a character array of concatenated type descriptors and returns/removes the first one.\nexport function carr2descriptor(carr: string[]): string {\n  var c = carr.shift();\n  if (c == null) return null;\n  if (internal2external[c] !== void 0) return c;\n  if (c === 'L') {\n    var rv = 'L';\n    while ((c = carr.shift()) !== ';') {\n      rv += c;\n    }\n    return rv + ';';\n  }\n  if (c === '[') return \"[\" + carr2descriptor(carr);\n  // no match\n  carr.unshift(c);\n  throw new Error(\"Unrecognized descriptor: \" + carr.join(''));\n}\n\n// Converts internal type strings into type descriptors. Reverse of descriptor2typestr.\nexport function typestr2descriptor(type_str: string): string {\n  if (external2internal[type_str] !== void 0) {\n    return external2internal[type_str];\n  } else if (type_str[0] === '[') {\n    return type_str;\n  } else {\n    return \"L\" + type_str + \";\";\n  }\n}\n\n/**\n * Java's reflection APIs need to unbox primitive arguments to function calls,\n * as they are boxed in an Object array. This utility function converts\n * an array of arguments into the appropriate form prior to function invocation.\n * Note that this includes padding category 2 primitives, which consume two\n * slots in the array (doubles/longs).\n */\nexport function unboxArguments(thread: threading.JVMThread, paramTypes: string[], args: JVMTypes.java_lang_Object[]): any[] {\n  var rv: any[] = [], i: number, type: string, arg: JVMTypes.java_lang_Object;\n  for (i = 0; i < paramTypes.length; i++) {\n    type = paramTypes[i];\n    arg = args[i];\n    if (is_primitive_type(type)) {\n      // Unbox the primitive type.\n      // TODO: Precisely type this better. Once TypeScript lets you import\n      // union types, we can define a \"JVMPrimitive\" type...\n      rv.push((<JVMTypes.java_lang_Integer> arg).unbox());\n      if (type === 'J' || type === 'D') {\n        // 64-bit primitives take up two argument slots. Doppio uses a NULL for the second slot.\n        rv.push(null);\n      }\n    } else {\n      // Reference type; do not change.\n      rv.push(arg);\n    }\n  }\n  return rv;\n}\n\n/**\n * Given a method descriptor as a JS string, returns a corresponding MethodType\n * object.\n */\nexport function createMethodType(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, descriptor: string, cb: (e: JVMTypes.java_lang_Throwable, type: JVMTypes.java_lang_invoke_MethodType) => void) {\n  cl.initializeClass(thread, 'Ljava/lang/invoke/MethodHandleNatives;', (cdata: ClassData.ReferenceClassData<JVMTypes.java_lang_invoke_MethodHandleNatives>) => {\n    if (cdata !== null) {\n      var jsCons = <typeof JVMTypes.java_lang_invoke_MethodHandleNatives> cdata.getConstructor(thread), classes = getTypes(descriptor);\n      classes.push('[Ljava/lang/Class;');\n      // Need the return type and parameter types.\n      cl.resolveClasses(thread, classes, (classMap: { [name: string]: ClassData.ClassData }) => {\n        var types = classes.map((cls: string) => classMap[cls].getClassObject(thread));\n        types.pop(); // Discard '[Ljava/lang/Class;'\n        var rtype = types.pop(), // Return type.\n          clsArrCons = (<ClassData.ArrayClassData<JVMTypes.java_lang_Class>> classMap['[Ljava/lang/Class;']).getConstructor(thread),\n          ptypes = new clsArrCons(thread, types.length);\n        ptypes.array = types;\n\n        jsCons['java/lang/invoke/MethodHandleNatives/findMethodHandleType(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;'](thread, [rtype, ptypes], cb);\n      });\n    }\n  });\n}\n\n/**\n * Given a method descriptor, returns the number of words required to store\n * its arguments.\n * Does not include considerations for e.g. the 'this' argument, since the\n * descriptor does not specify if the method is static or not.\n */\nexport function getMethodDescriptorWordSize(descriptor: string): number {\n  var parsedDescriptor = getTypes(descriptor),\n    words = parsedDescriptor.length - 1, i: number, p: string;\n  // Remove return type.\n  parsedDescriptor.pop();\n\n  // Double count doubles / longs.\n  for (i = 0; i < parsedDescriptor.length; i++) {\n    p = parsedDescriptor[i];\n    if (p === 'D' || p === 'J') {\n      words++;\n    }\n  }\n\n  return words;\n}\n\n/**\n * Given a return type as a Class object, and an array of class objects for\n * parameter types, returns the descriptor string for the method type.\n */\nexport function getDescriptorString(rtype: JVMTypes.java_lang_Class, ptypes?: JVMTypes.JVMArray<JVMTypes.java_lang_Class>): string {\n  var rv = \"(\";\n  if (ptypes !== undefined && ptypes !== null) {\n    ptypes.array.forEach((ptype: JVMTypes.java_lang_Class) => {\n      rv += ptype.$cls.getInternalName();\n    });\n  }\n  rv += \")\" + rtype.$cls.getInternalName();\n  return rv;\n}\n\n\n/**\n * Have a JavaClassLoaderObject and need its ClassLoader object? Use this method!\n * @todo Install on Java ClassLoader objects.\n */\nexport function getLoader(thread: threading.JVMThread, jclo: JVMTypes.java_lang_ClassLoader): ClassLoader.ClassLoader {\n  if ((jclo != null) && (jclo.$loader != null)) {\n    return jclo.$loader;\n  }\n  return thread.getBsCl();\n}\n\n/**\n * \"Fast\" array copy; does not have to check every element for illegal\n * assignments. You can do tricks here (if possible) to copy chunks of the array\n * at a time rather than element-by-element.\n * This function *cannot* access any attribute other than 'array' on src due to\n * the special case when src == dest (see code for System.arraycopy below).\n */\nexport function arraycopyNoCheck(src: JVMTypes.JVMArray<any>, srcPos: number, dest: JVMTypes.JVMArray<any>, destPos: number, length: number): void {\n  var j = destPos;\n  var end = srcPos + length;\n  for (var i = srcPos; i < end; i++) {\n    dest.array[j++] = src.array[i];\n  }\n}\n\n/**\n * \"Slow\" array copy; has to check every element for illegal assignments.\n * You cannot do any tricks here; you must copy element by element until you\n * have either copied everything, or encountered an element that cannot be\n * assigned (which causes an exception).\n * Guarantees: src and dest are two different reference types. They cannot be\n *             primitive arrays.\n */\nexport function arraycopyCheck(thread: threading.JVMThread, src: JVMTypes.JVMArray<JVMTypes.java_lang_Object>, srcPos: number, dest: JVMTypes.JVMArray<JVMTypes.java_lang_Object>, destPos: number, length: number): void {\n  var j = destPos;\n  var end = srcPos + length;\n  var destCompCls = dest.getClass().getComponentClass();\n  for (var i = srcPos; i < end; i++) {\n    // Check if null or castable.\n    if (src.array[i] === null || src.array[i].getClass().isCastable(destCompCls)) {\n      dest.array[j] = src.array[i];\n    } else {\n      thread.throwNewException('Ljava/lang/ArrayStoreException;', 'Array element in src cannot be cast to dest array type.');\n      return;\n    }\n    j++;\n  }\n}\n\nexport function initString(cl: ClassLoader.ClassLoader, str: string): JVMTypes.java_lang_String {\n  var carr = initCarr(cl, str);\n  var strCons = (<ClassData.ReferenceClassData<JVMTypes.java_lang_String>> cl.getResolvedClass('Ljava/lang/String;')).getConstructor(null);\n  var strObj = new strCons(null);\n  strObj['java/lang/String/value'] = carr;\n  return strObj;\n}\n\nexport function initCarr(cl: ClassLoader.ClassLoader, str: string): JVMTypes.JVMArray<number> {\n  var arrClsCons = (<ClassData.ArrayClassData<number>> cl.getInitializedClass(null, '[C')).getConstructor(null),\n    carr = new arrClsCons(null, str.length),\n    carrArray = carr.array;\n\n  for (var i = 0; i < str.length; i++) {\n    carrArray[i] = str.charCodeAt(i);\n  }\n\n  return carr;\n}\n\nexport function newArrayFromClass<T>(thread: threading.JVMThread, clazz: ClassData.ArrayClassData<T>, length: number): JVMTypes.JVMArray<T> {\n  return new (clazz.getConstructor(thread))(thread, length);\n}\n\nexport function newArray<T>(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, desc: string, length: number): JVMTypes.JVMArray<T> {\n  var cls = <ClassData.ArrayClassData<T>> cl.getInitializedClass(thread, desc);\n  return newArrayFromClass(thread, cls, length);\n}\n\n/**\n * Separate from newArray to avoid programming mistakes where newArray and newArrayFromData are conflated.\n */\nexport function multiNewArray<T>(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, desc: string, lengths: number[]): JVMTypes.JVMArray<T> {\n  var cls = <ClassData.ArrayClassData<T>> cl.getInitializedClass(thread, desc);\n  return new (cls.getConstructor(thread))(thread, lengths);\n}\n\nexport function newObjectFromClass<T extends JVMTypes.java_lang_Object>(thread: threading.JVMThread, clazz: ClassData.ReferenceClassData<T>) {\n  return new (clazz.getConstructor(thread))(thread);\n}\n\nexport function newObject<T extends JVMTypes.java_lang_Object>(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, desc: string): T {\n  var cls = <ClassData.ReferenceClassData<T>> cl.getInitializedClass(thread, desc);\n  return newObjectFromClass(thread, cls);\n}\n\nexport function getStaticFields<T>(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, desc: string): T {\n  return <T> <any> (<ClassData.ReferenceClassData<JVMTypes.java_lang_Object>> cl.getInitializedClass(thread, desc)).getConstructor(thread);\n}\n\nexport function newArrayFromDataWithClass<T>(thread: threading.JVMThread, cls: ClassData.ArrayClassData<T>, data: T[]): JVMTypes.JVMArray<T> {\n  var arr = newArrayFromClass<T>(thread, cls, 0);\n  arr.array = data;\n  return arr;\n}\n\nexport function newArrayFromData<T>(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, desc: string, data: T[]): JVMTypes.JVMArray<T> {\n  var arr = newArray<T>(thread, cl, desc, 0);\n  arr.array = data;\n  return arr;\n}\n\n/**\n * Returns the boxed class name of the given primitive type.\n */\nexport function boxClassName(primType: string): string {\n  switch (primType) {\n    case 'B':\n      return 'Ljava/lang/Byte;';\n    case 'C':\n      return 'Ljava/lang/Character;';\n    case 'D':\n      return 'Ljava/lang/Double;';\n    case 'F':\n      return 'Ljava/lang/Float;';\n    case 'I':\n      return 'Ljava/lang/Integer;';\n    case 'J':\n      return 'Ljava/lang/Long;';\n    case 'S':\n      return 'Ljava/lang/Short;';\n    case 'Z':\n      return 'Ljava/lang/Boolean;';\n    case 'V':\n      return 'Ljava/lang/Void;';\n    default:\n      throw new Error(`Tried to box a non-primitive class: ${this.className}`);\n  }\n}\n\n/**\n * Boxes the given primitive value.\n */\nexport function boxPrimitiveValue(thread: threading.JVMThread, type: string, val: any): JVMTypes.java_lang_Integer {\n  // XXX: We assume Integer for typing purposes only; avoids a huge union type.\n  var primCls = <ClassData.ReferenceClassData<JVMTypes.java_lang_Integer>> thread.getBsCl().getInitializedClass(thread, boxClassName(type)),\n   primClsCons = <typeof JVMTypes.java_lang_Integer> primCls.getConstructor(thread);\n  return primClsCons.box(val);\n}\n\n/**\n * Boxes the given arguments into an Object[].\n *\n * @param descriptor The descriptor at the *call site*.\n * @param data The actual arguments for this function call.\n * @param isStatic If false, disregard the first type in the descriptor, as it is the 'this' argument.\n */\nexport function boxArguments(thread: threading.JVMThread, objArrCls: ClassData.ArrayClassData<JVMTypes.java_lang_Object>, descriptor: string, data: any[], isStatic: boolean, skipArgs: number = 0): JVMTypes.JVMArray<JVMTypes.java_lang_Object> {\n  var paramTypes = getTypes(descriptor),\n    boxedArgs = newArrayFromClass(thread, objArrCls, paramTypes.length - (isStatic ? 1 : 2) - skipArgs),\n    i: number, j: number = 0, boxedArgsArr = boxedArgs.array, type: string;\n\n  // Ignore return value.\n  paramTypes.pop();\n  if (!isStatic) {\n    // Ignore 'this' argument.\n    paramTypes.shift();\n  }\n\n  if (skipArgs > 0) {\n    // Ignore regular arguments\n    paramTypes = paramTypes.slice(skipArgs);\n    data = data.slice(skipArgs);\n  }\n\n  for (i = 0; i < paramTypes.length; i++) {\n    type = paramTypes[i];\n    switch(type[0]) {\n      case '[':\n      case 'L':\n        // Single argument slot, no boxing required.\n        boxedArgsArr[i] = data[j];\n        break;\n      case 'J':\n      case 'D':\n        boxedArgsArr[i] = boxPrimitiveValue(thread, type, data[j]);\n        j++;\n        break;\n      default:\n        boxedArgsArr[i] = boxPrimitiveValue(thread, type, data[j]);\n        break;\n    }\n    j++;\n  }\n\n  return boxedArgs;\n}\n\nexport function forwardResult<T extends JVMTypes.java_lang_Object>(thread: threading.JVMThread): (e?: JVMTypes.java_lang_Throwable, rv?: T) => void {\n  return (e?: JVMTypes.java_lang_Throwable, rv?: T): void => {\n    if (e) {\n      thread.throwException(e);\n    } else {\n      thread.asyncReturn(rv);\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/util.ts\n **/","var BrowserFS = require('browserfs');module.exports=BrowserFS.BFSRequire('buffer').Buffer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./shims/BFSBuffer.js\n ** module id = 7\n ** module chunks = 0\n **/","// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n *\n */\nclass gLong {\n  private low_ : number\n  private high_ : number\n  // A cache of the Long representations of small integer values.\n  private static IntCache_: { [val: number]: gLong } = {}\n  // Commonly used constant values.\n  private static TWO_PWR_16_DBL_ = 1 << 16;\n  private static TWO_PWR_24_DBL_ = 1 << 24;\n  private static TWO_PWR_32_DBL_ = gLong.TWO_PWR_16_DBL_ * gLong.TWO_PWR_16_DBL_;\n  private static TWO_PWR_31_DBL_ = gLong.TWO_PWR_32_DBL_ / 2;\n  private static TWO_PWR_48_DBL_ = gLong.TWO_PWR_32_DBL_ * gLong.TWO_PWR_16_DBL_;\n  private static TWO_PWR_64_DBL_ = gLong.TWO_PWR_32_DBL_ * gLong.TWO_PWR_32_DBL_;\n  private static TWO_PWR_63_DBL_ = gLong.TWO_PWR_64_DBL_ / 2;\n\n  public static ZERO = gLong.fromInt(0);\n  public static ONE = gLong.fromInt(1);\n  public static NEG_ONE = gLong.fromInt(-1);\n  public static MAX_VALUE = gLong.fromBits(0xFFFFFFFF, 0x7FFFFFFF);\n  public static MIN_VALUE = gLong.fromBits(0, 0x80000000);\n  private static TWO_PWR_24_ = gLong.fromInt(gLong.TWO_PWR_24_DBL_);\n\n  /**\n   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n   * values as *signed* integers.  See the from* functions below for more\n   * convenient ways of constructing Longs.\n   *\n   * The internal representation of a long is the two given signed, 32-bit values.\n   * We use 32-bit pieces because these are the size of integers on which\n   * Javascript performs bit-operations.  For operations like addition and\n   * multiplication, we split each number into 16-bit pieces, which can easily be\n   * multiplied within Javascript's floating-point representation without overflow\n   * or change in sign.\n   *\n   * In the algorithms below, we frequently reduce the negative case to the\n   * positive case by negating the input(s) and then post-processing the result.\n   * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n   * a positive number, it overflows back into a negative).  Not handling this\n   * case would often result in infinite recursion.\n   *\n   * @param {number} low  The low (signed) 32 bits of the long.\n   * @param {number} high  The high (signed) 32 bits of the long.\n   * @constructor\n   */\n  constructor(low: number, high: number) {\n    this.low_ = low | 0;  // force into 32 signed bits.\n    this.high_ = high | 0;  // force into 32 signed bits.\n  }\n\n  /**\n   * Returns a Long representing the given (32-bit) integer value.\n   * @param {number} value The 32-bit integer in question.\n   * @return {!gLong} The corresponding Long value.\n   */\n  public static fromInt(value: number): gLong {\n    if (-128 <= value && value < 128) {\n      var cachedObj = gLong.IntCache_[value];\n      if (cachedObj) {\n        return cachedObj;\n      }\n    }\n\n    var obj = new gLong(value, value < 0 ? -1 : 0);\n    if (-128 <= value && value < 128) {\n      gLong.IntCache_[value] = obj;\n    }\n    return obj;\n  }\n\n  /**\n   * Returns a Long representing the given value, provided that it is a finite\n   * number.  Otherwise, zero is returned.\n   * @param {number} value The number in question.\n   * @return {!gLong} The corresponding Long value.\n   */\n  public static fromNumber(value: number): gLong {\n    if (isNaN(value) || !isFinite(value)) {\n      return gLong.ZERO;\n    } else if (value <= -gLong.TWO_PWR_63_DBL_) {\n      return gLong.MIN_VALUE;\n    } else if (value + 1 >= gLong.TWO_PWR_63_DBL_) {\n      return gLong.MAX_VALUE;\n    } else if (value < 0) {\n      return gLong.fromNumber(-value).negate();\n    } else {\n      return new gLong(\n          (value % gLong.TWO_PWR_32_DBL_) | 0,\n          (value / gLong.TWO_PWR_32_DBL_) | 0);\n    }\n  }\n\n  /**\n   * Returns a Long representing the 64-bit integer that comes by concatenating\n   * the given high and low bits.  Each is assumed to use 32 bits.\n   * @param {number} lowBits The low 32-bits.\n   * @param {number} highBits The high 32-bits.\n   * @return {!gLong} The corresponding Long value.\n   */\n  public static fromBits(lowBits: number, highBits: number): gLong {\n    return new gLong(lowBits, highBits);\n  }\n\n  /**\n   * Returns a Long representation of the given string, written using the given\n   * radix.\n   * @param {string} str The textual representation of the Long.\n   * @param {number=} opt_radix The radix in which the text is written.\n   * @return {!gLong} The corresponding Long value.\n   */\n  public static fromString(str: string, opt_radix?: number): gLong {\n    if (str.length == 0) {\n      throw Error('number format error: empty string');\n    }\n\n    var radix = opt_radix || 10;\n    if (radix < 2 || 36 < radix) {\n      throw Error('radix out of range: ' + radix);\n    }\n\n    if (str.charAt(0) == '-') {\n      return gLong.fromString(str.substring(1), radix).negate();\n    } else if (str.indexOf('-') >= 0) {\n      throw Error('number format error: interior \"-\" character: ' + str);\n    }\n\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = gLong.fromNumber(Math.pow(radix, 8));\n\n    var result = gLong.ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = gLong.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(gLong.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(gLong.fromNumber(value));\n      }\n    }\n    return result;\n  }\n\n  /** @return {number} The value, assuming it is a 32-bit integer. */\n  public toInt(): number {\n    return this.low_;\n  }\n\n  /** @return {number} The closest floating-point representation to this value. */\n  public toNumber(): number {\n    return this.high_ * gLong.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n  }\n\n  /**\n   * @param {number=} opt_radix The radix in which the text should be written.\n   * @return {string} The textual representation of this value.\n   */\n  public toString(opt_radix?: number): string {\n    var radix = opt_radix || 10;\n    if (radix < 2 || 36 < radix) {\n      throw Error('radix out of range: ' + radix);\n    }\n\n    if (this.isZero()) {\n      return '0';\n    }\n\n    if (this.isNegative()) {\n      if (this.equals(gLong.MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = gLong.fromNumber(radix);\n        var div = this.div(radixLong);\n        var rem = div.multiply(radixLong).subtract(this);\n        return div.toString(radix) + rem.toInt().toString(radix);\n      } else {\n        return '-' + this.negate().toString(radix);\n      }\n    }\n\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = gLong.fromNumber(Math.pow(radix, 6));\n    var rem: gLong = this;\n    var result = '';\n    while (true) {\n      var remDiv = rem.div(radixToPower);\n      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n      var digits = intval.toString(radix);\n\n      rem = remDiv;\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) {\n          digits = '0' + digits;\n        }\n        result = '' + digits + result;\n      }\n    }\n  }\n\n  /** @return {number} The high 32-bits as a signed value. */\n  public getHighBits(): number {\n    return this.high_;\n  }\n\n  /** @return {number} The low 32-bits as a signed value. */\n  public getLowBits(): number {\n    return this.low_;\n  }\n\n  /** @return {number} The low 32-bits as an unsigned value. */\n  public getLowBitsUnsigned(): number {\n    return (this.low_ >= 0) ? this.low_ : gLong.TWO_PWR_32_DBL_ + this.low_;\n  }\n\n  /**\n   * @return {number} Returns the number of bits needed to represent the absolute\n   *     value of this Long.\n   */\n  public getNumBitsAbs(): number {\n    if (this.isNegative()) {\n      if (this.equals(gLong.MIN_VALUE)) {\n        return 64;\n      } else {\n        return this.negate().getNumBitsAbs();\n      }\n    } else {\n      var val = this.high_ != 0 ? this.high_ : this.low_;\n      for (var bit = 31; bit > 0; bit--) {\n        if ((val & (1 << bit)) != 0) {\n          break;\n        }\n      }\n      return this.high_ != 0 ? bit + 33 : bit + 1;\n    }\n  }\n\n  /** @return {boolean} Whether this value is zero. */\n  public isZero(): boolean {\n    return this.high_ == 0 && this.low_ == 0;\n  }\n\n  /** @return {boolean} Whether this value is negative. */\n  public isNegative(): boolean {\n    return this.high_ < 0;\n  }\n\n  /** @return {boolean} Whether this value is odd. */\n  public isOdd(): boolean {\n    return (this.low_ & 1) == 1;\n  }\n\n  /**\n   * @param {gLong} other Long to compare against.\n   * @return {boolean} Whether this Long equals the other.\n   */\n  public equals(other: gLong): boolean {\n    return (this.high_ == other.high_) && (this.low_ == other.low_);\n  }\n\n  /**\n   * @param {gLong} other Long to compare against.\n   * @return {boolean} Whether this Long does not equal the other.\n   */\n  public notEquals(other: gLong): boolean {\n    return (this.high_ != other.high_) || (this.low_ != other.low_);\n  }\n\n  /**\n   * @param {gLong} other Long to compare against.\n   * @return {boolean} Whether this Long is less than the other.\n   */\n  public lessThan(other: gLong): boolean {\n    return this.compare(other) < 0;\n  }\n\n  /**\n   * @param {gLong} other Long to compare against.\n   * @return {boolean} Whether this Long is less than or equal to the other.\n   */\n  public lessThanOrEqual(other: gLong): boolean {\n    return this.compare(other) <= 0;\n  }\n\n  /**\n   * @param {gLong} other Long to compare against.\n   * @return {boolean} Whether this Long is greater than the other.\n   */\n  public greaterThan(other: gLong): boolean {\n    return this.compare(other) > 0;\n  }\n\n  /**\n   * @param {gLong} other Long to compare against.\n   * @return {boolean} Whether this Long is greater than or equal to the other.\n   */\n  public greaterThanOrEqual(other: gLong): boolean {\n    return this.compare(other) >= 0;\n  }\n\n  /**\n   * Compares this Long with the given one.\n   * @param {gLong} other Long to compare against.\n   * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n   *     if the given one is greater.\n   */\n  public compare(other: gLong): number {\n    if (this.equals(other)) {\n      return 0;\n    }\n\n    var thisNeg = this.isNegative();\n    var otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) {\n      return -1;\n    }\n    if (!thisNeg && otherNeg) {\n      return 1;\n    }\n\n    // at this point, the signs are the same, so subtraction will not overflow\n    if (this.subtract(other).isNegative()) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n\n  /** @return {!gLong} The negation of this value. */\n  public negate(): gLong {\n    if (this.equals(gLong.MIN_VALUE)) {\n      return gLong.MIN_VALUE;\n    } else {\n      return this.not().add(gLong.ONE);\n    }\n  }\n\n  /**\n   * Returns the sum of this and the given Long.\n   * @param {gLong} other Long to add to this one.\n   * @return {!gLong} The sum of this and the given Long.\n   */\n  public add(other: gLong): gLong {\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high_ >>> 16;\n    var a32 = this.high_ & 0xFFFF;\n    var a16 = this.low_ >>> 16;\n    var a00 = this.low_ & 0xFFFF;\n\n    var b48 = other.high_ >>> 16;\n    var b32 = other.high_ & 0xFFFF;\n    var b16 = other.low_ >>> 16;\n    var b00 = other.low_ & 0xFFFF;\n\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return gLong.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n  }\n\n  /**\n   * Returns the difference of this and the given Long.\n   * @param {gLong} other Long to subtract from this.\n   * @return {!gLong} The difference of this and the given Long.\n   */\n  public subtract(other: gLong): gLong {\n    return this.add(other.negate());\n  }\n\n  /**\n   * Returns the product of this and the given long.\n   * @param {gLong} other Long to multiply with this.\n   * @return {!gLong} The product of this and the other.\n   */\n  public multiply(other: gLong): gLong {\n    if (this.isZero()) {\n      return gLong.ZERO;\n    } else if (other.isZero()) {\n      return gLong.ZERO;\n    }\n\n    if (this.equals(gLong.MIN_VALUE)) {\n      return other.isOdd() ? gLong.MIN_VALUE : gLong.ZERO;\n    } else if (other.equals(gLong.MIN_VALUE)) {\n      return this.isOdd() ? gLong.MIN_VALUE : gLong.ZERO;\n    }\n\n    if (this.isNegative()) {\n      if (other.isNegative()) {\n        return this.negate().multiply(other.negate());\n      } else {\n        return this.negate().multiply(other).negate();\n      }\n    } else if (other.isNegative()) {\n      return this.multiply(other.negate()).negate();\n    }\n\n    // If both longs are small, use float multiplication\n    if (this.lessThan(gLong.TWO_PWR_24_) &&\n        other.lessThan(gLong.TWO_PWR_24_)) {\n      return gLong.fromNumber(this.toNumber() * other.toNumber());\n    }\n\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high_ >>> 16;\n    var a32 = this.high_ & 0xFFFF;\n    var a16 = this.low_ >>> 16;\n    var a00 = this.low_ & 0xFFFF;\n\n    var b48 = other.high_ >>> 16;\n    var b32 = other.high_ & 0xFFFF;\n    var b16 = other.low_ >>> 16;\n    var b00 = other.low_ & 0xFFFF;\n\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return gLong.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n  }\n\n  /**\n   * Returns this Long divided by the given one.\n   * @param {gLong} other Long by which to divide.\n   * @return {!gLong} This Long divided by the given one.\n   */\n  public div(other: gLong): gLong {\n    if (other.isZero()) {\n      throw Error('division by zero');\n    } else if (this.isZero()) {\n      return gLong.ZERO;\n    }\n\n    if (this.equals(gLong.MIN_VALUE)) {\n      if (other.equals(gLong.ONE) ||\n          other.equals(gLong.NEG_ONE)) {\n        return gLong.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      } else if (other.equals(gLong.MIN_VALUE)) {\n        return gLong.ONE;\n      } else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shiftRight(1);\n        var l_approx = halfThis.div(other).shiftLeft(1);\n        if (l_approx.equals(gLong.ZERO)) {\n          return other.isNegative() ? gLong.ONE : gLong.NEG_ONE;\n        } else {\n          var rem = this.subtract(other.multiply(l_approx));\n          var result = l_approx.add(rem.div(other));\n          return result;\n        }\n      }\n    } else if (other.equals(gLong.MIN_VALUE)) {\n      return gLong.ZERO;\n    }\n\n    if (this.isNegative()) {\n      if (other.isNegative()) {\n        return this.negate().div(other.negate());\n      } else {\n        return this.negate().div(other).negate();\n      }\n    } else if (other.isNegative()) {\n      return this.div(other.negate()).negate();\n    }\n\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    var res = gLong.ZERO;\n    var rem: gLong = this;\n    while (rem.greaterThanOrEqual(other)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      var delta = 1;\n      if (log2 > 48)\n        delta = Math.pow(2, log2 - 48);\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      var approxRes = gLong.fromNumber(approx);\n      var approxRem = approxRes.multiply(other);\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = gLong.fromNumber(approx);\n        approxRem = approxRes.multiply(other);\n      }\n\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) {\n        approxRes = gLong.ONE;\n      }\n\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n    return res;\n  }\n\n  /**\n   * Returns this Long modulo the given one.\n   * @param {gLong} other Long by which to mod.\n   * @return {!gLong} This Long modulo the given one.\n   */\n  public modulo(other: gLong): gLong {\n    return this.subtract(this.div(other).multiply(other));\n  }\n\n  /** @return {!gLong} The bitwise-NOT of this value. */\n  public not(): gLong {\n    return gLong.fromBits(~this.low_, ~this.high_);\n  }\n\n  /**\n   * Returns the bitwise-AND of this Long and the given one.\n   * @param {gLong} other The Long with which to AND.\n   * @return {!gLong} The bitwise-AND of this and the other.\n   */\n  public and(other: gLong): gLong {\n    return gLong.fromBits(this.low_ & other.low_,\n                          this.high_ & other.high_);\n  }\n\n  /**\n   * Returns the bitwise-OR of this Long and the given one.\n   * @param {gLong} other The Long with which to OR.\n   * @return {!gLong} The bitwise-OR of this and the other.\n   */\n  public or(other: gLong): gLong {\n    return gLong.fromBits(this.low_ | other.low_,\n                          this.high_ | other.high_);\n  }\n\n  /**\n   * Returns the bitwise-XOR of this Long and the given one.\n   * @param {gLong} other The Long with which to XOR.\n   * @return {!gLong} The bitwise-XOR of this and the other.\n   */\n  public xor(other: gLong): gLong {\n    return gLong.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n  }\n\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!gLong} This shifted to the left by the given amount.\n   */\n  public shiftLeft(numBits: number): gLong {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var low = this.low_;\n      if (numBits < 32) {\n        var high = this.high_;\n        return gLong.fromBits(low << numBits,\n                              (high << numBits) | (low >>> (32 - numBits)));\n      } else {\n        return gLong.fromBits(0, low << (numBits - 32));\n      }\n    }\n  }\n\n  /**\n   * Returns this Long with bits shifted to the right by the given amount.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!gLong} This shifted to the right by the given amount.\n   */\n  public shiftRight(numBits: number): gLong {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high_;\n      if (numBits < 32) {\n        var low = this.low_;\n        return gLong.fromBits(\n            (low >>> numBits) | (high << (32 - numBits)),\n            high >> numBits);\n      } else {\n        return gLong.fromBits(\n            high >> (numBits - 32),\n            high >= 0 ? 0 : -1);\n      }\n    }\n  }\n\n  /**\n   * Returns this Long with bits shifted to the right by the given amount, with\n   * the new top bits matching the current sign bit.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!gLong} This shifted to the right by the given amount, with\n   *     zeros placed into the new leading bits.\n   */\n  public shiftRightUnsigned(numBits: number): gLong {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high_;\n      if (numBits < 32) {\n        var low = this.low_;\n        return gLong.fromBits(\n            (low >>> numBits) | (high << (32 - numBits)),\n            high >>> numBits);\n      } else if (numBits == 32) {\n        return gLong.fromBits(high, 0);\n      } else {\n        return gLong.fromBits(high >>> (numBits - 32), 0);\n      }\n    }\n  }\n}\n// Export only the class.\nexport = gLong\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/gLong.ts\n **/","\"use strict\";\n\n/**\n * A class can be in one of these states at any given point in time.\n */\nexport enum ClassState {\n  // The class has yet to be loaded.\n  NOT_LOADED,\n  // The class's definition has been downloaded and parsed.\n  LOADED,\n  // This class and its super classes' definitions have been downloaded and\n  // parsed.\n  RESOLVED,\n  // This class, its super classes', and its interfaces have been downloaded,\n  // parsed, and statically initialized.\n  INITIALIZED\n}\n\n/**\n * A thread can be in one of these states at any given point in time.\n *\n * NOTE: When altering ThreadStatus, remember to update the following things.\n *\n * - Thread.validTransitions: Describes each valid thread transition.\n * - sun.misc.VM.getThreadStateValues: Maps ThreadStatus values to Thread.State\n *   values.\n * - Assertion statements in Thread regarding its status.\n */\nexport enum ThreadStatus {\n  // A thread that has not yet started is in this state.\n  NEW,\n  // A thread that is able to be run. The thread may actually be running.\n  // Query the ThreadPool to determine if this is the case.\n  RUNNABLE,\n  // A thread that is blocked waiting for a monitor lock is in this state.\n  BLOCKED,\n  // A thread that is blocked waiting for a monitor lock that was previously\n  // interrupted from waiting on a monitor is in this state.\n  // Why? Well, the thread has *already* been interrupted once, but cannot\n  // process the interruption until it regains the lock.\n  UNINTERRUPTABLY_BLOCKED,\n  // A thread that is waiting indefinitely for another thread to perform a\n  // particular action is in this state.\n  WAITING,\n  // A thread that is waiting for another thread to perform an action for up to\n  // a specified waiting time is in this state.\n  TIMED_WAITING,\n  // A thread that is waiting for an asynchronous browser operation to complete.\n  ASYNC_WAITING,\n  // A thread that is parked.\n  PARKED,\n  // A thread that has exited is in this state.\n  TERMINATED\n}\n\n/**\n * Java-visible thread state values.\n */\nexport enum JVMTIThreadState {\n  ALIVE = 0x0001,\n  TERMINATED = 0x0002,\n  RUNNABLE = 0x0004,\n  BLOCKED_ON_MONITOR_ENTER = 0x0400,\n  WAITING_INDEFINITELY = 0x0010,\n  WAITING_WITH_TIMEOUT = 0x0020\n}\n\n/**\n * Three-state boolean.\n */\nexport enum TriState {\n  TRUE,\n  FALSE,\n  INDETERMINATE\n}\n\n/**\n * The current status of the JVM.\n */\nexport enum JVMStatus {\n  // The JVM is booting up.\n  BOOTING,\n  // The JVM is booted, and waiting for a class to run.\n  BOOTED,\n  // The JVM is running.\n  RUNNING,\n  // The JVM has completed running, and is performing termination steps.\n  TERMINATING,\n  // The JVM is completely finished executing.\n  TERMINATED\n}\n\n/**\n * Indicates the type of a stack frame.\n */\nexport enum StackFrameType {\n  /**\n   * A JVM internal stack frame. These should be completely invisible to the\n   * JVM program.\n   */\n  INTERNAL,\n  /**\n   * A bytecode method's stack frame. These have an actual stack.\n   */\n  BYTECODE,\n  /**\n   * A native method's stack frame. These typically consist of just a JavaScript\n   * function and a method association.\n   */\n  NATIVE\n}\n\n/**\n * Various constant values. Enum'd so they are inlined by the TypeScript\n * compiler.\n */\nexport enum Constants {\n  INT_MAX = Math.pow(2, 31) - 1,\n  INT_MIN = -INT_MAX - 1,\n  FLOAT_POS_INFINITY = Math.pow(2, 128),\n  FLOAT_NEG_INFINITY = -1 * FLOAT_POS_INFINITY,\n  FLOAT_POS_INFINITY_AS_INT = 0x7F800000,\n  FLOAT_NEG_INFINITY_AS_INT = -8388608,\n  // We use the JavaScript NaN as our NaN value, and convert it to\n  // a NaN value in the SNaN range when an int equivalent is requested.\n  FLOAT_NaN_AS_INT = 0x7fc00000\n}\n\n/**\n * Integer indicating the type of a constant pool item.\n * @url https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4-140\n */\nexport enum ConstantPoolItemType {\n  CLASS = 7,\n  FIELDREF = 9,\n  METHODREF = 10,\n  INTERFACE_METHODREF = 11,\n  STRING = 8,\n  INTEGER = 3,\n  FLOAT = 4,\n  LONG = 5,\n  DOUBLE = 6,\n  NAME_AND_TYPE = 12,\n  UTF8 = 1,\n  METHOD_HANDLE = 15,\n  METHOD_TYPE = 16,\n  INVOKE_DYNAMIC = 18\n}\n\n/**\n * Integer indicating the type of a StackMapTable entry.\n * @see https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.4\n */\nexport enum StackMapTableEntryType {\n  SAME_FRAME,\n  SAME_LOCALS_1_STACK_ITEM_FRAME,\n  SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED,\n  CHOP_FRAME,\n  SAME_FRAME_EXTENDED,\n  APPEND_FRAME,\n  FULL_FRAME\n}\n\n/**\n * Integer indicating the reference type of a MethodHandle item in the constant\n * pool.\n * @see https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4.8\n */\nexport enum MethodHandleReferenceKind {\n  GETFIELD = 1,\n  GETSTATIC = 2,\n  PUTFIELD = 3,\n  PUTSTATIC = 4,\n  INVOKEVIRTUAL = 5,\n  INVOKESTATIC = 6,\n  INVOKESPECIAL = 7,\n  NEWINVOKESPECIAL = 8,\n  INVOKEINTERFACE = 9\n}\n\n/**\n * JVM op codes. The enum value corresponds to that opcode's value.\n */\nexport enum OpCode {\n  AALOAD = 0x32,\n  AASTORE = 0x53,\n  ACONST_NULL = 0x01,\n  ALOAD = 0x19,\n  ALOAD_0 = 0x2a,\n  ALOAD_1 = 0x2b,\n  ALOAD_2 = 0x2c,\n  ALOAD_3 = 0x2d,\n  ANEWARRAY = 0xbd,\n  ARETURN = 0xb0,\n  ARRAYLENGTH = 0xbe,\n  ASTORE = 0x3a,\n  ASTORE_0 = 0x4b,\n  ASTORE_1 = 0x4c,\n  ASTORE_2 = 0x4d,\n  ASTORE_3 = 0x4e,\n  ATHROW = 0xbf,\n  BALOAD = 0x33,\n  BASTORE = 0x54,\n  BIPUSH = 0x10,\n  BREAKPOINT = 0xca,\n  CALOAD = 0x34,\n  CASTORE = 0x55,\n  CHECKCAST = 0xc0,\n  D2F = 0x90,\n  D2I = 0x8e,\n  D2L = 0x8f,\n  DADD = 0x63,\n  DALOAD = 0x31,\n  DASTORE = 0x52,\n  DCMPG = 0x98,\n  DCMPL = 0x97,\n  DCONST_0 = 0x0e,\n  DCONST_1 = 0x0f,\n  DDIV = 0x6f,\n  DLOAD = 0x18,\n  DLOAD_0 = 0x26,\n  DLOAD_1 = 0x27,\n  DLOAD_2 = 0x28,\n  DLOAD_3 = 0x29,\n  DMUL = 0x6b,\n  DNEG = 0x77,\n  DREM = 0x73,\n  DRETURN = 0xaf,\n  DSTORE = 0x39,\n  DSTORE_0 = 0x47,\n  DSTORE_1 = 0x48,\n  DSTORE_2 = 0x49,\n  DSTORE_3 = 0x4a,\n  DSUB = 0x67,\n  DUP = 0x59,\n  DUP_X1 = 0x5a,\n  DUP_X2 = 0x5b,\n  DUP2 = 0x5c,\n  DUP2_X1 = 0x5d,\n  DUP2_X2 = 0x5e,\n  F2D = 0x8d,\n  F2I = 0x8b,\n  F2L = 0x8c,\n  FADD = 0x62,\n  FALOAD = 0x30,\n  FASTORE = 0x51,\n  FCMPG = 0x96,\n  FCMPL = 0x95,\n  FCONST_0 = 0x0b,\n  FCONST_1 = 0x0c,\n  FCONST_2 = 0x0d,\n  FDIV = 0x6e,\n  FLOAD = 0x17,\n  FLOAD_0 = 0x22,\n  FLOAD_1 = 0x23,\n  FLOAD_2 = 0x24,\n  FLOAD_3 = 0x25,\n  FMUL = 0x6a,\n  FNEG = 0x76,\n  FREM = 0x72,\n  FRETURN = 0xae,\n  FSTORE = 0x38,\n  FSTORE_0 = 0x43,\n  FSTORE_1 = 0x44,\n  FSTORE_2 = 0x45,\n  FSTORE_3 = 0x46,\n  FSUB = 0x66,\n  GETFIELD = 0xb4,\n  GETSTATIC = 0xb2,\n  GOTO = 0xa7,\n  GOTO_W = 0xc8,\n  I2B = 0x91,\n  I2C = 0x92,\n  I2D = 0x87,\n  I2F = 0x86,\n  I2L = 0x85,\n  I2S = 0x93,\n  IADD  = 0x60,\n  IALOAD = 0x2e,\n  IAND = 0x7e,\n  IASTORE = 0x4f,\n  ICONST_M1 = 0x2,\n  ICONST_0 = 3,\n  ICONST_1 = 4,\n  ICONST_2 = 5,\n  ICONST_3 = 6,\n  ICONST_4 = 7,\n  ICONST_5 = 8,\n  IDIV  = 0x6c,\n  IF_ACMPEQ = 0xa5,\n  IF_ACMPNE = 0xa6,\n  IF_ICMPEQ = 0x9f,\n  IF_ICMPGE = 0xa2,\n  IF_ICMPGT = 0xa3,\n  IF_ICMPLE = 0xa4,\n  IF_ICMPLT = 0xa1,\n  IF_ICMPNE = 0xa0,\n  IFEQ  = 0x99,\n  IFGE  = 0x9c,\n  IFGT  = 0x9d,\n  IFLE  = 0x9e,\n  IFLT  = 0x9b,\n  IFNE  = 0x9a,\n  IFNONNULL = 0xc7,\n  IFNULL = 0xc6,\n  IINC  = 0x84,\n  ILOAD = 0x15,\n  ILOAD_0 = 0x1a,\n  ILOAD_1 = 0x1b,\n  ILOAD_2 = 0x1c,\n  ILOAD_3 = 0x1d,\n  // IMPDEP1 = 0xfe,\n  // IMPDEP2 = 0xff,\n  IMUL  = 0x68,\n  INEG  = 0x74,\n  INSTANCEOF = 0xc1,\n  INVOKEDYNAMIC = 0xba,\n  INVOKEINTERFACE = 0xb9,\n  INVOKESPECIAL = 0xb7,\n  INVOKESTATIC = 0xb8,\n  INVOKEVIRTUAL = 0xb6,\n  IOR   = 0x80,\n  IREM  = 0x70,\n  IRETURN = 0xac,\n  ISHL  = 0x78,\n  ISHR  = 0x7a,\n  ISTORE = 0x36,\n  ISTORE_0 = 0x3b,\n  ISTORE_1 = 0x3c,\n  ISTORE_2 = 0x3d,\n  ISTORE_3 = 0x3e,\n  ISUB = 0x64,\n  IUSHR = 0x7c,\n  IXOR = 0x82,\n  JSR = 0xa8,\n  JSR_W = 0xc9,\n  L2D = 0x8a,\n  L2F = 0x89,\n  L2I = 0x88,\n  LADD = 0x61,\n  LALOAD = 0x2f,\n  LAND = 0x7f,\n  LASTORE = 0x50,\n  LCMP = 0x94,\n  LCONST_0 = 0x09,\n  LCONST_1 = 0x0a,\n  LDC = 0x12,\n  LDC_W = 0x13,\n  LDC2_W = 0x14,\n  LDIV = 0x6d,\n  LLOAD = 0x16,\n  LLOAD_0 = 0x1e,\n  LLOAD_1 = 0x1f,\n  LLOAD_2 = 0x20,\n  LLOAD_3 = 0x21,\n  LMUL = 0x69,\n  LNEG = 0x75,\n  LOOKUPSWITCH = 0xab,\n  LOR = 0x81,\n  LREM = 0x71,\n  LRETURN = 0xad,\n  LSHL = 0x79,\n  LSHR = 0x7b,\n  LSTORE = 0x37,\n  LSTORE_0 = 0x3f,\n  LSTORE_1 = 0x40,\n  LSTORE_2 = 0x41,\n  LSTORE_3 = 0x42,\n  LSUB = 0x65,\n  LUSHR = 0x7d,\n  LXOR = 0x83,\n  MONITORENTER = 0xc2,\n  MONITOREXIT = 0xc3,\n  MULTIANEWARRAY = 0xc5,\n  NEW = 0xbb,\n  NEWARRAY = 0xbc,\n  NOP = 0x00,\n  POP = 0x57,\n  POP2 = 0x58,\n  PUTFIELD = 0xb5,\n  PUTSTATIC = 0xb3,\n  RET = 0xa9,\n  RETURN = 0xb1,\n  SALOAD = 0x35,\n  SASTORE = 0x56,\n  SIPUSH = 0x11,\n  SWAP = 0x5f,\n  TABLESWITCH = 0xaa,\n  WIDE = 0xc4,\n\n  // Special Doppio 'fast' opcodes\n  GETSTATIC_FAST32 = 0xd0,\n  GETSTATIC_FAST64 = 0xd1,\n  NEW_FAST = 0xd2,\n  ANEWARRAY_FAST = 0xd5,\n  CHECKCAST_FAST = 0xd6,\n  INSTANCEOF_FAST = 0xd7,\n  MULTIANEWARRAY_FAST = 0xd8,\n  PUTSTATIC_FAST32 = 0xd9,\n  PUTSTATIC_FAST64 = 0xda,\n  GETFIELD_FAST32 = 0xdb,\n  GETFIELD_FAST64 = 0xdc,\n  PUTFIELD_FAST32 = 0xdd,\n  PUTFIELD_FAST64 = 0xde,\n  INVOKENONVIRTUAL_FAST = 0xdf,\n  INVOKESTATIC_FAST = 0xf0,\n  INVOKEVIRTUAL_FAST = 0xf1,\n  INVOKEINTERFACE_FAST = 0xf2,\n  INVOKEHANDLE = 0xf3,\n  INVOKEBASIC = 0xf4,\n  LINKTOSPECIAL = 0xf5,\n  LINKTOVIRTUAL = 0xf7,\n  INVOKEDYNAMIC_FAST = 0xf8\n}\n\nexport enum OpcodeLayoutType {\n  OPCODE_ONLY,\n  CONSTANT_POOL_UINT8,\n  CONSTANT_POOL,\n  CONSTANT_POOL_AND_UINT8_VALUE,\n  UINT8_VALUE,\n  UINT8_AND_INT8_VALUE,\n  INT8_VALUE,\n  INT16_VALUE,\n  INT32_VALUE,\n  // LOOKUPSWITCH,\n  // TABLESWITCH,\n  ARRAY_TYPE,\n  WIDE\n}\n\n// Contains the opcode layout types for each valid opcode.\n// To conserve code space, it's assumed all opcodes not in the table\n// are OPCODE_ONLY.\nvar olt: OpcodeLayoutType[] = new Array(0xff);\n(() => {\n  for (var i = 0; i < 0xff; i++) {\n    olt[i] = OpcodeLayoutType.OPCODE_ONLY;\n  }\n})();\nfunction assignOpcodeLayout(layoutType: OpcodeLayoutType, opcodes: OpCode[]): void {\n  opcodes.forEach((opcode) => {\n    olt[opcode] = layoutType;\n  });\n}\n\nassignOpcodeLayout(OpcodeLayoutType.UINT8_VALUE,\n  [OpCode.ALOAD, OpCode.ASTORE, OpCode.DLOAD, OpCode.DSTORE,\n   OpCode.FLOAD, OpCode.FSTORE, OpCode.ILOAD, OpCode.ISTORE,\n   OpCode.LLOAD, OpCode.LSTORE, OpCode.RET]);\nassignOpcodeLayout(OpcodeLayoutType.CONSTANT_POOL_UINT8, [OpCode.LDC]);\nassignOpcodeLayout(OpcodeLayoutType.CONSTANT_POOL,\n  [OpCode.LDC_W, OpCode.LDC2_W,\n   OpCode.ANEWARRAY, OpCode.CHECKCAST, OpCode.GETFIELD,\n   OpCode.GETSTATIC, OpCode.INSTANCEOF, OpCode.INVOKEDYNAMIC,\n   OpCode.INVOKESPECIAL, OpCode.INVOKESTATIC, OpCode.INVOKEVIRTUAL,\n   OpCode.NEW, OpCode.PUTFIELD, OpCode.PUTSTATIC, OpCode.MULTIANEWARRAY_FAST,\n   OpCode.INVOKENONVIRTUAL_FAST, OpCode.INVOKESTATIC_FAST, OpCode.CHECKCAST_FAST,\n   OpCode.NEW_FAST,\n   OpCode.ANEWARRAY_FAST, OpCode.INSTANCEOF_FAST, OpCode.GETSTATIC_FAST32,\n   OpCode.GETSTATIC_FAST64, OpCode.PUTSTATIC_FAST32, OpCode.PUTSTATIC_FAST64,\n   OpCode.PUTFIELD_FAST32, OpCode.PUTFIELD_FAST64,\n   OpCode.GETFIELD_FAST32, OpCode.GETFIELD_FAST64, OpCode.INVOKEVIRTUAL_FAST\n]);\nassignOpcodeLayout(OpcodeLayoutType.CONSTANT_POOL_AND_UINT8_VALUE,\n  [OpCode.INVOKEINTERFACE, OpCode.INVOKEINTERFACE_FAST, OpCode.MULTIANEWARRAY]);\nassignOpcodeLayout(OpcodeLayoutType.INT8_VALUE, [OpCode.BIPUSH]);\nassignOpcodeLayout(OpcodeLayoutType.INT16_VALUE,\n  [OpCode.SIPUSH, OpCode.GOTO, OpCode.IFGT, OpCode.IFEQ, OpCode.IFGE, OpCode.IFLE,\n   OpCode.IFLT, OpCode.IFNE, OpCode.IFNULL, OpCode.IFNONNULL, OpCode.IF_ICMPLE,\n   OpCode.IF_ACMPEQ, OpCode.IF_ACMPNE, OpCode.IF_ICMPEQ, OpCode.IF_ICMPGE,\n   OpCode.IF_ICMPGT, OpCode.IF_ICMPLT, OpCode.IF_ICMPNE, OpCode.JSR]);\nassignOpcodeLayout(OpcodeLayoutType.INT32_VALUE, [OpCode.GOTO_W, OpCode.JSR_W]);\nassignOpcodeLayout(OpcodeLayoutType.UINT8_AND_INT8_VALUE, [OpCode.IINC]);\nassignOpcodeLayout(OpcodeLayoutType.ARRAY_TYPE, [OpCode.NEWARRAY]);\n\nexport var OpcodeLayouts = olt;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/enums.ts\n **/","﻿/**\n * A safe to use key value map.\n * \n * JavaScript objects cannot be used as general-purpose key value maps, as they\n * contain a number of default fields. This class avoids those issues.\n */\nclass SafeMap<T> {\n  private cache: { [key: string]: T };\n\n  constructor() {\n    this.cache = Object.create(null);  // has no defined properties aside from __proto__\n  }\n\n  /**\n   * Mutates the key so that it cannot possibly conflict with existing object\n   * properties.\n   */\n  private fixKey(key: string): string {\n    return ';' + key;\n  }\n\n  public get(key: string): T {\n    key = this.fixKey(key);\n    if (this.cache[key] !== undefined) {\n      return this.cache[key];\n    }\n    return undefined;\n  }\n\n  public has(key: string): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  public set(key: string, value: T): void {\n    this.cache[this.fixKey(key)] = value;\n  }\n}\n\nexport = SafeMap;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/SafeMap.ts\n **/","\"use strict\";\nimport util = require('./util');\nimport ByteStream = require('./ByteStream');\nimport attributes = require('./attributes');\nimport JVM = require('./jvm');\nimport ConstantPool = require('./ConstantPool');\nimport ClassData = require('./ClassData');\nimport threading = require('./threading');\nimport gLong = require('./gLong');\nimport ClassLoader = require('./ClassLoader');\nimport assert = require('./assert');\nimport enums = require('./enums');\nimport Monitor = require('./Monitor');\nimport StringOutputStream = require('./StringOutputStream');\nimport JVMTypes = require('../includes/JVMTypes');\nimport global = require('./global');\nimport {JitInfo, opJitInfo} from './jit';\n\ndeclare var RELEASE: boolean;\nif (typeof RELEASE === 'undefined') global.RELEASE = false;\n\nvar trapped_methods: { [clsName: string]: { [methodName: string]: Function } } = {\n  'java/lang/ref/Reference': {\n    // NOP, because we don't do our own GC and also this starts a thread?!?!?!\n    '<clinit>()V': function (thread: threading.JVMThread): void { }\n  },\n  'java/lang/System': {\n    'loadLibrary(Ljava/lang/String;)V': function (thread: threading.JVMThread, libName: JVMTypes.java_lang_String): void {\n      // Some libraries test if native libraries are available,\n      // and expect an exception if they are not.\n      // List all of the native libraries we support.\n      var lib = libName.toString();\n      switch (lib) {\n        case 'zip':\n        case 'net':\n        case 'nio':\n        case 'awt':\n        case 'fontmanager':\n        case 'management':\n          return;\n        default:\n          thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', `no ${lib} in java.library.path`);\n          break;\n      }\n    }\n  },\n  'java/lang/Terminator': {\n    'setup()V': function (thread: threading.JVMThread): void {\n      // XXX: We should probably fix this; we support threads now.\n      // Historically: NOP'd because we didn't support threads.\n    }\n  },\n  'java/nio/charset/Charset$3': {\n    // this is trapped and NOP'ed for speed\n    'run()Ljava/lang/Object;': function (thread: threading.JVMThread, javaThis: JVMTypes.java_nio_charset_Charset$3): JVMTypes.java_lang_Object {\n      return null;\n    }\n  },\n  'sun/nio/fs/DefaultFileSystemProvider': {\n    // OpenJDK doesn't know what the \"Doppio\" platform is. Tell it to use the Linux file system.\n    'create()Ljava/nio/file/spi/FileSystemProvider;': function(thread: threading.JVMThread): void {\n      thread.setStatus(enums.ThreadStatus.ASYNC_WAITING);\n      var dfsp: ClassData.ReferenceClassData<JVMTypes.sun_nio_fs_DefaultFileSystemProvider> = <any> thread.getBsCl().getInitializedClass(thread, 'Lsun/nio/fs/DefaultFileSystemProvider;'),\n       dfspCls: typeof JVMTypes.sun_nio_fs_DefaultFileSystemProvider = <any> dfsp.getConstructor(thread);\n      dfspCls['createProvider(Ljava/lang/String;)Ljava/nio/file/spi/FileSystemProvider;'](thread, [thread.getJVM().internString('sun.nio.fs.LinuxFileSystemProvider')], util.forwardResult(thread));\n    }\n  }\n};\n\nfunction getTrappedMethod(clsName: string, methSig: string): Function {\n  clsName = util.descriptor2typestr(clsName);\n  if (trapped_methods.hasOwnProperty(clsName) && trapped_methods[clsName].hasOwnProperty(methSig)) {\n    return trapped_methods[clsName][methSig];\n  }\n  return null;\n}\n\n/**\n * Shared functionality between Method and Field objects, as they are\n * represented similarly in class files.\n */\nexport class AbstractMethodField {\n  /**\n   * The declaring class of this method or field.\n   */\n  public cls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>;\n  /**\n   * The method / field's index in its defining class's method/field array.\n   */\n  public slot: number;\n  /**\n   * The method / field's flags (e.g. static).\n   */\n  public accessFlags: util.Flags;\n  /**\n   * The name of the field, without the descriptor or owning class.\n   */\n  public name: string;\n  /**\n   * The method/field's type descriptor.\n   * e.g.:\n   * public String foo; => Ljava/lang/String;\n   * public void foo(String bar); => (Ljava/lang/String;)V\n   */\n  public rawDescriptor: string;\n  /**\n   * Any attributes on this method or field.\n   */\n  public attrs: attributes.IAttribute[];\n\n  /**\n   * Constructs a field or method object from raw class data.\n   */\n  constructor(cls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, constantPool: ConstantPool.ConstantPool, slot: number, byteStream: ByteStream) {\n    this.cls = cls;\n    this.slot = slot;\n    this.accessFlags = new util.Flags(byteStream.getUint16());\n    this.name = (<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16())).value;\n    this.rawDescriptor = (<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16())).value;\n    this.attrs = attributes.makeAttributes(byteStream, constantPool);\n  }\n\n  public getAttribute(name: string): attributes.IAttribute {\n    for (var i = 0; i < this.attrs.length; i++) {\n      var attr = this.attrs[i];\n      if (attr.getName() === name) {\n        return attr;\n      }\n    }\n    return null;\n  }\n\n  public getAttributes(name: string): attributes.IAttribute[] {\n    return this.attrs.filter((attr) => attr.getName() === name);\n  }\n\n  /**\n   * Get the particular type of annotation as a JVM byte array. Returns null\n   * if the annotation does not exist.\n   */\n  protected getAnnotationType(thread: threading.JVMThread, name: string): JVMTypes.JVMArray<number> {\n    var annotation = <{ rawBytes: Buffer }> <any> this.getAttribute(name);\n    if (annotation === null) {\n      return null;\n    }\n    var byteArrCons = (<ClassData.ArrayClassData<number>> thread.getBsCl().getInitializedClass(thread, '[B')).getConstructor(thread),\n      rv = new byteArrCons(thread, 0);\n\n    // TODO: Convert to typed array.\n    var i: number, len = annotation.rawBytes.length, arr = new Array(len);\n    for (i = 0; i < len; i++) {\n      arr[i] = annotation.rawBytes.readInt8(i);\n    }\n    rv.array = arr;\n    return rv;\n  }\n\n  // To satiate TypeScript. Consider it an 'abstract' method.\n  public parseDescriptor(raw_descriptor: string): void {\n    throw new Error(\"Unimplemented error.\");\n  }\n}\n\nexport class Field extends AbstractMethodField {\n  /**\n   * The field's full name, which includes the defining class\n   * (e.g. java/lang/String/value).\n   */\n  public fullName: string;\n\n  constructor(cls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, constantPool: ConstantPool.ConstantPool, slot: number, byteStream: ByteStream) {\n    super(cls, constantPool, slot, byteStream);\n    this.fullName = `${util.descriptor2typestr(cls.getInternalName())}/${this.name}`;\n  }\n\n  /**\n   * Calls cb with the reflectedField if it succeeds. Calls cb with null if it\n   * fails.\n   */\n  public reflector(thread: threading.JVMThread, cb: (reflectedField: JVMTypes.java_lang_reflect_Field) => void): void {\n    var signatureAttr = <attributes.Signature> this.getAttribute(\"Signature\"),\n      jvm = thread.getJVM(),\n      bsCl = thread.getBsCl();\n    var createObj = (typeObj: JVMTypes.java_lang_Class): JVMTypes.java_lang_reflect_Field => {\n      var fieldCls = <ClassData.ReferenceClassData<JVMTypes.java_lang_reflect_Field>> bsCl.getInitializedClass(thread, 'Ljava/lang/reflect/Field;'),\n        fieldObj = new (fieldCls.getConstructor(thread))(thread);\n\n      fieldObj['java/lang/reflect/Field/clazz'] = this.cls.getClassObject(thread);\n      fieldObj['java/lang/reflect/Field/name'] = jvm.internString(this.name);\n      fieldObj['java/lang/reflect/Field/type'] = typeObj;\n      fieldObj['java/lang/reflect/Field/modifiers'] = this.accessFlags.getRawByte();\n      fieldObj['java/lang/reflect/Field/slot'] = this.slot;\n      fieldObj['java/lang/reflect/Field/signature'] = signatureAttr !== null ? util.initString(bsCl, signatureAttr.sig) : null;\n      fieldObj['java/lang/reflect/Field/annotations'] = this.getAnnotationType(thread, 'RuntimeVisibleAnnotations');\n\n      return fieldObj;\n    };\n    // Our field's type may not be loaded, so we asynchronously load it here.\n    // In the future, we can speed up reflection by having a synchronous_reflector\n    // method that we can try first, and which may fail.\n    this.cls.getLoader().resolveClass(thread, this.rawDescriptor, (cdata: ClassData.ClassData) => {\n      if (cdata != null) {\n        cb(createObj(cdata.getClassObject(thread)));\n      } else {\n        cb(null);\n      }\n    });\n  }\n\n  private getDefaultFieldValue(): string {\n    var desc = this.rawDescriptor;\n    if (desc === 'J') return 'gLongZero';\n    var c = desc[0];\n    if (c === '[' || c === 'L') return 'null';\n    return '0';\n  }\n\n  /**\n   * Outputs a JavaScript field assignment for this field.\n   */\n  public outputJavaScriptField(jsConsName: string, outputStream: StringOutputStream): void {\n    if (this.accessFlags.isStatic()) {\n      outputStream.write(`${jsConsName}[\"${util.reescapeJVMName(this.fullName)}\"] = cls._getInitialStaticFieldValue(thread, \"${util.reescapeJVMName(this.name)}\");\\n`);\n    } else {\n      outputStream.write(`this[\"${util.reescapeJVMName(this.fullName)}\"] = ${this.getDefaultFieldValue()};\\n`);\n    }\n  }\n}\n\nconst opcodeSize: number[] = function() {\n  const table:number[] = [];\n  const layoutType = enums.OpcodeLayoutType;\n\n  table[layoutType.OPCODE_ONLY] = 1;\n  table[layoutType.CONSTANT_POOL_UINT8] = 2;\n  table[layoutType.CONSTANT_POOL] = 3;\n  table[layoutType.CONSTANT_POOL_AND_UINT8_VALUE] = 4;\n  table[layoutType.UINT8_VALUE] = 2;\n  table[layoutType.UINT8_AND_INT8_VALUE] = 3;\n  table[layoutType.INT8_VALUE] = 2;\n  table[layoutType.INT16_VALUE] = 3;\n  table[layoutType.INT32_VALUE] = 5;\n  table[layoutType.ARRAY_TYPE] = 2;\n  table[layoutType.WIDE] = 1;\n\n  return table;\n}();\n\nclass TraceInfo {\n  pops: string[] = [];\n  pushes: string[] = [];\n  prefixEmit: string = \"\";\n  onErrorPushes: string[];\n\n  constructor(public pc: number, public jitInfo: JitInfo) {\n  }\n}\n\nclass Trace {\n  private infos: TraceInfo[] = [];\n  private endPc: number = -1;\n\n  constructor(public startPC: number, private code: Buffer, private method: Method) {\n  }\n\n  /**\n   * Emits a PC update statement at the end of the trace.\n   */\n  public emitEndPC(pc: number): void {\n    this.endPc = pc;\n  }\n\n  public addOp(pc: number, jitInfo: JitInfo) {\n    this.infos.push(new TraceInfo(pc, jitInfo));\n  }\n\n  public close(thread: threading.JVMThread): Function {\n    if (this.infos.length > 1) {\n      const symbolicStack: string[] = [];\n      let symbolCount = 0;\n      // Ensure that the last statement sets the PC if the\n      // last opcode doesn't.\n      let emitted = this.endPc > -1 ? `f.pc=${this.endPc};` : \"\";\n      for (let i = 0; i < this.infos.length; i++) {\n        const info = this.infos[i];\n        const jitInfo = info.jitInfo;\n\n        const pops = info.pops;\n        const normalizedPops = jitInfo.pops < 0 ? Math.min(-jitInfo.pops, symbolicStack.length) : jitInfo.pops;\n        for (let j = 0; j < normalizedPops; j++) {\n          if (symbolicStack.length > 0) {\n            pops.push(symbolicStack.pop());\n          } else {\n            const symbol = \"s\" + symbolCount++;\n            info.prefixEmit += `var ${symbol} = f.opStack.pop();`;\n            pops.push(symbol);\n          }\n        }\n\n        info.onErrorPushes = symbolicStack.slice();\n\n        const pushes = info.pushes;\n        for (let j = 0; j < jitInfo.pushes; j++) {\n          const symbol = \"s\" + symbolCount++;\n          symbolicStack.push(symbol);\n          pushes.push(symbol);\n        }\n\n      }\n\n      if (symbolicStack.length === 1) {\n        emitted += `f.opStack.push(${symbolicStack[0]});`;\n      } else if (symbolicStack.length > 1) {\n        emitted += `f.opStack.pushAll(${symbolicStack.join(',')});`;\n      }\n\n      for (let i = this.infos.length-1; i >= 0; i--) {\n        const info = this.infos[i];\n        const jitInfo = info.jitInfo;\n        emitted = info.prefixEmit + jitInfo.emit(info.pops, info.pushes, \"\"+i, emitted, this.code, info.pc, info.onErrorPushes, this.method);\n      }\n\n      if (!RELEASE && thread.getJVM().shouldPrintJITCompilation()) {\n        console.log(`Emitted trace of ${this.infos.length} ops: ` + emitted);\n      }\n      // f = frame, t = thread, u = util\n      return new Function(\"f\", \"t\", \"u\", emitted);\n    } else {\n      if (!RELEASE && thread.getJVM().shouldPrintJITCompilation()) {\n        console.log(`Trace was cancelled`);\n      }\n      return null;\n    }\n  }\n}\n\nexport class Method extends AbstractMethodField {\n  /**\n   * The method's parameters, if any, in descriptor form.\n   */\n  public parameterTypes: string[];\n  /**\n   * The method's return type in descriptor form.\n   */\n  public returnType: string;\n  /**\n   * The method's signature, e.g. bar()V\n   */\n  public signature: string;\n  /**\n   * The method's signature, including defining class; e.g. java/lang/String/bar()V\n   */\n  public fullSignature: string;\n  /**\n   * The number of JVM words required to store the parameters (e.g. longs/doubles take up 2 words).\n   * Does not include the \"this\" argument to non-static functions.\n   */\n  private parameterWords: number;\n  /**\n   * Code is either a function, or a CodeAttribute.\n   * TODO: Differentiate between NativeMethod objects and BytecodeMethod objects.\n   */\n  private code: any;\n\n  /**\n   * number of basic block entries\n   */\n  private numBBEntries = 0;\n\n  private compiledFunctions: Function[] = [];\n  private failedCompile: boolean[] = [];\n\n  constructor(cls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, constantPool: ConstantPool.ConstantPool, slot: number, byteStream: ByteStream) {\n    super(cls, constantPool, slot, byteStream);\n    var parsedDescriptor = util.getTypes(this.rawDescriptor), i: number,\n      p: string;\n    this.signature = this.name + this.rawDescriptor;\n    this.fullSignature = `${util.descriptor2typestr(this.cls.getInternalName())}/${this.signature}`;\n    this.returnType = parsedDescriptor.pop();\n    this.parameterTypes = parsedDescriptor;\n    this.parameterWords = parsedDescriptor.length;\n\n    // Double count doubles / longs.\n    for (i = 0; i < this.parameterTypes.length; i++) {\n      p = this.parameterTypes[i];\n      if (p === 'D' || p === 'J') {\n        this.parameterWords++;\n      }\n    }\n\n    // Initialize 'code' property.\n    var clsName = this.cls.getInternalName();\n    if (getTrappedMethod(clsName, this.signature) !== null) {\n      this.code = getTrappedMethod(clsName, this.signature);\n      this.accessFlags.setNative(true);\n    } else if (this.accessFlags.isNative()) {\n      if (this.signature.indexOf('registerNatives()V', 0) < 0 && this.signature.indexOf('initIDs()V', 0) < 0) {\n        // The first version of the native method attempts to fetch itself and\n        // rewrite itself.\n        var self = this;\n        this.code = function(thread: threading.JVMThread) {\n          // Try to fetch the native method.\n          var jvm = thread.getJVM(),\n            c = jvm.getNative(clsName, self.signature);\n          if (c == null) {\n            thread.throwNewException('Ljava/lang/UnsatisfiedLinkError;', `Native method '${self.getFullSignature()}' not implemented.\\nPlease fix or file a bug at https://github.com/plasma-umass/doppio/issues`);\n          } else {\n            self.code = c;\n            return c.apply(self, arguments);\n          }\n        };\n      } else {\n        // Stub out initIDs and registerNatives.\n        this.code = () => { };\n      }\n    } else if (!this.accessFlags.isAbstract()) {\n      this.code = this.getAttribute('Code');\n      const codeLength = this.code.code.length;\n\n      // jit threshold. we countdown to zero from here.\n      this.numBBEntries = codeLength > 3 ? 200 : 1000 * codeLength;\n    }\n  }\n\n  public incrBBEntries() {\n    // Optimisiation: we countdown to zero, instead of storing a positive limit in a separate variable\n    this.numBBEntries--;\n  }\n\n  /**\n   * Checks if the method is a default method.\n   * A default method is a public non-abstract instance method, that\n   * is, a non-static method with a body, declared in an interface\n   * type.\n   */\n  public isDefault(): boolean {\n    return (this.accessFlags.isPublic() && !this.accessFlags.isAbstract() && !this.accessFlags.isStatic() && this.cls.accessFlags.isInterface());\n  }\n\n  public getFullSignature(): string {\n    return `${this.cls.getExternalName()}.${this.name}${this.rawDescriptor}`;\n  }\n\n  /**\n   * Checks if this particular method should be hidden in stack frames.\n   * Used by OpenJDK's lambda implementation to hide lambda boilerplate.\n   */\n  public isHidden(): boolean {\n    var rva: attributes.RuntimeVisibleAnnotations = <any> this.getAttribute('RuntimeVisibleAnnotations');\n    return rva !== null && rva.isHidden;\n  }\n\n  /**\n   * Checks if this particular method has the CallerSensitive annotation.\n   */\n  public isCallerSensitive(): boolean {\n    var rva: attributes.RuntimeVisibleAnnotations = <any> this.getAttribute('RuntimeVisibleAnnotations');\n    return rva !== null && rva.isCallerSensitive;\n  }\n\n  /**\n   * Get the number of machine words (32-bit words) required to store the\n   * parameters to this function. Includes adding in a machine word for 'this'\n   * for non-static functions.\n   */\n  public getParamWordSize(): number {\n    return this.parameterWords;\n  }\n\n  public getCodeAttribute(): attributes.Code {\n    assert(!this.accessFlags.isNative() && !this.accessFlags.isAbstract());\n    return this.code;\n  }\n\n  public getOp(pc: number, codeBuffer: Buffer, thread: threading.JVMThread): any {\n    if (this.numBBEntries <= 0) {\n      if (!this.failedCompile[pc]) {\n        const cachedCompiledFunction = this.compiledFunctions[pc];\n        if (!cachedCompiledFunction) {\n          const compiledFunction = this.jitCompileFrom(pc, thread);\n          if (compiledFunction) {\n            return compiledFunction;\n          } else {\n            this.failedCompile[pc] = true;\n          }\n        } else {\n          return cachedCompiledFunction;\n        }\n      }\n    }\n    return codeBuffer.readUInt8(pc);\n  }\n\n  private makeInvokeStaticJitInfo(code: Buffer, pc: number) : JitInfo {\n    const index = code.readUInt16BE(pc + 1);\n    const methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> this.cls.constantPool.get(index);\n    const paramSize = methodReference.paramWordSize;\n    const method = methodReference.jsConstructor[methodReference.fullSignature];\n\n    return {hasBranch: true, pops: -paramSize, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n      const argInitialiser = paramSize > pops.length ? `f.opStack.sliceAndDropFromTop(${paramSize - pops.length});` : `[${pops.reduce((a,b) => b + ',' + a, '')}];`;\n      let argMaker = `var args${suffix}=` + argInitialiser;\n      if ((paramSize > pops.length) && (pops.length > 0)) {\n        argMaker += `args${suffix}.push(${pops.slice().reverse().join(',')});`;\n      }\n      return argMaker + `\nvar methodReference${suffix}=f.method.cls.constantPool.get(${index});\nf.pc=${pc};\nmethodReference${suffix}.jsConstructor[methodReference${suffix}.fullSignature](t,args${suffix});\nf.returnToThreadLoop=true;\n${onSuccess}`;\n    }};\n\n  }\n\n  private makeInvokeVirtualJitInfo(code: Buffer, pc: number) : JitInfo {\n    const index = code.readUInt16BE(pc + 1);\n    const methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> this.cls.constantPool.get(index);\n    const paramSize = methodReference.paramWordSize;\n    return {hasBranch: true, pops: -(paramSize + 1), pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n      const onError = makeOnError(onErrorPushes);\n      const argInitialiser = paramSize > pops.length ? `f.opStack.sliceAndDropFromTop(${paramSize - pops.length});` : `[${pops.slice(0, paramSize).reduce((a,b) => b + ',' + a, '')}];`;\n      let argMaker = `var args${suffix}=` + argInitialiser;\n      if ((paramSize > pops.length) && (pops.length > 0)) {\n        argMaker += `args${suffix}.push(${pops.slice().reverse().join(',')});`;\n      }\n      return argMaker + `var obj${suffix}=${(paramSize+1)===pops.length?pops[paramSize]:\"f.opStack.pop()\"};f.pc=${pc};\nif(!u.isNull(t,f,obj${suffix})){obj${suffix}['${methodReference.signature}'](t,args${suffix});f.returnToThreadLoop=true;${onSuccess}}else{${onError}}`;\n    }};\n\n  }\n\n  private makeInvokeNonVirtualJitInfo(code: Buffer, pc: number) : JitInfo {\n    const index = code.readUInt16BE(pc + 1);\n    const methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> this.cls.constantPool.get(index);\n    const paramSize = methodReference.paramWordSize;\n    return {hasBranch: true, pops: -(paramSize + 1), pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n      const onError = makeOnError(onErrorPushes);\n      const argInitialiser = paramSize > pops.length ? `f.opStack.sliceAndDropFromTop(${paramSize - pops.length});` : `[${pops.slice(0, paramSize).reduce((a,b) => b + ',' + a, '')}];`;\n      let argMaker = `var args${suffix}=` + argInitialiser;\n      if ((paramSize > pops.length) && (pops.length > 0)) {\n        argMaker += `args${suffix}.push(${pops.slice().reverse().join(',')});`;\n      }\n      return argMaker + `var obj${suffix}=${(paramSize+1)===pops.length?pops[paramSize]:\"f.opStack.pop()\"};f.pc=${pc};\nif(!u.isNull(t,f,obj${suffix})){obj${suffix}['${methodReference.fullSignature}'](t, args${suffix});f.returnToThreadLoop=true;${onSuccess}}else{${onError}}`;\n    }};\n  }\n\n  private jitCompileFrom(startPC: number, thread: threading.JVMThread) {\n    if (!RELEASE && thread.getJVM().shouldPrintJITCompilation()) {\n      console.log(`Planning to JIT: ${this.fullSignature} from ${startPC}`);\n    }\n    const code = this.getCodeAttribute().getCode();\n    let trace: Trace = null;\n    const _this = this;\n    let done = false;\n\n    function closeCurrentTrace() {\n      if (trace !== null) {\n        // console.log(\"Tracing method: \" + _this.fullSignature);\n        const compiledFunction = trace.close(thread);\n        if (compiledFunction) {\n          _this.compiledFunctions[trace.startPC] = compiledFunction;\n        }\n        trace = null;\n      }\n      done = true;\n    }\n\n    for (let i = startPC; i < code.length && !done;) {\n      const op = code.readUInt8(i);\n      // TODO: handle wide()\n      if (!RELEASE && thread.getJVM().shouldPrintJITCompilation()) {\n        console.log(`${i}: ${threading.annotateOpcode(op, this, code, i)}`);\n      }\n      const jitInfo = opJitInfo[op];\n      if (jitInfo) {\n        if (trace === null) {\n          trace = new Trace(i, code, _this);\n        }\n        trace.addOp(i, jitInfo);\n        if (jitInfo.hasBranch) {\n          this.failedCompile[i] = true;\n          closeCurrentTrace();\n        }\n      } else if (op === enums.OpCode.INVOKESTATIC_FAST && trace !== null) {\n        const invokeJitInfo: JitInfo = this.makeInvokeStaticJitInfo(code, i);\n        trace.addOp(i, invokeJitInfo);\n\n        this.failedCompile[i] = true;\n        closeCurrentTrace();\n\n      } else if (((op === enums.OpCode.INVOKEVIRTUAL_FAST) || (op === enums.OpCode.INVOKEINTERFACE_FAST)) && trace !== null) {\n        const invokeJitInfo: JitInfo = this.makeInvokeVirtualJitInfo(code, i);\n        trace.addOp(i, invokeJitInfo);\n\n        this.failedCompile[i] = true;\n        closeCurrentTrace();\n      } else if ((op === enums.OpCode.INVOKENONVIRTUAL_FAST) && trace !== null) {\n        const invokeJitInfo: JitInfo = this.makeInvokeNonVirtualJitInfo(code, i);\n        trace.addOp(i, invokeJitInfo);\n\n        this.failedCompile[i] = true;\n        closeCurrentTrace();\n      } else {\n        if (!RELEASE) {\n          if (trace !== null) {\n            statTraceCloser[op]++;\n          }\n        }\n        this.failedCompile[i] = true;\n        if (trace) {\n          trace.emitEndPC(i);\n        }\n        closeCurrentTrace();\n      }\n      i += opcodeSize[enums.OpcodeLayouts[op]];\n    }\n\n    return _this.compiledFunctions[startPC];\n  }\n\n  public getNativeFunction(): Function {\n    assert(this.accessFlags.isNative() && typeof (this.code) === 'function');\n    return this.code;\n  }\n\n  /**\n   * Resolves all of the classes referenced through this method. Required in\n   * order to create its reflection object.\n   */\n  private _resolveReferencedClasses(thread: threading.JVMThread, cb: (classes: {[ className: string ]: ClassData.ClassData}) => void): void {\n    // Start with the return type + parameter types + reflection object types.\n    var toResolve: string[] = this.parameterTypes.concat(this.returnType),\n      code: attributes.Code = this.code,\n      exceptionAttribute = <attributes.Exceptions> this.getAttribute(\"Exceptions\");\n    // Exception handler types.\n    if (!this.accessFlags.isNative() && !this.accessFlags.isAbstract() && code.exceptionHandlers.length > 0) {\n      toResolve.push('Ljava/lang/Throwable;'); // Mimic native Java (in case <any> is the only handler).\n      // Filter out the <any> handlers.\n      toResolve = toResolve.concat(code.exceptionHandlers.filter((handler) => handler.catchType !== '<any>').map((handler) => handler.catchType));\n    }\n    // Resolve checked exception types.\n    if (exceptionAttribute !== null) {\n      toResolve = toResolve.concat(exceptionAttribute.exceptions);\n    }\n\n    this.cls.getLoader().resolveClasses(thread, toResolve, (classes: {[className: string]: ClassData.ClassData}) => {\n      // Use bootstrap classloader for reflection classes.\n      thread.getBsCl().resolveClasses(thread, ['Ljava/lang/reflect/Method;', 'Ljava/lang/reflect/Constructor;'], (classes2: {[className: string]: ClassData.ClassData}) => {\n        if (classes === null || classes2 === null) {\n          cb(null);\n        } else {\n          classes['Ljava/lang/reflect/Method;'] = classes2['Ljava/lang/reflect/Method;'];\n          classes['Ljava/lang/reflect/Constructor;'] = classes2['Ljava/lang/reflect/Constructor;'];\n          cb(classes);\n        }\n      });\n    });\n  }\n\n  /**\n   * Get a reflection object representing this method.\n   */\n  public reflector(thread: threading.JVMThread, cb: (reflectedMethod: JVMTypes.java_lang_reflect_Executable) => void): void {\n    var bsCl = thread.getBsCl(),\n      // Grab the classes required to construct the needed arrays.\n      clazzArray = (<ClassData.ArrayClassData<JVMTypes.java_lang_Class>> bsCl.getInitializedClass(thread, '[Ljava/lang/Class;')).getConstructor(thread),\n      jvm = thread.getJVM(),\n      // Grab the needed attributes.\n      signatureAttr = <attributes.Signature> this.getAttribute(\"Signature\"),\n      exceptionAttr = <attributes.Exceptions> this.getAttribute(\"Exceptions\");\n\n    // Retrieve all of the required class references.\n    this._resolveReferencedClasses(thread, (classes: { [className: string ]: ClassData.ClassData }) => {\n      if (classes === null) {\n        return cb(null);\n      }\n\n      // Construct the needed objects for the reflection object.\n      var clazz = this.cls.getClassObject(thread),\n        name = jvm.internString(this.name),\n        parameterTypes = new clazzArray(thread, 0),\n        returnType = classes[this.returnType].getClassObject(thread),\n        exceptionTypes = new clazzArray(thread, 0),\n        modifiers = this.accessFlags.getRawByte(),\n        signature = signatureAttr !== null ? jvm.internString(signatureAttr.sig) : null;\n\n      // Prepare the class arrays.\n      parameterTypes.array = this.parameterTypes.map((ptype: string) => classes[ptype].getClassObject(thread));\n      if (exceptionAttr !== null) {\n        exceptionTypes.array = exceptionAttr.exceptions.map((eType: string) => classes[eType].getClassObject(thread));\n      }\n\n      if (this.name === '<init>') {\n        // Constructor object.\n        var consCons = (<ClassData.ReferenceClassData<JVMTypes.java_lang_reflect_Constructor>> classes['Ljava/lang/reflect/Constructor;']).getConstructor(thread),\n          consObj = new consCons(thread);\n        consObj['java/lang/reflect/Constructor/clazz'] = clazz;\n        consObj['java/lang/reflect/Constructor/parameterTypes'] = parameterTypes;\n        consObj['java/lang/reflect/Constructor/exceptionTypes'] = exceptionTypes;\n        consObj['java/lang/reflect/Constructor/modifiers'] = modifiers;\n        consObj['java/lang/reflect/Constructor/slot'] = this.slot;\n        consObj['java/lang/reflect/Constructor/signature'] = signature;\n        consObj['java/lang/reflect/Constructor/annotations'] = this.getAnnotationType(thread, 'RuntimeVisibleAnnotations');\n        consObj['java/lang/reflect/Constructor/parameterAnnotations'] = this.getAnnotationType(thread, 'RuntimeVisibleParameterAnnotations');\n        cb(consObj);\n      } else {\n        // Method object.\n        var methodCons = (<ClassData.ReferenceClassData<JVMTypes.java_lang_reflect_Method>>  classes['Ljava/lang/reflect/Method;']).getConstructor(thread),\n          methodObj = new methodCons(thread);\n        methodObj['java/lang/reflect/Method/clazz'] = clazz;\n        methodObj['java/lang/reflect/Method/name'] = name;\n        methodObj['java/lang/reflect/Method/parameterTypes'] = parameterTypes;\n        methodObj['java/lang/reflect/Method/returnType'] = returnType;\n        methodObj['java/lang/reflect/Method/exceptionTypes'] = exceptionTypes;\n        methodObj['java/lang/reflect/Method/modifiers'] = modifiers;\n        methodObj['java/lang/reflect/Method/slot'] = this.slot;\n        methodObj['java/lang/reflect/Method/signature'] = signature;\n        methodObj['java/lang/reflect/Method/annotations'] = this.getAnnotationType(thread, 'RuntimeVisibleAnnotations');\n        methodObj['java/lang/reflect/Method/annotationDefault'] = this.getAnnotationType(thread, 'AnnotationDefault');\n        methodObj['java/lang/reflect/Method/parameterAnnotations'] = this.getAnnotationType(thread, 'RuntimeVisibleParameterAnnotations');\n        cb(methodObj);\n      }\n    });\n  }\n\n  /**\n   * Convert the arguments to this method into a form suitable for a native\n   * implementation.\n   *\n   * The JVM uses two parameter slots for double and long values, since they\n   * consist of two JVM machine words (32-bits). Doppio stores the entire value\n   * in one slot, and stores a NULL in the second.\n   *\n   * This function strips out these NULLs so the arguments are in a more\n   * consistent form. The return value is the arguments to this function without\n   * these NULL values. It also adds the 'thread' object to the start of the\n   * arguments array.\n   */\n  public convertArgs(thread: threading.JVMThread, params: any[]): any[] {\n    if (this.isSignaturePolymorphic()) {\n      // These don't need any conversion, and have arbitrary arguments.\n      // Just append the thread object.\n      params.unshift(thread);\n      return params;\n    }\n    var convertedArgs = [thread], argIdx = 0, i: number;\n    if (!this.accessFlags.isStatic()) {\n      convertedArgs.push(params[0]);\n      argIdx = 1;\n    }\n    for (i = 0; i < this.parameterTypes.length; i++) {\n      var p = this.parameterTypes[i];\n      convertedArgs.push(params[argIdx]);\n      argIdx += (p === 'J' || p === 'D') ? 2 : 1;\n    }\n    return convertedArgs;\n  }\n\n  /**\n   * Lock this particular method.\n   */\n  public methodLock(thread: threading.JVMThread, frame: threading.BytecodeStackFrame): Monitor {\n    if (this.accessFlags.isStatic()) {\n      // Static methods lock the class.\n      return this.cls.getClassObject(thread).getMonitor();\n    } else {\n      // Non-static methods lock the instance.\n      return (<JVMTypes.java_lang_Object> frame.locals[0]).getMonitor();\n    }\n  }\n\n  /**\n   * Check if this is a signature polymorphic method.\n   * From S2.9:\n   * A method is signature polymorphic if and only if all of the following conditions hold :\n   * * It is declared in the java.lang.invoke.MethodHandle class.\n   * * It has a single formal parameter of type Object[].\n   * * It has a return type of Object.\n   * * It has the ACC_VARARGS and ACC_NATIVE flags set.\n   */\n  public isSignaturePolymorphic(): boolean {\n    return this.cls.getInternalName() === 'Ljava/lang/invoke/MethodHandle;' &&\n      this.accessFlags.isNative() && this.accessFlags.isVarArgs() &&\n      this.rawDescriptor === '([Ljava/lang/Object;)Ljava/lang/Object;';\n  }\n\n  /**\n   * Retrieve the MemberName/invokedynamic JavaScript \"bridge method\" that\n   * encapsulates the logic required to call this particular method.\n   */\n  public getVMTargetBridgeMethod(thread: threading.JVMThread, refKind: number): (thread: threading.JVMThread, descriptor: string, args: any[], cb?: (e?: JVMTypes.java_lang_Throwable, rv?: any) => void) => void {\n    // TODO: Could cache these in the Method object if desired.\n    var outStream = new StringOutputStream(),\n      virtualDispatch = !(refKind === enums.MethodHandleReferenceKind.INVOKESTATIC || refKind === enums.MethodHandleReferenceKind.INVOKESPECIAL);\n    // Args: thread, cls, util\n    if (this.accessFlags.isStatic()) {\n      assert(!virtualDispatch, \"Can't have static virtual dispatch.\");\n      outStream.write(`var jsCons = cls.getConstructor(thread);\\n`);\n    }\n    outStream.write(`function bridgeMethod(thread, descriptor, args, cb) {\\n`);\n    if (!this.accessFlags.isStatic()) {\n      outStream.write(`  var obj = args.shift();\\n`);\n      outStream.write(`  if (obj === null) { return thread.throwNewException('Ljava/lang/NullPointerException;', ''); }\\n`);\n      outStream.write(`  obj[\"${util.reescapeJVMName(virtualDispatch ? this.signature : this.fullSignature)}\"](thread, `);\n    } else {\n      outStream.write(`  jsCons[\"${util.reescapeJVMName(this.fullSignature)}\"](thread, `);\n    }\n    // TODO: Is it ever appropriate to box arguments for varargs functions? It appears not.\n    outStream.write(`args`);\n    outStream.write(`, cb);\n  }\n  return bridgeMethod;`);\n\n    var evalText = outStream.flush();\n    if (typeof RELEASE === 'undefined' && thread !== null && thread.getJVM().shouldDumpCompiledCode()) {\n      thread.getJVM().dumpBridgeMethod(this.fullSignature, evalText);\n    }\n    return new Function(\"thread\", \"cls\", \"util\", evalText)(thread, this.cls, util);\n  }\n\n  /**\n   * Generates JavaScript code for this particular method.\n   * TODO: Move lock logic and such into this function! And other specialization.\n   * TODO: Signature polymorphic functions...?\n   */\n  public outputJavaScriptFunction(jsConsName: string, outStream: StringOutputStream, nonVirtualOnly: boolean = false): void {\n    var i: number;\n    if (this.accessFlags.isStatic()) {\n      outStream.write(`${jsConsName}[\"${util.reescapeJVMName(this.fullSignature)}\"] = ${jsConsName}[\"${util.reescapeJVMName(this.signature)}\"] = `);\n    } else {\n      if (!nonVirtualOnly) {\n        outStream.write(`${jsConsName}.prototype[\"${util.reescapeJVMName(this.signature)}\"] = `);\n      }\n      outStream.write(`${jsConsName}.prototype[\"${util.reescapeJVMName(this.fullSignature)}\"] = `);\n    }\n    // cb check is boilerplate, required for natives calling into JVM land.\n    outStream.write(`(function(method) {\n  return function(thread, args, cb) {\n    if (typeof cb === 'function') {\n      thread.stack.push(new InternalStackFrame(cb));\n    }\n    thread.stack.push(new ${this.accessFlags.isNative() ? \"NativeStackFrame\" : \"BytecodeStackFrame\"}(method, `);\n    if (!this.accessFlags.isStatic()) {\n      // Non-static functions need to add the implicit 'this' variable to the\n      // local variables.\n      outStream.write(`[this`);\n      // Give the JS engine hints about the size, type, and contents of the array\n      // by making it a literal.\n      for (i = 0; i < this.parameterWords; i++) {\n        outStream.write(`, args[${i}]`);\n      }\n      outStream.write(`]`);\n    } else {\n      // Static function doesn't need to mutate the arguments.\n      if (this.parameterWords > 0) {\n        outStream.write(`args`);\n      } else {\n        outStream.write(`[]`);\n      }\n    }\n    outStream.write(`));\n    thread.setStatus(${enums.ThreadStatus.RUNNABLE});\n  };\n})(cls.getSpecificMethod(\"${util.reescapeJVMName(this.cls.getInternalName())}\", \"${util.reescapeJVMName(this.signature)}\"));\\n`);\n  }\n}\n\nfunction makeOnError(onErrorPushes: string[]) {\n  return onErrorPushes.length > 0 ? `f.opStack.pushAll(${onErrorPushes.join(',')});` : '';\n}\n\nconst statTraceCloser: number[] = new Array(256);\n\nif (!RELEASE) {\n  for (let i = 0; i < 256; i++) {\n    statTraceCloser[i] = 0;\n  }\n}\n\nexport function dumpStats() {\n  const range = new Array(256);\n  for (let i = 0; i < 256; i++) {\n    range[i] = i;\n  }\n  range.sort((x, y) => statTraceCloser[y] - statTraceCloser[x]);\n  const top = range.slice(0, 24);\n  console.log(\"Opcodes that closed a trace (number of times encountered):\");\n  for (let i = 0; i < top.length; i++) {\n    const op = top[i];\n    if (statTraceCloser[op] > 0) {\n      console.log(enums.OpCode[op], statTraceCloser[op]);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/methods.ts\n **/","\"use strict\";\nimport util = require('./util');\nimport ByteStream = require('./ByteStream');\nimport ConstantPool = require('./ConstantPool');\nimport enums = require('./enums');\nimport assert = require('./assert');\nimport global = require('./global');\n\ndeclare var RELEASE: boolean;\nif (typeof RELEASE === 'undefined') global.RELEASE = false;\n\nexport interface IAttributeClass {\n  parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool, attrLen: number, name: string): IAttribute;\n}\n\nexport interface IAttribute {\n  getName(): string;\n}\n\nexport interface IInnerClassInfo {\n  innerInfoIndex: number;\n  outerInfoIndex: number;\n  innerNameIndex: number;\n  innerAccessFlags: number;\n}\n\nexport class ExceptionHandler implements IAttribute {\n  public startPC: number;\n  public endPC: number;\n  public handlerPC: number;\n  public catchType: string;\n  constructor(startPC: number, endPC: number, handlerPC: number, catchType: string) {\n    this.startPC = startPC;\n    this.endPC = endPC;\n    this.handlerPC = handlerPC;\n    this.catchType = catchType;\n  }\n  public getName() {\n    return 'ExceptionHandler';\n  }\n  public static parse(bytesArray: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var startPC = bytesArray.getUint16(),\n      endPC = bytesArray.getUint16(),\n      handlerPC = bytesArray.getUint16(),\n      cti = bytesArray.getUint16(),\n      catchType = cti === 0 ? \"<any>\" : (<ConstantPool.ClassReference> constantPool.get(cti)).name;\n    return new this(startPC, endPC, handlerPC, catchType);\n  }\n}\n\nexport class Code implements IAttribute {\n  private maxStack: number;\n  private maxLocals: number;\n  public exceptionHandlers: ExceptionHandler[];\n  private attrs: IAttribute[];\n  private code: Buffer;\n\n  constructor(maxStack: number, maxLocals: number, exceptionHandlers: ExceptionHandler[], attrs: IAttribute[], code: Buffer) {\n    this.maxStack = maxStack;\n    this.maxLocals = maxLocals;\n    this.exceptionHandlers = exceptionHandlers;\n    this.attrs = attrs;\n    this.code = code;\n  }\n\n  public getName() {\n    return 'Code';\n  }\n\n  public getMaxStack(): number {\n    return this.maxStack;\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var maxStack = byteStream.getUint16(),\n      maxLocals = byteStream.getUint16(),\n      codeLen = byteStream.getUint32();\n    if (codeLen === 0) {\n      if (RELEASE) {\n        throw \"Error parsing code: Code length is zero\";\n      }\n    }\n    var code = byteStream.slice(codeLen).getBuffer(),\n      exceptLen = byteStream.getUint16(),\n      exceptionHandlers: ExceptionHandler[] = [];\n    for (var i = 0; i < exceptLen; i++) {\n      exceptionHandlers.push(<ExceptionHandler> ExceptionHandler.parse(byteStream, constantPool));\n    }\n    // yes, there are even attrs on attrs. BWOM... BWOM...\n    var attrs = makeAttributes(byteStream, constantPool);\n    return new this(maxStack, maxLocals, exceptionHandlers, attrs, code);\n  }\n\n  public getCode(): NodeBuffer {\n    return this.code;\n  }\n\n  public getAttribute(name: string): IAttribute {\n    for (var i = 0; i < this.attrs.length; i++) {\n      var attr = this.attrs[i];\n      if (attr.getName() === name) {\n        return attr;\n      }\n    }\n    return null;\n  }\n}\n\nexport interface ILineNumberTableEntry {\n  startPC: number;\n  lineNumber: number;\n}\n\nexport class LineNumberTable implements IAttribute {\n  private entries: ILineNumberTableEntry[];\n\n  constructor(entries: ILineNumberTableEntry[]) {\n    this.entries = entries;\n  }\n\n  public getName() {\n    return 'LineNumberTable';\n  }\n\n  /**\n   * Returns the relevant source code line number for the specified program\n   * counter.\n   */\n  public getLineNumber(pc: number): number {\n    var j: number, lineNumber = -1;\n    // get the last line number before the stack frame's pc\n    for (j = 0; j < this.entries.length; j++) {\n      var entry = this.entries[j];\n      if (entry.startPC <= pc) {\n        lineNumber = entry.lineNumber;\n      } else {\n        // Further entries are past the PC.\n        break;\n      }\n    }\n    return lineNumber;\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var entries: ILineNumberTableEntry[] = [];\n    var lntLen = byteStream.getUint16();\n    for (var i = 0; i < lntLen; i++) {\n      var spc = byteStream.getUint16();\n      var ln = byteStream.getUint16();\n      entries.push({\n        'startPC': spc,\n        'lineNumber': ln\n      });\n    }\n    return new this(entries);\n  }\n}\n\nexport class SourceFile implements IAttribute {\n  public filename: string;\n\n  constructor(filename: string) {\n    this.filename = filename;\n  }\n\n  public getName() {\n    return 'SourceFile';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    return new this((<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16())).value);\n  }\n}\n\nexport interface IStackMapTableEntry {\n  type: enums.StackMapTableEntryType;\n  offsetDelta: number;\n  numLocals?: number;\n  locals?: string[];\n  numStackItems?: number;\n  stack?: string[];\n  k?: number;\n}\n\nexport class StackMapTable implements IAttribute {\n  private entries: IStackMapTableEntry[];\n\n  constructor(entries: IStackMapTableEntry[]) {\n    this.entries = entries;\n  }\n\n  public getName() {\n    return 'StackMapTable';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var numEntries = byteStream.getUint16(),\n      entries: IStackMapTableEntry[] = [];\n    for (var i = 0; i < numEntries; i++) {\n      entries.push(this.parseEntry(byteStream, constantPool));\n    }\n    return new this(entries);\n  }\n\n  private static parseEntry(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IStackMapTableEntry {\n    var frameType = byteStream.getUint8(), locals: string[],\n      offsetDelta: number, i: number;\n    if (frameType < 64) {\n      return {\n        type: enums.StackMapTableEntryType.SAME_FRAME,\n        offsetDelta: frameType\n      };\n    } else if (frameType < 128) {\n      return {\n        type: enums.StackMapTableEntryType.SAME_LOCALS_1_STACK_ITEM_FRAME,\n        offsetDelta: frameType - 64,\n        stack: [this.parseVerificationTypeInfo(byteStream, constantPool)]\n      };\n    } else if (frameType < 247) {\n      // reserved for future use\n    } else if (frameType === 247) {\n      return {\n        type: enums.StackMapTableEntryType.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED,\n        offsetDelta: byteStream.getUint16(),\n        stack: [this.parseVerificationTypeInfo(byteStream, constantPool)]\n      };\n    } else if (frameType < 251) {\n      return {\n        type: enums.StackMapTableEntryType.CHOP_FRAME,\n        offsetDelta: byteStream.getUint16(),\n        k: 251 - frameType\n      };\n    } else if (frameType === 251) {\n      return {\n        type: enums.StackMapTableEntryType.SAME_FRAME_EXTENDED,\n        offsetDelta: byteStream.getUint16()\n      };\n    } else if (frameType < 255) {\n      offsetDelta = byteStream.getUint16();\n      locals = [];\n      for (i = 0; i < frameType - 251; i++) {\n        locals.push(this.parseVerificationTypeInfo(byteStream, constantPool));\n      }\n      return {\n        type: enums.StackMapTableEntryType.APPEND_FRAME,\n        offsetDelta: offsetDelta,\n        locals: locals\n      };\n    } else if (frameType === 255) {\n      offsetDelta = byteStream.getUint16();\n      var numLocals = byteStream.getUint16();\n      locals = [];\n      for (i = 0; i < numLocals; i++) {\n        locals.push(this.parseVerificationTypeInfo(byteStream, constantPool));\n      }\n      var numStackItems = byteStream.getUint16();\n      var stack: string[] = [];\n      for (i = 0; i < numStackItems; i++) {\n        stack.push(this.parseVerificationTypeInfo(byteStream, constantPool));\n      }\n      return {\n        type: enums.StackMapTableEntryType.FULL_FRAME,\n        offsetDelta: offsetDelta,\n        numLocals: numLocals,\n        locals: locals,\n        numStackItems: numStackItems,\n        stack: stack\n      };\n    }\n  }\n\n  private static parseVerificationTypeInfo(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): string {\n    var tag = byteStream.getUint8();\n    if (tag === 7) {\n      var cls = (<ConstantPool.ClassReference> constantPool.get(byteStream.getUint16())).name;\n      return 'class ' + (/\\w/.test(cls[0]) ? util.descriptor2typestr(cls) : \"\\\"\" + cls + \"\\\"\");\n    } else if (tag === 8) {\n      return 'uninitialized ' + byteStream.getUint16();\n    } else {\n      var tagToType = ['bogus', 'int', 'float', 'double', 'long', 'null', 'this', 'object', 'uninitialized'];\n      return tagToType[tag];\n    }\n  }\n}\n\nexport interface ILocalVariableTableEntry {\n  startPC: number;\n  length: number;\n  name: string;\n  descriptor: string;\n  ref: number;\n}\n\nexport class LocalVariableTable implements IAttribute {\n  private entries: ILocalVariableTableEntry[];\n\n  constructor(entries: ILocalVariableTableEntry[]) {\n    this.entries = entries;\n  }\n\n  public getName() {\n    return 'LocalVariableTable';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var numEntries = byteStream.getUint16(),\n      entries: ILocalVariableTableEntry[] = [];\n    for (var i = 0; i < numEntries; i++) {\n      entries.push(this.parseEntries(byteStream, constantPool));\n    }\n    return new this(entries);\n  }\n\n  private static parseEntries(bytes_array: ByteStream, constant_pool: ConstantPool.ConstantPool): ILocalVariableTableEntry {\n    return {\n      startPC: bytes_array.getUint16(),\n      length: bytes_array.getUint16(),\n      name: (<ConstantPool.ConstUTF8> constant_pool.get(bytes_array.getUint16())).value,\n      descriptor: (<ConstantPool.ConstUTF8> constant_pool.get(bytes_array.getUint16())).value,\n      ref: bytes_array.getUint16()\n    };\n  }\n}\n\nexport interface ILocalVariableTypeTableEntry {\n  startPC: number;\n  length: number;\n  name: string;\n  signature: string;\n  index: number;\n}\n\nexport class LocalVariableTypeTable implements IAttribute {\n  public entries: ILocalVariableTypeTableEntry[];\n  constructor(entries: ILocalVariableTypeTableEntry[]) {\n    this.entries = entries;\n  }\n  public getName(): string {\n    return 'LocalVariableTypeTable';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var numEntries = byteStream.getUint16(), i: number,\n      entries: ILocalVariableTypeTableEntry[] = [];\n    for (i = 0; i < numEntries; i++) {\n      entries.push(this.parseTableEntry(byteStream, constantPool));\n    }\n    return new this(entries);\n  }\n\n  private static parseTableEntry(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): ILocalVariableTypeTableEntry {\n    return {\n      startPC: byteStream.getUint16(),\n      length: byteStream.getUint16(),\n      name: (<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16())).value,\n      signature: (<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16())).value,\n      index: byteStream.getUint16()\n    };\n  }\n}\n\nexport class Exceptions implements IAttribute {\n  public exceptions: string[];\n\n  constructor(exceptions: string[]) {\n    this.exceptions = exceptions;\n  }\n\n  public getName() {\n    return 'Exceptions';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var numExceptions = byteStream.getUint16();\n    var excRefs: number[] = [];\n    for (var i = 0; i < numExceptions; i++) {\n      excRefs.push(byteStream.getUint16());\n    }\n    return new this(excRefs.map((ref: number) => (<ConstantPool.ClassReference> constantPool.get(ref)).name));\n  }\n}\n\nexport class InnerClasses implements IAttribute {\n  public classes: IInnerClassInfo[];\n\n  constructor(classes: IInnerClassInfo[]) {\n    this.classes = classes;\n  }\n\n  public getName() {\n    return 'InnerClasses';\n  }\n\n  public static parse(bytes_array: ByteStream, constant_pool: ConstantPool.ConstantPool): IAttribute {\n    var numClasses = bytes_array.getUint16(),\n      classes: IInnerClassInfo[] = [];\n    for (var i = 0; i < numClasses; i++) {\n      classes.push(this.parseClass(bytes_array, constant_pool));\n    }\n    return new this(classes);\n  }\n\n  public static parseClass(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IInnerClassInfo {\n    return {\n      innerInfoIndex: byteStream.getUint16(),\n      outerInfoIndex: byteStream.getUint16(),\n      innerNameIndex: byteStream.getUint16(),\n      innerAccessFlags: byteStream.getUint16()\n    };\n  }\n}\n\nexport class ConstantValue implements IAttribute {\n  public value: ConstantPool.IConstantPoolItem;\n\n  constructor(value: ConstantPool.IConstantPoolItem) {\n    this.value = value;\n  }\n\n  public getName() {\n    return 'ConstantValue';\n  }\n\n  public static parse(bytes_array: ByteStream, constant_pool: ConstantPool.ConstantPool): IAttribute {\n    var ref = bytes_array.getUint16();\n    return new this(constant_pool.get(ref));\n  }\n}\n\nexport class Synthetic implements IAttribute {\n  public getName() {\n    return 'Synthetic';\n  }\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    return new this();\n  }\n}\n\nexport class Deprecated implements IAttribute {\n  public getName() {\n    return 'Deprecated';\n  }\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    return new this();\n  }\n}\n\nexport class Signature implements IAttribute {\n  public sig: string;\n\n  constructor(sig: string) {\n    this.sig = sig;\n  }\n\n  public getName() {\n    return 'Signature';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    return new this((<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16())).value);\n  }\n}\n\nexport class RuntimeVisibleAnnotations implements IAttribute {\n  public rawBytes: Buffer;\n  public isHidden: boolean;\n  public isCallerSensitive: boolean;\n  public isCompiled: boolean;\n\n  constructor(rawBytes: Buffer, isHidden: boolean, isCallerSensitive: boolean, isCompiled: boolean) {\n    this.rawBytes = rawBytes;\n    this.isHidden = isHidden;\n    this.isCallerSensitive = isCallerSensitive;\n    this.isCompiled = isCompiled;\n  }\n\n  public getName() {\n    return 'RuntimeVisibleAnnotations';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool, attrLen: number): IAttribute {\n    // No need to parse; OpenJDK parses these from within Java code from\n    // the raw bytes.\n    // ...but we need to look for the 'Hidden' annotation, which specifies if\n    // the method should be omitted from stack frames.\n    // And the 'compiled' annotation, which specifies if the method was\n    // compiled.\n    // And the 'CallerSensitive' annotation, which specifies that the function's\n    // behavior differs depending on the caller.\n\n    /**\n     * Skip the current RuntimeVisibleAnnotation.\n     */\n    function skipAnnotation() {\n      byteStream.skip(2); // type index\n      var numValuePairs = byteStream.getUint16(),\n        i: number;\n      for (i = 0; i < numValuePairs; i++) {\n        byteStream.skip(2); // element name index\n        skipElementValue();\n      }\n    }\n\n    /**\n     * Skip this particular element value.\n     */\n    function skipElementValue() {\n      var tag = String.fromCharCode(byteStream.getUint8());\n      switch(tag) {\n        case 'e':\n          // Fall-through.\n          byteStream.skip(2);\n        case 'Z':\n        case 'B':\n        case 'C':\n        case 'S':\n        case 'I':\n        case 'F':\n        case 'J':\n        case 'D':\n        case 's':\n        case 'c':\n          byteStream.skip(2);\n          break;\n        case '@':\n          skipAnnotation();\n          break;\n        case '[':\n          var numValues = byteStream.getUint16(), i: number;\n          for (i = 0; i < numValues; i++) {\n            skipElementValue();\n          }\n          break;\n\n      }\n    }\n\n    var rawBytes = byteStream.read(attrLen),\n      isHidden = false, isCompiled = false, isCallerSensitive = false;\n    byteStream.seek(byteStream.pos() - rawBytes.length);\n    var numAttributes = byteStream.getUint16(), i: number;\n    for (i = 0; i < numAttributes; i++) {\n      var typeName = (<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16()));\n      // Rewind.\n      byteStream.seek(byteStream.pos() - 2);\n      skipAnnotation();\n      switch (typeName.value) {\n        case 'Ljava/lang/invoke/LambdaForm$Hidden;':\n          isHidden = true;\n          break;\n        case 'Lsig/sun/reflect/CallerSensitive;':\n          isCallerSensitive = true;\n          break;\n        case 'Lsig/java/lang/invoke/LambdaForm$Compiled':\n          isCompiled = true;\n          break;\n      }\n    }\n\n    return new this(rawBytes, isHidden, isCallerSensitive, isCompiled);\n  }\n}\n\nexport class AnnotationDefault implements IAttribute {\n  public rawBytes: Buffer;\n  constructor(rawBytes: Buffer) {\n    this.rawBytes = rawBytes;\n  }\n\n  public getName() {\n    return 'AnnotationDefault';\n  }\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool, attrLen?: number): IAttribute {\n    return new this(byteStream.read(attrLen));\n  }\n}\n\nexport class EnclosingMethod implements IAttribute {\n  public encClass: ConstantPool.ClassReference;\n  /**\n   * Note: Is NULL if the current class is not immediately enclosed by a method\n   * or a constructor.\n   */\n  public encMethod: ConstantPool.NameAndTypeInfo;\n  constructor(encClass: ConstantPool.ClassReference, encMethod: ConstantPool.NameAndTypeInfo) {\n    this.encClass = encClass;\n    this.encMethod = encMethod;\n  }\n\n  public getName() {\n    return 'EnclosingMethod';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var encClass = (<ConstantPool.ClassReference> constantPool.get(byteStream.getUint16())),\n      methodRef = byteStream.getUint16(), encMethod: ConstantPool.NameAndTypeInfo = null;\n    if (methodRef > 0) {\n      encMethod = <ConstantPool.NameAndTypeInfo> constantPool.get(methodRef);\n      assert(encMethod.getType() === enums.ConstantPoolItemType.NAME_AND_TYPE, \"Enclosing method must be a name and type info.\");\n    }\n    return new this(encClass, encMethod);\n  }\n}\n\nexport class BootstrapMethods implements IAttribute {\n  public bootstrapMethods: Array<[ConstantPool.MethodHandle, ConstantPool.IConstantPoolItem[]]>;\n  constructor(bootstrapMethods: Array<[ConstantPool.MethodHandle, ConstantPool.IConstantPoolItem[]]>) {\n    this.bootstrapMethods = bootstrapMethods;\n  }\n\n  public getName() {\n    return 'BootstrapMethods';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute {\n    var numBootstrapMethods = byteStream.getUint16(),\n      bootstrapMethods: Array<[ConstantPool.MethodHandle, ConstantPool.IConstantPoolItem[]]> = [];\n    for (var i = 0; i < numBootstrapMethods; i++) {\n      var methodHandle = <ConstantPool.MethodHandle> constantPool.get(byteStream.getUint16());\n      var numArgs = byteStream.getUint16();\n      var args: ConstantPool.IConstantPoolItem[] = [];\n      for (var j = 0; j < numArgs; j++) {\n        args.push(constantPool.get(byteStream.getUint16()));\n      }\n      bootstrapMethods.push([methodHandle, args]);\n    }\n    return new this(bootstrapMethods);\n  }\n}\n\nexport class RuntimeVisibleParameterAnnotations implements IAttribute {\n  public rawBytes: Buffer;\n  constructor(rawBytes: Buffer) {\n    this.rawBytes = rawBytes;\n  }\n\n  public getName() {\n    return 'RuntimeVisibleParameterAnnotations';\n  }\n\n  public static parse(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool, attrLen: number): IAttribute {\n    return new this(byteStream.read(attrLen));\n  }\n}\n\nexport function makeAttributes(byteStream: ByteStream, constantPool: ConstantPool.ConstantPool): IAttribute[]{\n  var attrTypes: { [name: string]: IAttributeClass } = {\n    'Code': Code,\n    'LineNumberTable': LineNumberTable,\n    'SourceFile': SourceFile,\n    'StackMapTable': StackMapTable,\n    'LocalVariableTable': LocalVariableTable,\n    'LocalVariableTypeTable': LocalVariableTypeTable,\n    'ConstantValue': ConstantValue,\n    'Exceptions': Exceptions,\n    'InnerClasses': InnerClasses,\n    'Synthetic': Synthetic,\n    'Deprecated': Deprecated,\n    'Signature': Signature,\n    'RuntimeVisibleAnnotations': RuntimeVisibleAnnotations,\n    'AnnotationDefault': AnnotationDefault,\n    'EnclosingMethod': EnclosingMethod,\n    'BootstrapMethods': BootstrapMethods,\n    'RuntimeVisibleParameterAnnotations': RuntimeVisibleParameterAnnotations\n  };\n  var numAttrs = byteStream.getUint16();\n  var attrs : IAttribute[] = [];\n  for (var i = 0; i < numAttrs; i++) {\n    var name = (<ConstantPool.ConstUTF8> constantPool.get(byteStream.getUint16())).value;\n    var attrLen = byteStream.getUint32();\n    if (attrTypes[name] != null) {\n      var oldLen = byteStream.size();\n      var attr = attrTypes[name].parse(byteStream, constantPool, attrLen, name);\n      var newLen = byteStream.size();\n      assert((oldLen - newLen) <= attrLen, `A parsed attribute read beyond its data! ${name}`);\n      if (oldLen - newLen !== attrLen) {\n        byteStream.skip(attrLen - oldLen + newLen);\n      }\n      attrs.push(attr);\n    } else {\n      // we must silently ignore other attrs\n      byteStream.skip(attrLen);\n    }\n  }\n  return attrs;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/attributes.ts\n **/","import threading = require('./threading');\n\n/**\n * Checks the given assertion. Throws an error if it fails.\n */\nfunction assert(assertion: boolean, msg?: string, thread?: threading.JVMThread) {\n  if (!assertion) {\n    throw new Error(`Assertion failed: ${msg}\\n${thread ? thread.getPrintableStackTrace() : ''}`);\n  }\n}\n\nexport = assert;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/assert.ts\n **/","/**\n * Exports the global scope variable.\n * In the main browser thread, this is \"window\".\n * In a WebWorker, this is \"self\".\n * In Node, this is \"global\".\n */\ndeclare var global: any;\nvar toExport: any;\nif (typeof(window) !== 'undefined') {\n  toExport = window;\n} else if (typeof(self) !== 'undefined') {\n  toExport = self;\n} else {\n  toExport = global;\n}\nexport = toExport;\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/global.ts\n **/","import ClassData = require('./ClassData');\nimport ClassLoader = require('./ClassLoader');\nimport methods = require('./methods');\nimport enums = require('./enums');\nimport assert = require('./assert');\nimport gLong = require('./gLong');\nimport opcodes = require('./opcodes');\nimport attributes = require('./attributes');\nimport logging = require('./logging');\nimport JVM = require('./jvm');\nimport util = require('./util');\nimport ConstantPool = require('./ConstantPool');\nimport JVMTypes = require('../includes/JVMTypes');\nimport Monitor = require('./Monitor');\nimport ThreadStatus = enums.ThreadStatus;\nimport {default as ThreadPool, Thread} from './threadpool';\nimport global = require('./global');\n\ndeclare var RELEASE: boolean;\nif (typeof RELEASE === 'undefined') global.RELEASE = false;\n\nvar debug = logging.debug, vtrace = logging.vtrace, trace = logging.trace,\n  // The number of method resumes we should allow before yielding for\n  // responsiveness. Updated using a cumulative moving average to ensure\n  // Doppio is responsive.\n  maxMethodResumes: number = 10000,\n  // The number of method resumes until Doppio should yield again.\n  methodResumesLeft: number = maxMethodResumes,\n  // Used for the CMA.\n  numSamples: number = 1;\n\n/**\n * Represents a stack frame.\n */\nexport interface IStackFrame {\n  /**\n   * Runs or resumes the method, as configured.\n   */\n  run: (thread: JVMThread) => void;\n  /**\n   * Configures the method to resume after a method call.\n   * @rv The return value from the method call, if applicable.\n   * @rv2 The second return value, which will always be null if applicable.\n   */\n  scheduleResume: (thread: JVMThread, rv?: any, rv2?: any) => void;\n  /**\n   * Checks if the method can handle the given exception. If so,\n   * configures the stack frame to handle the exception.\n   * @return True if the method can handle the exception.\n   */\n  scheduleException: (thread: JVMThread, e: JVMTypes.java_lang_Throwable) => boolean;\n  /**\n   * This stack frame's type.\n   */\n  type: enums.StackFrameType;\n  /**\n   * Retrieve a stack trace frame from this stack trace. If this stack frame\n   * should not be language-visible, return null.\n   */\n  getStackTraceFrame(): IStackTraceFrame;\n  /**\n   * Retrieve the classloader for this method.\n   */\n  getLoader(): ClassLoader.ClassLoader;\n}\n\nexport class PreAllocatedStack {\n  private store: any[];\n  private curr: number = 0;\n\n  constructor(initialSize: number) {\n    this.store = new Array(initialSize);\n  }\n\n  push(x: any) {\n    this.store[this.curr++] = x;\n  }\n\n  pushAll() {\n    const n = arguments.length;\n    for (let i = 0; i < n; i++) {\n      this.store[this.curr++] = arguments[i];\n    }\n  }\n\n  pushWithNull(x: any) {\n    this.store[this.curr] = x;\n\n    // XXX: Although setting `null` is required in theory, it has no functional impact in practice.\n    // Performance is improved when commented.\n    // this.store[this.curr + 1] = null;\n\n    this.curr += 2;\n  }\n\n  push6(x: any, y: any, z: any, z1: any, z2: any, z3: any) {\n    this.store[this.curr++] = x;\n    this.store[this.curr++] = y;\n    this.store[this.curr++] = z;\n    this.store[this.curr++] = z1;\n    this.store[this.curr++] = z2;\n    this.store[this.curr++] = z3;\n  }\n\n  swap() {\n    const tmp = this.store[this.curr - 1];\n    this.store[this.curr - 1] = this.store[this.curr - 2];\n    this.store[this.curr - 2] = tmp;\n  }\n\n  dup() {\n    this.store[this.curr] = this.store[this.curr - 1];\n    this.curr++;\n  }\n\n  dup2() {\n    this.store[this.curr] = this.store[this.curr - 2];\n    this.store[this.curr + 1] = this.store[this.curr - 1];\n    this.curr += 2;\n  }\n\n  dup_x1() {\n    const v1 = this.store[this.curr - 1];\n\n    this.store[this.curr - 1] = this.store[this.curr - 2];\n    this.store[this.curr] = v1;\n    this.store[this.curr - 2] = v1;\n\n    this.curr++;\n  }\n\n  dup_x2() {\n    const v1 = this.store[this.curr - 1];\n\n    this.store[this.curr - 1] = this.store[this.curr - 2];\n    this.store[this.curr - 2] = this.store[this.curr - 3];\n    this.store[this.curr] = v1;\n    this.store[this.curr - 3] = v1;\n\n    this.curr++;\n  }\n\n  dup2_x1() {\n    const v1 = this.store[this.curr - 1];\n    const v2 = this.store[this.curr - 2];\n\n    this.store[this.curr] = v2;\n    this.store[this.curr + 1] = v1;\n    this.store[this.curr - 1] = this.store[this.curr - 3];\n    this.store[this.curr - 2] = v1;\n    this.store[this.curr - 3] = v2;\n\n    this.curr += 2;\n  }\n\n  pop(): any {\n    return this.store[--this.curr];\n  }\n\n  pop2(): any {\n    this.curr -= 2;\n    return this.store[this.curr];\n  }\n\n  bottom(): any {\n    return this.store[0];\n  }\n\n  top(): any {\n    return this.store[this.curr - 1];\n  }\n\n  fromTop(n: number): any {\n    return this.store[this.curr - (n + 1)];\n  }\n\n  sliceFromBottom(n: number): any {\n    return this.store.slice(n, this.curr);\n  }\n\n  sliceFromTop(n: number): any {\n    return this.store.slice(this.curr - n, this.curr);\n  }\n\n  dropFromTop(n: number) {\n    this.curr -= n;\n  }\n\n  sliceAndDropFromTop(n: number): any {\n    const curr = this.curr;\n    this.curr -= n;\n    return this.store.slice(curr - n, curr);\n  }\n\n  getRaw(): any[] {\n    return this.store.slice(0, this.curr);\n  }\n\n  clear() {\n    this.curr = 0;\n  }\n}\n\nconst jitUtil = {\n  isNull: opcodes.isNull,\n  resolveCPItem: opcodes.resolveCPItem,\n  throwException: opcodes.throwException,\n  gLong: gLong,\n  float2int: util.float2int,\n  wrapFloat: util.wrapFloat,\n  Constants: enums.Constants\n};\n\n/**\n * Represents a stack frame for a bytecode method.\n */\nexport class BytecodeStackFrame implements IStackFrame {\n  public pc: number = 0;\n  public locals: any[];\n  public opStack: PreAllocatedStack;\n  public returnToThreadLoop: boolean = false;\n  public lockedMethodLock: boolean = false;\n  public method: methods.Method;\n\n  /**\n   * Constructs a bytecode method's stack frame.\n   * @param method The bytecode method to run.\n   * @param args The arguments to pass to the bytecode method.\n   */\n  constructor(method: methods.Method, args: any[]) {\n    this.method = method;\n    method.incrBBEntries();\n    assert(!method.accessFlags.isNative(), 'Cannot run a native method using a BytecodeStackFrame.');\n    // @todo This should be a runtime error, since reflection can cause you to\n    // try to do this.\n    assert(!method.accessFlags.isAbstract(), 'Cannot run an abstract method!');\n    this.locals = args;\n    this.opStack = new PreAllocatedStack(method.getCodeAttribute().getMaxStack());\n  }\n\n  public run(thread: JVMThread): void {\n    var method = this.method, code = this.method.getCodeAttribute().getCode(),\n      opcodeTable = opcodes.LookupTable;\n    if (!RELEASE && logging.log_level >= logging.TRACE) {\n      if (this.pc === 0) {\n        trace(`\\nT${thread.getRef()} D${thread.getStackTrace().length} Running ${this.method.getFullSignature()} [Bytecode]:`);\n      } else {\n        trace(`\\nT${thread.getRef()} D${thread.getStackTrace().length} Resuming ${this.method.getFullSignature()}:${this.pc} [Bytecode]:`);\n      }\n      vtrace(`  S: [${logging.debug_vars(this.opStack.getRaw())}], L: [${logging.debug_vars(this.locals)}]`);\n    }\n\n    if (method.accessFlags.isSynchronized() && !this.lockedMethodLock) {\n      // We are starting a synchronized method! These must implicitly enter\n      // their respective locks.\n      this.lockedMethodLock = method.methodLock(thread, this).enter(thread, () => {\n        // Lock succeeded. Set the flag so we don't attempt to reacquire it\n        // when this method reruns.\n        this.lockedMethodLock = true;\n      });\n      if (!this.lockedMethodLock) {\n        // Failed. Thread is automatically blocked. Return.\n        assert(thread.getStatus() === ThreadStatus.BLOCKED, \"Failed to enter a monitor. Thread must be BLOCKED.\");\n        return;\n      }\n    }\n\n    // Reset the returnToThreadLoop switch. The current value is leftover\n    // from the previous time this method was run, and is meaningless.\n    this.returnToThreadLoop = false;\n\n    if (thread.getJVM().isJITDisabled()) {\n      // Interpret until we get the signal to return to the thread loop.\n      while (!this.returnToThreadLoop) {\n        var opCode = code.readUInt8(this.pc);\n        if (!RELEASE && logging.log_level === logging.VTRACE) {\n          vtrace(`  ${this.pc} ${annotateOpcode(op, method, code, this.pc)}`);\n        }\n        opcodeTable[opCode](thread, this, code);\n        if (!RELEASE && !this.returnToThreadLoop && logging.log_level === logging.VTRACE) {\n          vtrace(`    S: [${logging.debug_vars(this.opStack.getRaw())}], L: [${logging.debug_vars(this.locals)}]`);\n        }\n      }\n    } else {\n      // Run until we get the signal to return to the thread loop.\n      while (!this.returnToThreadLoop) {\n        var op = method.getOp(this.pc, code, thread);\n        if (typeof op === 'function') {\n          if (!RELEASE && logging.log_level === logging.VTRACE) {\n            vtrace(`  ${this.pc} running JIT compiled function:\\n${op.toString()}`);\n          }\n          op(this, thread, jitUtil);\n        } else {\n          if (!RELEASE && logging.log_level === logging.VTRACE) {\n            vtrace(`  ${this.pc} ${annotateOpcode(op, method, code, this.pc)}`);\n          }\n          opcodeTable[op](thread, this, code);\n        }\n        if (!RELEASE && !this.returnToThreadLoop && logging.log_level === logging.VTRACE) {\n          vtrace(`    S: [${logging.debug_vars(this.opStack.getRaw())}], L: [${logging.debug_vars(this.locals)}]`);\n        }\n      }\n    }\n  }\n\n  public scheduleResume(thread: JVMThread, rv?: any, rv2?: any): void {\n    // Advance to the next opcode.\n    var prevOp = this.method.getCodeAttribute().getCode().readUInt8(this.pc);\n    switch (prevOp) {\n      case enums.OpCode.INVOKEINTERFACE:\n      case enums.OpCode.INVOKEINTERFACE_FAST:\n        this.pc += 5;\n        break;\n      case enums.OpCode.INVOKESPECIAL:\n      case enums.OpCode.INVOKESTATIC:\n      case enums.OpCode.INVOKEVIRTUAL:\n      case enums.OpCode.INVOKESTATIC_FAST:\n      case enums.OpCode.INVOKENONVIRTUAL_FAST:\n      case enums.OpCode.INVOKEVIRTUAL_FAST:\n      case enums.OpCode.INVOKEHANDLE:\n      case enums.OpCode.INVOKEBASIC:\n      case enums.OpCode.LINKTOSPECIAL:\n      case enums.OpCode.LINKTOVIRTUAL:\n      case enums.OpCode.INVOKEDYNAMIC:\n      case enums.OpCode.INVOKEDYNAMIC_FAST:\n        this.pc += 3;\n        break;\n      default:\n        // Should be impossible.\n        assert(false, `Resuming from a non-invoke opcode! Opcode: ${enums.OpCode[prevOp]} [${prevOp}]`);\n        break;\n    }\n\n    if (rv !== undefined) {\n      this.opStack.push(rv);\n    }\n    if (rv2 !== undefined) {\n      this.opStack.push(rv2);\n    }\n  }\n\n  /**\n   * Checks if this method can handle the specified exception 'e'.\n   * Returns true if it can, or if it needs to asynchronously resolve some\n   * classes.\n   *\n   * In the latter case, scheduleException will handle rethrowing the exception\n   * in the event that it can't actually handle it.\n   */\n  public scheduleException(thread: JVMThread, e: JVMTypes.java_lang_Throwable): boolean {\n    var codeAttr = this.method.getCodeAttribute(),\n      pc = this.pc, method = this.method,\n      // STEP 1: See if we can find an appropriate handler for this exception!\n      exceptionHandlers = codeAttr.exceptionHandlers,\n      ecls = e.getClass(), handler: attributes.ExceptionHandler;\n    for (let i = 0; i < exceptionHandlers.length; i++) {\n      let eh = exceptionHandlers[i];\n      if (eh.startPC <= pc && pc < eh.endPC) {\n        if (eh.catchType === \"<any>\") {\n          handler = eh;\n          break;\n        } else {\n          let resolvedCatchType = method.cls.getLoader().getResolvedClass(eh.catchType);\n          if (resolvedCatchType != null) {\n            if (ecls.isCastable(resolvedCatchType)) {\n              handler = eh;\n              break;\n            }\n          } else {\n            // ASYNC PATH: We'll need to asynchronously resolve these handlers.\n            debug(`${method.getFullSignature()} needs to resolve some exception types...`);\n            let handlerClasses: string[] = [];\n            for (let i = 0; i < exceptionHandlers.length; i++) {\n              let handler = exceptionHandlers[i];\n              if (handler.catchType !== \"<any>\") {\n                handlerClasses.push(handler.catchType);\n              }\n            }\n            debug(`${method.getFullSignature()}: Has to resolve exception classes. Deferring scheduling...`);\n            thread.setStatus(ThreadStatus.ASYNC_WAITING);\n            method.cls.getLoader().resolveClasses(thread, handlerClasses, (classes: { [name: string]: ClassData.ClassData; }) => {\n              if (classes !== null) {\n                debug(`${method.getFullSignature()}: Rethrowing exception to handle!`);\n                // Rethrow the exception to trigger scheduleException again.\n                // @todo If the ClassLoader throws an exception during resolution,\n                // this could result in an infinite loop. Fix would be to sync check\n                // if class failed to load previously.\n                thread.throwException(e);\n              }\n            });\n            // Tell the thread we'll handle it.\n            return true;\n          }\n        }\n      }\n    }\n\n    // STEP 2: Either continue on if we could not find an appropriate handler,\n    // or set up the stack for appropriate resumption.\n    if (handler != null) {\n      // Found the handler.\n      debug(`${method.getFullSignature()}: Caught ${e.getClass().getInternalName()} as subclass of ${handler.catchType}`);\n\n      // clear out anything on the stack; it was made during the try block\n      this.opStack.clear();\n      this.opStack.push(e);\n\n      this.pc = handler.handlerPC;\n      return true;\n    } else {\n      // abrupt method invocation completion\n      debug(`${method.getFullSignature()}: Did not catch ${e.getClass().getInternalName()}.`);\n      // STEP 3: Synchronized method? Exit from the method's monitor.\n      if (method.accessFlags.isSynchronized()) {\n        method.methodLock(thread, this).exit(thread);\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Returns the classloader for the stack frame.\n   */\n  public getLoader(): ClassLoader.ClassLoader {\n    return this.method.cls.getLoader();\n  }\n\n  /**\n   * Indicates the type of this stack frame.\n   */\n  public type: enums.StackFrameType = enums.StackFrameType.BYTECODE;\n\n  public getStackTraceFrame(): IStackTraceFrame {\n    return {\n      method: this.method,\n      pc: this.pc,\n      stack: this.opStack.sliceFromBottom(0),\n      locals: this.locals.slice(0)\n    };\n  }\n}\n\n/**\n * Represents a native method's stack frame.\n */\nexport class NativeStackFrame implements IStackFrame {\n  private nativeMethod: Function;\n  public method: methods.Method;\n  private args: any[];\n\n  /**\n   * Constructs a native method's stack frame.\n   * @param method The native method to run.\n   * @param args The arguments to pass to the native method.\n   */\n  constructor(method: methods.Method, args: any[]) {\n    this.method = method;\n    this.args = args;\n    assert(method.accessFlags.isNative());\n    this.nativeMethod = method.getNativeFunction();\n  }\n\n  /**\n   * Calls the native method.\n   * NOTE: Should only be called once.\n   */\n  public run(thread: JVMThread): void {\n    trace(`\\nT${thread.getRef()} D${thread.getStackTrace().length} Running ${this.method.getFullSignature()} [Native]:`);\n    var rv: any = this.nativeMethod.apply(null, this.method.convertArgs(thread, this.args));\n    // Ensure thread is running, and we are the running method.\n    if (thread.getStatus() === ThreadStatus.RUNNABLE && thread.currentMethod() === this.method) {\n      // Normal native method exit.\n      var returnType = this.method.returnType;\n      switch (returnType) {\n        case 'J':\n        case 'D':\n          // Two stack return values for methods that return a long or a double.\n          thread.asyncReturn(rv, null);\n          break;\n        case 'Z':\n          // Convert to a number.\n          thread.asyncReturn(rv ? 1 : 0);\n          break;\n        default:\n          thread.asyncReturn(rv);\n          break;\n      }\n    }\n  }\n\n  /**\n   * N/A\n   */\n  public scheduleResume(thread: JVMThread, rv?: any, rv2?: any): void {\n    // NOP\n  }\n\n  /**\n   * Not relevant; the first execution block of a native method will never\n   * receive an exception.\n   */\n  public scheduleException(thread: JVMThread, e: JVMTypes.java_lang_Throwable): boolean {\n    return false;\n  }\n\n  public type: enums.StackFrameType = enums.StackFrameType.NATIVE;\n\n  public getStackTraceFrame(): IStackTraceFrame {\n    return {\n      method: this.method,\n      pc: -1,\n      stack: [],\n      locals: []\n    };\n  }\n\n  /**\n   * Returns the classloader for the stack frame.\n   */\n  public getLoader(): ClassLoader.ClassLoader {\n    return this.method.cls.getLoader();\n  }\n}\n\n/**\n * InternalStackFrames are used by the JVM to launch JVM functions that\n * eventually call back into JavaScript code when they complete or throw a\n * fatal exception.\n */\nexport class InternalStackFrame implements IStackFrame {\n  private isException: boolean = false;\n  private val: any;\n  private cb: (e?: JVMTypes.java_lang_Throwable, rv?: any) => void;\n\n  /**\n   * @param cb Callback function. Called with an exception if one occurs, or\n   *   the return value from the called method, if relevant.\n   */\n  constructor(cb: (e?: JVMTypes.java_lang_Throwable, rv?: any) => void) {\n    this.cb = cb;\n  }\n\n  public run(thread: JVMThread): void {\n    // Pop myself off of the stack.\n    thread.framePop();\n    // Pause the thread before returning into native JavaScript code.\n    thread.setStatus(ThreadStatus.ASYNC_WAITING);\n    if (this.isException) {\n      this.cb(this.val);\n    } else {\n      this.cb(null, this.val);\n    }\n  }\n\n  /**\n   * Resumes the JavaScript code that created this stack frame.\n   */\n  public scheduleResume(thread: JVMThread, rv?: any): void {\n    this.isException = false;\n    this.val = rv;\n  }\n\n  /**\n   * Resumes the JavaScript code that created this stack frame with the given\n   * exception.\n   */\n  public scheduleException(thread: JVMThread, e: JVMTypes.java_lang_Throwable): boolean {\n    this.isException = true;\n    this.val = e;\n    return true;\n  }\n\n  public type: enums.StackFrameType = enums.StackFrameType.INTERNAL;\n\n  public getStackTraceFrame(): IStackTraceFrame {\n    // These should not be language visible.\n    return null;\n  }\n\n  public getLoader(): ClassLoader.ClassLoader {\n    throw new Error(\"Internal stack frames have no loader.\");\n  }\n}\n\nexport interface IStackTraceFrame {\n  method: methods.Method;\n  pc: number;\n  stack: any[];\n  locals: any[];\n}\n\n/**\n * Represents a single JVM thread.\n */\nexport class JVMThread implements Thread {\n  /**\n   * The current state of this thread, from the JVM level.\n   */\n  private status: ThreadStatus = ThreadStatus.NEW;\n\n  /**\n   * The call stack.\n   */\n  private stack: IStackFrame[] = [];\n\n  /**\n   * Whether or not this thread has been interrupted. It's a JVM thing.\n   */\n  private interrupted: boolean = false;\n\n  /**\n   * If the thread is WAITING, BLOCKED, or TIMED_WAITING, this field holds the\n   * monitor that is involved.\n   */\n  private monitor: Monitor = null;\n  private bsCl: ClassLoader.BootstrapClassLoader;\n  private tpool: ThreadPool<JVMThread>;\n  private jvmThreadObj: JVMTypes.java_lang_Thread;\n  private jvm: JVM;\n\n  /**\n   * Initializes a new JVM thread. Starts the thread in the NEW state.\n   */\n  constructor(jvm: JVM, tpool: ThreadPool<JVMThread>, threadObj: JVMTypes.java_lang_Thread) {\n    this.jvm = jvm;\n    this.bsCl = jvm.getBootstrapClassLoader();\n    this.tpool = tpool;\n    this.jvmThreadObj = threadObj;\n  }\n\n  /**\n   * Get the JVM thread object that represents this thread.\n   */\n  public getJVMObject(): JVMTypes.java_lang_Thread {\n    return this.jvmThreadObj;\n  }\n\n  /**\n   * Is this thread a daemon?\n   */\n  public isDaemon(): boolean {\n    return this.jvmThreadObj['java/lang/Thread/daemon'] !== 0;\n  }\n\n  /**\n   * Get the priority of this thread.\n   */\n  public getPriority(): number {\n    return this.jvmThreadObj['java/lang/Thread/priority'];\n  }\n\n  /**\n   * XXX: Used during bootstrapping to set the first thread's Thread object.\n   */\n  public setJVMObject(obj: JVMTypes.java_lang_Thread): void {\n    obj['java/lang/Thread/threadStatus'] = this.jvmThreadObj['java/lang/Thread/threadStatus'];\n    this.jvmThreadObj = obj;\n  }\n\n  /**\n   * Return the reference number for this thread.\n   */\n  public getRef(): number {\n    return this.jvmThreadObj.ref;\n  }\n\n  /**\n   * Check if this thread's interrupted flag is set.\n   */\n  public isInterrupted(): boolean {\n    return this.interrupted;\n  }\n\n  /**\n   * Returns the currently running method. Returns NULL if stack is empty.\n   */\n  public currentMethod(): methods.Method {\n    var stack = this.stack, idx = stack.length, method: methods.Method;\n    while (--idx >= 0) {\n      method = stack[idx].getStackTraceFrame().method;\n      if (method !== null) {\n        return method;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Set or unset this thread's interrupted flag.\n   */\n  public setInterrupted(interrupted: boolean): void {\n    this.interrupted = interrupted;\n  }\n\n  /**\n   * Retrieve the bootstrap classloader.\n   */\n  public getBsCl(): ClassLoader.BootstrapClassLoader {\n    return this.bsCl;\n  }\n\n  /**\n   * Get the classloader for the current frame.\n   */\n  public getLoader(): ClassLoader.ClassLoader {\n    let loader = this.stack[this.stack.length - 1].getLoader();\n    if (loader) {\n      return loader;\n    } else {\n      // Crawl stack until we find one.\n      let len = this.stack.length;\n      for (let i = 2; i <= len; i++) {\n        loader = this.stack[len - i].getLoader();\n        if (loader) {\n          return loader;\n        }\n      }\n      throw new Error(`Unable to find loader.`);\n    }\n  }\n\n  /**\n   * Imports & initializes the given Java class or classes. Returns the JavaScript\n   * object that represents the class -- e.g. contains static methods\n   * and fields.\n   *\n   * If multiple names are specified, it returns an array of class objects.\n   *\n   * If there is an error resolving or initializing any class, it will\n   * throw an exception without invoking your callback.\n   */\n  public import<T>(name: string, cb: (rv?: T) => void, explicit?: boolean): void;\n  public import<T>(names: string[], cb: (rv?: T) => void, explicit?: boolean): void;\n  public import<T>(names: string | string[], cb: (rv?: T) => void, explicit: boolean = true): void {\n    let loader = this.getLoader();\n    this.setStatus(ThreadStatus.ASYNC_WAITING);\n    if (Array.isArray(names)) {\n      let rv: ClassData.IJVMConstructor<any>[] = [];\n      util.asyncForEach(names, (name, nextItem) => {\n        this._import(name, loader, (cons) => {\n          rv.push(cons);\n          nextItem();\n        }, explicit);\n      }, (e?: any) => {\n        cb(<T> <any> rv);\n      });\n    } else {\n      this._import(names, loader, <any> cb, explicit);\n    }\n  }\n\n  private _import(name: string, loader: ClassLoader.ClassLoader, cb: (rv?: ClassData.IJVMConstructor<any>) => void, explicit: boolean): void {\n    let cls = <ClassData.ReferenceClassData<any>> loader.getInitializedClass(this, name);\n    if (cls) {\n      setImmediate(() => cb(cls.getConstructor(this)));\n    } else {\n      loader.initializeClass(this, name, (cdata: ClassData.ReferenceClassData<any>) => {\n        if (cdata) {\n          cb(cdata.getConstructor(this));\n        }\n      }, explicit);\n    }\n  }\n\n  /**\n   * Retrieve the JVM instantiation that this thread belongs to.\n   */\n  public getJVM(): JVM {\n    return this.jvm;\n  }\n\n  /**\n   * Retrieve the thread pool that this thread belongs to.\n   */\n  public getThreadPool(): ThreadPool<JVMThread> {\n    return this.tpool;\n  }\n\n  /**\n   * Retrieves the current stack trace.\n   */\n  public getStackTrace(): IStackTraceFrame[] {\n    var trace: IStackTraceFrame[] = [], i: number,\n      frame: IStackTraceFrame;\n    for (i = 0; i < this.stack.length; i++) {\n      frame = this.stack[i].getStackTraceFrame();\n      if (frame != null) {\n        trace.push(frame);\n      }\n    }\n    return trace;\n  }\n\n  /**\n   * [DEBUG] Return a printable string of the thread's current stack trace.\n   */\n  public getPrintableStackTrace(): string {\n    var rv: string = \"\";\n    this.getStackTrace().reverse().forEach((trace: IStackTraceFrame) => {\n      rv += `\\tat ${util.ext_classname(trace.method.cls.getInternalName())}::${trace.method.name}(`;\n      if (trace.pc >= 0) {\n        // Bytecode method\n        var code = trace.method.getCodeAttribute();\n        var table = <attributes.LineNumberTable> code.getAttribute('LineNumberTable');\n        var srcAttr = <attributes.SourceFile> trace.method.cls.getAttribute('SourceFile');\n        if (srcAttr != null) {\n          rv += srcAttr.filename;\n        } else {\n          rv += 'unknown';\n        }\n        if (table != null) {\n          var lineNumber = table.getLineNumber(trace.pc);\n          rv += `:${lineNumber}`;\n          rv += ` Bytecode offset: ${trace.pc}`;\n        }\n      } else {\n        // Native method.\n        rv += \"native\";\n      }\n      rv += \")\\n\";\n    });\n    return rv;\n  }\n\n  /**\n   * The thread's main execution loop. Everything starts here!\n   *\n   * SHOULD ONLY BE INVOKED BY THE SCHEDULER.\n   */\n  public run(): void {\n    var stack = this.stack,\n      startTime: number = (new Date()).getTime();\n\n    // Reset counter. Threads always start from a fresh stack / yield.\n    methodResumesLeft = maxMethodResumes;\n    while (this.status === ThreadStatus.RUNNABLE && stack.length > 0) {\n      const sf = stack[stack.length - 1];\n      if (!RELEASE) {\n        if (sf.type === enums.StackFrameType.BYTECODE && this.jvm.shouldVtrace((<BytecodeStackFrame> sf).method.fullSignature)) {\n          var oldLevel = logging.log_level;\n          logging.log_level = logging.VTRACE;\n          sf.run(this);\n          logging.log_level = oldLevel;\n        } else {\n          sf.run(this);\n        }\n      } else {\n        sf.run(this);\n      }\n      if (--methodResumesLeft === 0) {\n        const endTime = (new Date()).getTime();\n        const duration = endTime - startTime;\n        // Estimated number of methods we can resume before needing to yield.\n        const estMaxMethodResumes = ((maxMethodResumes / duration) * this.jvm.getResponsiveness()) | 0;\n        // Update CMA.\n        maxMethodResumes = ((estMaxMethodResumes + numSamples * maxMethodResumes) / (numSamples + 1)) | 0;\n        if (maxMethodResumes <= 0) {\n          // Sanity check. Should never really occur.\n          maxMethodResumes = 10;\n        }\n        vtrace(`T${this.getRef()} Quantum over. Method resumes: Max ${maxMethodResumes} Est ${estMaxMethodResumes} Samples ${numSamples}`);\n        numSamples++;\n        // Tell the scheduler that our quantum is over.\n        this.tpool.quantumOver(this);\n        // Break out of while loop.\n        break;\n      }\n    }\n\n    if (stack.length === 0) {\n      // This thread has finished!\n      this.setStatus(ThreadStatus.TERMINATED);\n    }\n  }\n\n  /**\n   * [DEBUG] Performs a sanity check on the thread.\n   */\n  private sanityCheck(): boolean {\n    switch (this.status) {\n      case ThreadStatus.NEW:\n        return true;\n      case ThreadStatus.RUNNABLE:\n        assert(this.stack.length > 0, 'A runnable thread must not have an empty stack.');\n        return true;\n      case ThreadStatus.TIMED_WAITING:\n        assert(this.monitor != null && this.monitor.isTimedWaiting(this), 'A timed waiting thread must be waiting on a monitor.');\n        return true;\n      case ThreadStatus.WAITING:\n        assert(this.monitor != null && this.monitor.isWaiting(this), \"A waiting thread must be waiting on a monitor.\");\n        return true;\n      case ThreadStatus.BLOCKED:\n      case ThreadStatus.UNINTERRUPTABLY_BLOCKED:\n        assert(this.monitor != null && this.monitor.isBlocked(this), \"A blocked thread must be blocked on a monitor\");\n        return true;\n      case ThreadStatus.ASYNC_WAITING:\n        return true;\n      case ThreadStatus.TERMINATED:\n        assert(this.stack.length === 0, \"A terminated thread must have an empty stack.\");\n        return true;\n      case ThreadStatus.PARKED:\n        assert(this.jvm.getParker().isParked(this), \"A parked thread must be parked.\");\n        return true;\n      default:\n        // Invalid ThreadStatus.\n        return false;\n    }\n  }\n\n  /**\n   * Should only be called by setStatus.\n   * Updates both the JVMThread object and this object.\n   */\n  private rawSetStatus(newStatus: ThreadStatus): void {\n    var jvmNewStatus: number = 0, oldStatus = this.status;\n\n    if (logging.log_level === logging.VTRACE) {\n      vtrace(`\\nT${this.getRef()} ${ThreadStatus[oldStatus]} => ${ThreadStatus[newStatus]}`);\n    }\n    assert(validateThreadTransition(oldStatus, newStatus), `Invalid thread transition: ${ThreadStatus[oldStatus]} => ${ThreadStatus[newStatus]}`);\n\n    this.status = newStatus;\n    // Map our status value back to JVM's threadStatus value.\n    // Ensures that JVM code can introspect on our threads.\n    switch (newStatus) {\n      case ThreadStatus.NEW:\n        jvmNewStatus |= enums.JVMTIThreadState.ALIVE;\n        break;\n      case ThreadStatus.RUNNABLE:\n        jvmNewStatus |= enums.JVMTIThreadState.RUNNABLE;\n        break;\n      case ThreadStatus.BLOCKED:\n      case ThreadStatus.UNINTERRUPTABLY_BLOCKED:\n        jvmNewStatus |= enums.JVMTIThreadState.BLOCKED_ON_MONITOR_ENTER;\n        break;\n      case ThreadStatus.WAITING:\n      case ThreadStatus.ASYNC_WAITING:\n      case ThreadStatus.PARKED:\n        jvmNewStatus |= enums.JVMTIThreadState.WAITING_INDEFINITELY;\n        break;\n      case ThreadStatus.TIMED_WAITING:\n        jvmNewStatus |= enums.JVMTIThreadState.WAITING_WITH_TIMEOUT;\n        break;\n      case ThreadStatus.TERMINATED:\n        jvmNewStatus |= enums.JVMTIThreadState.TERMINATED;\n        break;\n      default:\n        jvmNewStatus = enums.JVMTIThreadState.RUNNABLE;\n        break;\n    }\n\n    this.jvmThreadObj['java/lang/Thread/threadStatus'] = jvmNewStatus;\n    this.tpool.statusChange(this, oldStatus, this.status);\n  }\n\n  /**\n   * Transitions the thread from one state to the next.\n   * Contains JVM-specific thread logic.\n   */\n  public setStatus(status: ThreadStatus, monitor: Monitor = null): void {\n    if (this.status !== status) {\n      let oldStatus = this.status;\n\n      // Update the monitor.\n      this.monitor = monitor;\n\n      if (status !== ThreadStatus.TERMINATED) {\n        // Actually change state.\n        this.rawSetStatus(status);\n      } else {\n        // Call exit() first.\n        this.exit();\n      }\n\n      // Validate current state (debug builds only)\n      assert(this.sanityCheck(), `Invalid thread status.`);\n    }\n  }\n\n  /**\n   * Called when a thread finishes executing.\n   */\n  private exit(): void {\n    var monitor: Monitor = this.jvmThreadObj.getMonitor();\n    if (monitor.isBlocked(this) || monitor.getOwner() === this || this.status === ThreadStatus.TERMINATED) {\n      // Thread is already shutting down.\n      return;\n    }\n\n    if (this.stack.length === 0) {\n      // De-schedule thread.\n      this.setStatus(ThreadStatus.ASYNC_WAITING);\n      // Only applicable if it's not an early death, e.g. before VM bootup.\n      if (this.jvm.hasVMBooted()) {\n        trace(`T${this.getRef()} Exiting.`);\n        var phase2 = () => {\n            trace(`T${this.getRef()} Entered exit monitor.`);\n            // Exit.\n            this.jvmThreadObj[\"exit()V\"](this, null, (e?) => {\n              // Notify everyone.\n              monitor.notifyAll(this);\n              // Exit monitor.\n              monitor.exit(this);\n              trace(`T${this.getRef()} Terminated.`);\n              // Actually become terminated.\n              this.rawSetStatus(ThreadStatus.TERMINATED);\n            });\n          };\n\n        // Acquire the monitor associated with our JavaObject.\n        if (monitor.enter(this, phase2)) {\n          phase2();\n        }\n      } else {\n        trace(`T${this.getRef()} Not exiting; VM is still booting.`);\n      }\n    } else {\n      // There are things on the stack. This exit is occuring before the stack has emptied.\n      // Clear the stack, set to terminated.\n      while (this.stack.length > 0) {\n        this.stack.pop();\n      }\n      trace(`T${this.getRef()} Terminated.`);\n      this.rawSetStatus(ThreadStatus.TERMINATED);\n    }\n  }\n\n  /**\n   * Called when the priority of the thread changes.\n   * Should only be called by java.lang.setPriority0.\n   */\n  public signalPriorityChange(): void {\n    this.tpool.priorityChange(this);\n  }\n\n  /**\n   * Get the monitor that this thread is waiting or blocked on.\n   */\n  public getMonitorBlock(): Monitor {\n    return this.monitor;\n  }\n\n  /**\n   * Get the thread's current state.\n   */\n  public getStatus(): ThreadStatus {\n    return this.status;\n  }\n\n  /**\n   * Returns from the currently executing method with the given return value.\n   * Used by asynchronous native methods.\n   *\n   * Causes the following state transition:\n   * * RUNNING => RUNNABLE\n   * * RUNNABLE => RUNNABLE\n   * * ASYNC_WAITING => RUNNABLE\n   *\n   * It is not valid to call this method if the thread is in any other state.\n   */\n  public asyncReturn(): void;\n  public asyncReturn(rv: number): void;\n  public asyncReturn(rv: JVMTypes.java_lang_Object): void;\n  public asyncReturn(rv: number, rv2: any): void;\n  public asyncReturn(rv: gLong, rv2: any): void;\n  public asyncReturn(rv?: any, rv2?: any): void {\n    var stack = this.stack;\n    assert(this.status === ThreadStatus.RUNNABLE || this.status === ThreadStatus.ASYNC_WAITING);\n    assert(typeof (rv) !== 'boolean' && rv2 == null);\n    // Pop off the current method.\n    var frame = stack.pop();\n    if (frame.type != enums.StackFrameType.INTERNAL) {\n      var frameCast = <BytecodeStackFrame> frame;\n      if (frame.type === enums.StackFrameType.BYTECODE) {\n        // This line will be preceded by a line that prints the method, so can be short n' sweet.\n        trace(`  Returning: ${logging.debug_var(rv)}`);\n      }\n\n      trace(`\\nT${this.getRef()} D${this.getStackTrace().length + 1} Returning value from ${frameCast.method.getFullSignature()} [${frameCast.method.accessFlags.isNative() ? 'Native' : 'Bytecode'}]: ${logging.debug_var(rv)}`);\n      assert(validateReturnValue(this, frameCast.method,\n        frameCast.method.returnType, this.bsCl,\n        frameCast.method.cls.getLoader(), rv, rv2), `Invalid return value for method ${frameCast.method.getFullSignature()}`);\n    }\n    // Tell the top of the stack that this RV is waiting for it.\n    var idx: number = stack.length - 1;\n    // If idx is 0, then the thread will TERMINATE next time it enters its main\n    // loop.\n    if (idx >= 0) {\n      stack[idx].scheduleResume(this, rv, rv2);\n    }\n\n    // Thread state transition.\n    this.setStatus(ThreadStatus.RUNNABLE);\n  }\n\n  /**\n   * Pops the top stackframe off of the call stack.\n   * WARNING: SHOULD ONLY BE CALLED BY InternalStackFrame.run()!\n   */\n  public framePop(): void {\n    this.stack.pop();\n  }\n\n  /**\n   * Throws the given JVM exception. Causes the thread to unwind the stack until\n   * it can find a stack frame that can handle the exception.\n   *\n   * Causes the following state transition:\n   * * RUNNING => RUNNABLE\n   * * RUNNABLE => RUNNABLE\n   * * ASYNC_WAITING => RUNNABLE\n   *\n   * Or, if the exception is uncaught, one of the following transitions:\n   * * RUNNING => TERMINATED\n   * * RUNNABLE => TERMINATED\n   * * ASYNC_WAITING => TERMINATED\n   *\n   * It is not valid to call this method if the thread is in any other state.\n   */\n  public throwException(exception: JVMTypes.java_lang_Throwable): void {\n    assert(this.status === ThreadStatus.RUNNABLE || this.status === ThreadStatus.ASYNC_WAITING,\n      `Tried to throw exception while thread was in state ${ThreadStatus[this.status]}`);\n    var stack = this.stack, idx: number = stack.length - 1;\n\n    // Stack may actually be empty, so guard against this.\n    if (idx >= 0) {\n      // An internal stack frame cannot process its own thrown exception.\n      if (stack[idx].type === enums.StackFrameType.INTERNAL) {\n        stack.pop();\n        idx--;\n      }\n\n      // Find a stack frame that can handle the exception.\n      // Set our status *before* scheduling the exception. Some exception handlers\n      // may want to do something asynchronous before resuming execution.\n      this.setStatus(ThreadStatus.RUNNABLE);\n      while (stack.length > 0 && !stack[idx].scheduleException(this, exception)) {\n        stack.pop();\n        idx--;\n      }\n    }\n\n    if (stack.length === 0) {\n      // Uncaught exception!\n      this.handleUncaughtException(exception);\n    }\n  }\n\n  /**\n   * Construct a new exception object of the given class with the given message.\n   * Convenience function for native JavaScript code.\n   * @param clsName Name of the class (e.g. \"Ljava/lang/Throwable;\")\n   * @param msg The message to include with the exception.\n   */\n  public throwNewException<T extends JVMTypes.java_lang_Throwable>(clsName: string, msg: string) {\n    var cls = <ClassData.ReferenceClassData<T>> this.bsCl.getInitializedClass(this, clsName),\n      throwException = () => {\n        var eCons = cls.getConstructor(this),\n          e = new eCons(this);\n\n        // Construct the exception, and throw it when done.\n        e['<init>(Ljava/lang/String;)V'](this, [util.initString(this.bsCl, msg)], (err?: JVMTypes.java_lang_Throwable) => {\n          if (err) {\n            this.throwException(err);\n          } else {\n            this.throwException(e);\n          }\n        });\n      };\n    if (cls != null) {\n      // No initialization required.\n      throwException();\n    } else {\n      // Initialization required.\n      this.setStatus(ThreadStatus.ASYNC_WAITING);\n      this.bsCl.initializeClass(this, clsName, (cdata: ClassData.ReferenceClassData<T>) => {\n        if (cdata != null) {\n          cls = cdata;\n          throwException();\n        }\n      }, false);\n    }\n  }\n\n  /**\n   * Handles an uncaught exception on a thread.\n   */\n  public handleUncaughtException(exception: JVMTypes.java_lang_Throwable) {\n    this.jvmThreadObj['dispatchUncaughtException(Ljava/lang/Throwable;)V'](this, [exception]);\n  }\n\n  public close() {\n    this.jvm = null;\n  }\n}\n\n/**\n * [DEBUG] Stores all of the valid thread transitions.\n * @todo Any way to make this smaller?\n * @todo Move into 'debug' module that we NOP out in release builds.\n */\nexport var validTransitions: { [oldStatus: number]: { [newStatus: number]: string } } = {};\nvalidTransitions[ThreadStatus.NEW] = {};\nvalidTransitions[ThreadStatus.NEW][ThreadStatus.RUNNABLE] = \"RunMethod invoked on new thread\";\nvalidTransitions[ThreadStatus.NEW][ThreadStatus.ASYNC_WAITING] = \"[JVM bootup only] Internal operation occurs on new thread\";\nvalidTransitions[ThreadStatus.NEW][ThreadStatus.TERMINATED] = \"[JVM halt0 only] When the JVM shuts down, it terminates all threads, including those that have never been run.\";\nvalidTransitions[ThreadStatus.ASYNC_WAITING] = {};\nvalidTransitions[ThreadStatus.ASYNC_WAITING][ThreadStatus.RUNNABLE] = \"Async operation completes\";\nvalidTransitions[ThreadStatus.ASYNC_WAITING][ThreadStatus.TERMINATED] = \"RunMethod completes and callstack is empty\";\nvalidTransitions[ThreadStatus.BLOCKED] = {};\nvalidTransitions[ThreadStatus.BLOCKED][ThreadStatus.RUNNABLE] = \"Acquires monitor, or is interrupted\";\nvalidTransitions[ThreadStatus.BLOCKED][ThreadStatus.TERMINATED] = \"Thread is terminated whilst blocked.\";\nvalidTransitions[ThreadStatus.PARKED] = {};\nvalidTransitions[ThreadStatus.PARKED][ThreadStatus.ASYNC_WAITING] = \"Balancing unpark, or is interrupted\";\nvalidTransitions[ThreadStatus.PARKED][ThreadStatus.TERMINATED] = \"Thread is terminated whilst parked.\";\nvalidTransitions[ThreadStatus.RUNNABLE] = {};\nvalidTransitions[ThreadStatus.RUNNABLE][ThreadStatus.ASYNC_WAITING] = \"Thread performs an asynchronous JavaScript operation\";\nvalidTransitions[ThreadStatus.RUNNABLE][ThreadStatus.TERMINATED] = \"Callstack is empty\";\nvalidTransitions[ThreadStatus.RUNNABLE][ThreadStatus.BLOCKED] = \"Thread waits to acquire monitor\";\nvalidTransitions[ThreadStatus.RUNNABLE][ThreadStatus.WAITING] = \"Thread waits on monitor (Object.wait)\";\nvalidTransitions[ThreadStatus.RUNNABLE][ThreadStatus.TIMED_WAITING] = \"Thread waits on monitor with timeout (Object.wait)\";\nvalidTransitions[ThreadStatus.RUNNABLE][ThreadStatus.PARKED] = \"Thread parks itself\";\nvalidTransitions[ThreadStatus.TERMINATED] = {};\nvalidTransitions[ThreadStatus.TERMINATED][ThreadStatus.NEW] = \"Thread is resurrected for re-use\";\nvalidTransitions[ThreadStatus.TERMINATED][ThreadStatus.RUNNABLE] = \"Thread is resurrected for re-use\";\nvalidTransitions[ThreadStatus.TERMINATED][ThreadStatus.ASYNC_WAITING] = \"[JVM Bootup] Thread is resurrected for internal operation\";\nvalidTransitions[ThreadStatus.TIMED_WAITING] = {};\nvalidTransitions[ThreadStatus.TIMED_WAITING][ThreadStatus.RUNNABLE] = \"Timer expires, or thread is interrupted, and thread immediately acquires lock\";\nvalidTransitions[ThreadStatus.TIMED_WAITING][ThreadStatus.UNINTERRUPTABLY_BLOCKED] = \"Thread is interrupted or notified, or timer expires, and lock already owned\";\nvalidTransitions[ThreadStatus.TIMED_WAITING][ThreadStatus.TERMINATED] = \"Thread is terminated whilst waiting.\";\nvalidTransitions[ThreadStatus.UNINTERRUPTABLY_BLOCKED] = {};\nvalidTransitions[ThreadStatus.UNINTERRUPTABLY_BLOCKED][ThreadStatus.RUNNABLE] = \"Thread acquires monitor\";\nvalidTransitions[ThreadStatus.UNINTERRUPTABLY_BLOCKED][ThreadStatus.TERMINATED] = \"Thread is terminated whilst blocked.\";\nvalidTransitions[ThreadStatus.WAITING] = {};\nvalidTransitions[ThreadStatus.WAITING][ThreadStatus.RUNNABLE] = \"Thread is interrupted, and immediately acquires lock\";\nvalidTransitions[ThreadStatus.WAITING][ThreadStatus.UNINTERRUPTABLY_BLOCKED] = \"Thread is notified or interrupted, and does not immediately acquire lock\";\nvalidTransitions[ThreadStatus.WAITING][ThreadStatus.TERMINATED] = \"Thread is terminated whilst waiting.\";\n\n/**\n * [DEBUG] Ensures that a thread transition is legal.\n */\nfunction validateThreadTransition(oldStatus: ThreadStatus, newStatus: ThreadStatus): boolean {\n  var rv = validTransitions.hasOwnProperty(\"\" + oldStatus) &&\n    validTransitions[oldStatus].hasOwnProperty(\"\" + newStatus);\n  return rv;\n}\n\n/**\n * [DEBUG] Asserts that the return value of the function passes basic sanity\n * checks.\n */\nfunction validateReturnValue(thread: JVMThread, method: methods.Method, returnType: string, bsCl: ClassLoader.BootstrapClassLoader, cl: ClassLoader.ClassLoader, rv1: any, rv2: any): boolean {\n  // invokeBasic is typed with an Object return value, but it can return any\n  // damn type it wants, primitive or no.\n  if (method.fullSignature === \"java/lang/invoke/MethodHandle/invokeBasic([Ljava/lang/Object;)Ljava/lang/Object;\") {\n    return true;\n  }\n\n  var cls: ClassData.ClassData;\n  if (util.is_primitive_type(returnType)) {\n    switch (returnType) {\n      case 'Z': // Boolean\n        assert(rv2 === undefined, \"Second return value must be undefined for Boolean type.\");\n        assert(rv1 === 1 || rv1 === 0, \"Booleans must be 0 or 1.\");\n        break;\n      case 'B': // Byte\n        assert(rv2 === undefined, \"Second return value must be undefined for Byte type.\");\n        assert(rv1 <= 127 && rv1 >= -128, `Byte value for method ${method.name} is out of bounds: ${rv1}`);\n        break;\n      case 'C':\n        assert(rv2 === undefined, \"Second return value must be undefined for Character type.\");\n        assert(rv1 <= 65535 && rv1 >= 0, `Character value is out of bounds: ${rv1}`);\n        break;\n      case 'S':\n        assert(rv2 === undefined, \"Second return value must be undefined for Short type.\");\n        assert(rv1 <= 32767 && rv1 >= -32768, `Short value is out of bounds: ${rv1}`);\n        break;\n      case 'I': // int\n        assert(rv2 === undefined, \"Second return value must be undefined for Int type.\");\n        assert(rv1 <= 2147483647 && rv1 >= -2147483648, `Int value is out of bounds: ${rv1}`);\n        break;\n      case 'J': // long //-9223372036854775808 to 9223372036854775807\n        assert(rv2 === null, \"Second return value must be NULL for Long type.\");\n        assert((<gLong> rv1).lessThanOrEqual(gLong.MAX_VALUE) && (<gLong> rv1).greaterThanOrEqual(gLong.MIN_VALUE), `Long value is out of bounds: ${rv1}`);\n        break;\n      case 'F': // Float\n        assert(rv2 === undefined, \"Second return value must be undefined for Float type.\");\n        // NaN !== NaN, so we have to have a special case here.\n        assert(util.wrapFloat(rv1) === rv1 || (isNaN(rv1) && isNaN(util.wrapFloat(rv1))), `Float value is out of bounds: ${rv1}`);\n        break;\n      case 'D': // Double\n        assert(rv2 === null, \"Second return value must be NULL for Double type.\");\n        assert(typeof rv1 === 'number', `Invalid double value: ${rv1}`);\n        break;\n      case 'V':\n        assert(rv1 === undefined && rv2 === undefined, \"Return values must be undefined for Void type\");\n        break;\n    }\n  } else if (util.is_array_type(returnType)) {\n    assert(rv2 === undefined, \"Second return value must be undefined for array type.\");\n    assert(rv1 === null || (typeof rv1 === 'object' && typeof rv1['getClass'] === 'function'), `Invalid array object: ${rv1}`);\n    if (rv1 != null) {\n      cls = assertClassInitializedOrResolved(thread, cl, returnType, true);\n      assert(rv1.getClass().isCastable(cls), `Return value of type ${rv1.getClass().getInternalName()} unable to be cast to return type ${returnType}.`);\n    }\n  } else {\n    assert(util.is_reference_type(returnType), `Invalid reference type: ${returnType}`);\n    assert(rv2 === undefined, `Second return value must be undefined for reference type.`);\n    // All objects and arrays are instances of java/lang/Object.\n    assert(rv1 === null || rv1 instanceof (<ClassData.ReferenceClassData<JVMTypes.java_lang_Object>> bsCl.getInitializedClass(thread, 'Ljava/lang/Object;')).getConstructor(thread), `Reference return type must be an instance of Object; value: ${rv1}`);\n    if (rv1 != null) {\n      cls = assertClassInitializedOrResolved(thread, cl, returnType, false);\n      if (!cls.accessFlags.isInterface()) {\n        // You can return an interface type without initializing it,\n        // since they don't need to be initialized until you try to\n        // invoke one of their methods.\n        // NOTE: We don't check if the class is in the INITIALIZED state,\n        // since it is possible that it is currently in the process of being\n        // initialized. getInitializedClass handles this subtlety.\n        assertClassInitializedOrResolved(thread, cl, returnType, true);\n      }\n      assert(rv1.getClass().isCastable(cls), `Unable to cast ${rv1.getClass().getInternalName()} to ${returnType}.`);\n    }\n  }\n  return true;\n}\n\nfunction assertClassInitializedOrResolved(thread: JVMThread, cl: ClassLoader.ClassLoader, type: string, initialized: boolean): ClassData.ClassData {\n  var cls: ClassData.ClassData = null;\n  // Break out of loop once class is found.\n  while (cls === null) {\n    cls = initialized ? cl.getInitializedClass(thread, type) : cl.getResolvedClass(type);\n    if (cl.getLoaderObject() !== null) {\n      if (cl.getLoaderObject()['java/lang/ClassLoader/parent'] === null) {\n        cl = thread.getBsCl();\n      } else {\n        cl = cl.getLoaderObject()['java/lang/ClassLoader/parent'].$loader;\n      }\n    } else {\n      // We just checked the bootstrap classloader, so we reached the root.\n      assert(cls !== null, `Unable to get initialized class for type ${type}.`);\n    }\n  }\n  return cls;\n}\n\nfunction printConstantPoolItem(cpi: ConstantPool.IConstantPoolItem): string {\n  switch (cpi.getType()) {\n    case enums.ConstantPoolItemType.METHODREF:\n      var cpiMR = <ConstantPool.MethodReference> cpi;\n      return util.ext_classname(cpiMR.classInfo.name) + \".\" + cpiMR.signature;\n    case enums.ConstantPoolItemType.INTERFACE_METHODREF:\n      var cpiIM = <ConstantPool.InterfaceMethodReference> cpi;\n      return util.ext_classname(cpiIM.classInfo.name) + \".\" + cpiIM.signature;\n    case enums.ConstantPoolItemType.FIELDREF:\n      var cpiFR = <ConstantPool.FieldReference> cpi;\n      return util.ext_classname(cpiFR.classInfo.name) + \".\" + cpiFR.nameAndTypeInfo.name + \":\" + util.ext_classname(cpiFR.nameAndTypeInfo.descriptor);\n    case enums.ConstantPoolItemType.NAME_AND_TYPE:\n      var cpiNAT = <ConstantPool.NameAndTypeInfo> cpi;\n      return cpiNAT.name + \":\" + cpiNAT.descriptor;\n    case enums.ConstantPoolItemType.CLASS:\n      var cpiClass = <ConstantPool.ClassReference> cpi;\n      return util.ext_classname(cpiClass.name);\n    default:\n      return logging.debug_var((<any> cpi).value);\n  }\n}\n\n// TODO: Prefix behind DEBUG, cache lowercase opcode names.\nexport var OpcodeLayoutPrinters: {[layoutAtom: number]: (method: methods.Method, code: NodeBuffer, pc: number) => string} = {};\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.OPCODE_ONLY] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase();\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.CONSTANT_POOL] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + printConstantPoolItem(method.cls.constantPool.get(code.readUInt16BE(pc + 1)));\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.CONSTANT_POOL_UINT8] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + printConstantPoolItem(method.cls.constantPool.get(code.readUInt8(pc + 1)));\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.CONSTANT_POOL_AND_UINT8_VALUE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + printConstantPoolItem(method.cls.constantPool.get(code.readUInt16BE(pc + 1))) + \" \" + code.readUInt8(pc + 3);\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.UINT8_VALUE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + code.readUInt8(pc + 1);\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.UINT8_AND_INT8_VALUE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + code.readUInt8(pc + 1) + \" \" + code.readInt8(pc + 2);\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.INT8_VALUE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + code.readInt8(pc + 1);\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.INT16_VALUE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + code.readInt16BE(pc + 1);\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.INT32_VALUE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + code.readInt32BE(pc + 1);\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.ARRAY_TYPE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase() + \" \" + opcodes.ArrayTypes[code.readUInt8(pc + 1)];\nOpcodeLayoutPrinters[enums.OpcodeLayoutType.WIDE] = (method: methods.Method, code: NodeBuffer, pc: number) => enums.OpCode[code.readUInt8(pc)].toLowerCase();\n\nexport function annotateOpcode(op: number, method: methods.Method, code: NodeBuffer, pc: number): string {\n  return OpcodeLayoutPrinters[enums.OpcodeLayouts[op]](method, code, pc);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/threading.ts\n **/","/**\n * Contains JVM opcode implementations for the JVM interpreter.\n */\n// We use snake case for the opcode names so they match the JVM spec.\n// As for typedef:memberVariableDeclarator, we disable this so we can have\n// member variable opcodes without explicitly typing them as IOpcodeImplementation.\n/* tslint:disable:variable-name typedef:memberVariableDeclarator */\n\"use strict\";\nimport gLong = require('./gLong');\nimport util = require('./util');\nimport ConstantPool = require('./ConstantPool');\nimport ClassData = require('./ClassData');\nimport threading = require('./threading');\nimport ClassLoader = require('./ClassLoader');\nimport enums = require('./enums');\nimport assert = require('./assert');\nimport methods = require('./methods');\nimport JVMTypes = require('../includes/JVMTypes');\n\n/**\n * Interface for individual opcode implementations.\n */\nexport interface IOpcodeImplementation {\n  (thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code?: Buffer): void;\n}\n\n/**\n * Helper function: Checks if object is null. Throws a NullPointerException\n * if it is.\n * @return True if the object is null.\n */\nexport function isNull(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, obj: any): boolean {\n  if (obj == null) {\n    throwException(thread, frame, 'Ljava/lang/NullPointerException;', '');\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper function: Pops off two items, returns the second.\n */\nexport function pop2(opStack: any[]): any {\n  // Ignore NULL.\n  opStack.pop();\n  return opStack.pop();\n}\n\nexport function resolveCPItem(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, cpItem: ConstantPool.IConstantPoolItem): void {\n  thread.setStatus(enums.ThreadStatus.ASYNC_WAITING);\n  cpItem.resolve(thread, frame.getLoader(), frame.method.cls, (status: boolean) => {\n    if (status) {\n      thread.setStatus(enums.ThreadStatus.RUNNABLE);\n    }\n  }, false);\n  frame.returnToThreadLoop = true;\n}\n\nexport function initializeClassFromClass(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, cls: ClassData.ClassData): void {\n  thread.setStatus(enums.ThreadStatus.ASYNC_WAITING);\n  cls.initialize(thread, (cdata: ClassData.ClassData) => {\n    if (cdata != null) {\n      thread.setStatus(enums.ThreadStatus.RUNNABLE);\n    }\n  }, false);\n  frame.returnToThreadLoop = true;\n}\n\n/**\n * Helper function: Pauses the thread and initializes a class.\n */\nexport function initializeClass(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, clsRef: ConstantPool.ClassReference): void {\n  thread.setStatus(enums.ThreadStatus.ASYNC_WAITING);\n\n  function initialize(cls: ClassData.ClassData) {\n    cls.initialize(thread, (cdata: ClassData.ClassData) => {\n      if (cdata != null) {\n        thread.setStatus(enums.ThreadStatus.RUNNABLE);\n      }\n    });\n  }\n\n  if (!clsRef.isResolved()) {\n    clsRef.resolve(thread, frame.getLoader(), frame.method.cls, (status: boolean) => {\n      if (status) {\n        initialize(clsRef.cls);\n      }\n    }, false);\n  } else {\n    initialize(clsRef.cls);\n  }\n  frame.returnToThreadLoop = true;\n}\n\n/**\n * Interrupts the current method's execution and throws an exception.\n *\n * NOTE: This does *not* interrupt JavaScript control flow, so any opcode\n * calling this function must *return* and not do anything else.\n */\nexport function throwException<T extends JVMTypes.java_lang_Throwable>(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, clsName: string, msg: string): void {\n  thread.throwNewException<T>(clsName, msg);\n  frame.returnToThreadLoop = true;\n}\n\nexport var ArrayTypes : {[t: number]: string; } = {\n  4: 'Z', 5: 'C', 6: 'F', 7: 'D', 8: 'B', 9: 'S', 10: 'I', 11: 'J'\n};\n\n/**\n * Contains definitions for all JVM opcodes.\n */\nexport class Opcodes {\n  /* 32-bit array load opcodes */\n\n  /**\n   * 32-bit array load opcode\n   */\n  private static _aload_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      idx = opStack.pop(),\n      obj = <JVMTypes.JVMArray<any>> opStack.pop();\n    if (!isNull(thread, frame, obj)) {\n      var len = obj.array.length;\n      if (idx < 0 || idx >= len) {\n        throwException(thread, frame, 'Ljava/lang/ArrayIndexOutOfBoundsException;', `${idx} not in length ${len} array of type ${obj.getClass().getInternalName()}`);\n      } else {\n        opStack.push(obj.array[idx]);\n        frame.pc++;\n      }\n    }\n    // 'obj' is NULL. isNull threw an exception for us.\n  }\n\n  public static iaload = Opcodes._aload_32;\n  public static faload = Opcodes._aload_32;\n  public static aaload = Opcodes._aload_32;\n  public static baload = Opcodes._aload_32;\n  public static caload = Opcodes._aload_32;\n  public static saload = Opcodes._aload_32;\n\n  /* 64-bit array load opcodes */\n\n  /**\n   * 64-bit array load opcode.\n   */\n  private static _aload_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      idx = opStack.pop(),\n      obj = <JVMTypes.JVMArray<any>> opStack.pop();\n    if (!isNull(thread, frame, obj)) {\n      var len = obj.array.length;\n      if (idx < 0 || idx >= len) {\n        throwException(thread, frame, 'Ljava/lang/ArrayIndexOutOfBoundsException;', `${idx} not in length ${len} array of type ${obj.getClass().getInternalName()}`);\n      } else {\n        opStack.push(obj.array[idx]);\n        // 64-bit value.\n        opStack.push(null);\n        frame.pc++;\n      }\n    }\n    // 'obj' is NULL. isNull threw an exception for us.\n  }\n\n  public static daload = Opcodes._aload_64;\n  public static laload = Opcodes._aload_64;\n\n  /* 32-bit array store opcodes */\n\n  /**\n   * 32-bit array store.\n   * @private\n   */\n  private static _astore_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      value = opStack.pop(),\n      idx = opStack.pop(),\n      obj = <JVMTypes.JVMArray<any>> opStack.pop();\n    if (!isNull(thread, frame, obj)) {\n      var len = obj.array.length;\n      if (idx < 0 || idx >= len) {\n        throwException(thread, frame, 'Ljava/lang/ArrayIndexOutOfBoundsException;', `${idx} not in length ${len} array of type ${obj.getClass().getInternalName()}`);\n      } else {\n        obj.array[idx] = value;\n        frame.pc++;\n      }\n    }\n    // 'obj' is NULL. isNull threw an exception for us.\n  }\n\n  public static iastore = Opcodes._astore_32;\n  public static fastore = Opcodes._astore_32;\n  public static aastore = Opcodes._astore_32;\n  public static bastore = Opcodes._astore_32;\n  public static castore = Opcodes._astore_32;\n  public static sastore = Opcodes._astore_32;\n\n  /* 64-bit array store opcodes */\n\n  /**\n   * 64-bit array store.\n   * @private\n   */\n  private static _astore_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      value = opStack.pop2(),\n      idx = opStack.pop(),\n      obj = <JVMTypes.JVMArray<any>> opStack.pop();\n    if (!isNull(thread, frame, obj)) {\n      var len = obj.array.length;\n      if (idx < 0 || idx >= len) {\n        throwException(thread, frame, 'Ljava/lang/ArrayIndexOutOfBoundsException;', `${idx} not in length ${len} array of type ${obj.getClass().getInternalName()}`);\n      } else {\n        obj.array[idx] = value;\n        frame.pc++;\n      }\n    }\n    // 'obj' is NULL. isNull threw an exception for us.\n  }\n\n  public static lastore = Opcodes._astore_64;\n  public static dastore = Opcodes._astore_64;\n\n  /* 32-bit constants */\n  public static aconst_null(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(null);\n    frame.pc++;\n  }\n\n  private static _const_0_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(0);\n    frame.pc++;\n  }\n\n  private static _const_1_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(1);\n    frame.pc++;\n  }\n\n  private static _const_2_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(2);\n    frame.pc++;\n  }\n\n  public static iconst_m1(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(-1);\n    frame.pc++;\n  }\n\n  public static iconst_0 = Opcodes._const_0_32;\n  public static iconst_1 = Opcodes._const_1_32;\n  public static iconst_2 = Opcodes._const_2_32;\n\n  public static iconst_3(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(3);\n    frame.pc++;\n  }\n\n  public static iconst_4(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(4);\n    frame.pc++;\n  }\n\n  public static iconst_5(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(5);\n    frame.pc++;\n  }\n\n  public static fconst_0 = Opcodes._const_0_32;\n  public static fconst_1 = Opcodes._const_1_32;\n  public static fconst_2 = Opcodes._const_2_32;\n\n  /* 64-bit constants */\n  public static lconst_0(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(gLong.ZERO);\n    frame.pc++;\n  }\n\n  public static lconst_1(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(gLong.ONE);\n    frame.pc++;\n  }\n\n  public static dconst_0(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(0);\n    frame.pc++;\n  }\n\n  public static dconst_1(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(1);\n    frame.pc++;\n  }\n\n  /* 32-bit load opcodes */\n  private static _load_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.opStack.push(frame.locals[code.readUInt8(pc + 1)]);\n    frame.pc += 2;\n  }\n\n  private static _load_0_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(frame.locals[0]);\n    frame.pc++;\n  }\n\n  private static _load_1_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(frame.locals[1]);\n    frame.pc++;\n  }\n\n  private static _load_2_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(frame.locals[2]);\n    frame.pc++;\n  }\n\n  private static _load_3_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(frame.locals[3]);\n    frame.pc++;\n  }\n\n  public static iload = Opcodes._load_32;\n  public static iload_0 = Opcodes._load_0_32;\n  public static iload_1 = Opcodes._load_1_32;\n  public static iload_2 = Opcodes._load_2_32;\n  public static iload_3 = Opcodes._load_3_32;\n  public static fload = Opcodes._load_32;\n  public static fload_0 = Opcodes._load_0_32;\n  public static fload_1 = Opcodes._load_1_32;\n  public static fload_2 = Opcodes._load_2_32;\n  public static fload_3 = Opcodes._load_3_32;\n  public static aload = Opcodes._load_32;\n  public static aload_0 = Opcodes._load_0_32;\n  public static aload_1 = Opcodes._load_1_32;\n  public static aload_2 = Opcodes._load_2_32;\n  public static aload_3 = Opcodes._load_3_32;\n\n  /* 64-bit load opcodes */\n  private static _load_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.opStack.pushWithNull(frame.locals[code.readUInt8(pc + 1)]);\n    frame.pc += 2;\n  }\n\n  private static _load_0_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(frame.locals[0]);\n    frame.pc++;\n  }\n\n  private static _load_1_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(frame.locals[1]);\n    frame.pc++;\n  }\n\n  private static _load_2_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(frame.locals[2]);\n    frame.pc++;\n  }\n\n  private static _load_3_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.pushWithNull(frame.locals[3]);\n    frame.pc++;\n  }\n\n  public static lload = Opcodes._load_64;\n  public static lload_0 = Opcodes._load_0_64;\n  public static lload_1 = Opcodes._load_1_64;\n  public static lload_2 = Opcodes._load_2_64;\n  public static lload_3 = Opcodes._load_3_64;\n  public static dload = Opcodes._load_64;\n  public static dload_0 = Opcodes._load_0_64;\n  public static dload_1 = Opcodes._load_1_64;\n  public static dload_2 = Opcodes._load_2_64;\n  public static dload_3 = Opcodes._load_3_64;\n\n  /* 32-bit store opcodes */\n  private static _store_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.locals[code.readUInt8(pc + 1)] = frame.opStack.pop();\n    frame.pc += 2;\n  }\n\n  private static _store_0_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[0] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  private static _store_1_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[1] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  private static _store_2_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[2] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  private static _store_3_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[3] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  public static istore = Opcodes._store_32;\n  public static istore_0 = Opcodes._store_0_32;\n  public static istore_1 = Opcodes._store_1_32;\n  public static istore_2 = Opcodes._store_2_32;\n  public static istore_3 = Opcodes._store_3_32;\n  public static fstore = Opcodes._store_32;\n  public static fstore_0 = Opcodes._store_0_32;\n  public static fstore_1 = Opcodes._store_1_32;\n  public static fstore_2 = Opcodes._store_2_32;\n  public static fstore_3 = Opcodes._store_3_32;\n  public static astore = Opcodes._store_32;\n  public static astore_0 = Opcodes._store_0_32;\n  public static astore_1 = Opcodes._store_1_32;\n  public static astore_2 = Opcodes._store_2_32;\n  public static astore_3 = Opcodes._store_3_32;\n\n  /* 64-bit store opcodes */\n  private static _store_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var offset = code.readUInt8(pc + 1);\n    // NULL\n    frame.locals[offset + 1] = frame.opStack.pop();\n    // The actual value.\n    frame.locals[offset] = frame.opStack.pop();\n    frame.pc += 2;\n  }\n\n  private static _store_0_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[1] = frame.opStack.pop();\n    frame.locals[0] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  private static _store_1_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[2] = frame.opStack.pop();\n    frame.locals[1] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  private static _store_2_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[3] = frame.opStack.pop();\n    frame.locals[2] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  private static _store_3_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.locals[4] = frame.opStack.pop();\n    frame.locals[3] = frame.opStack.pop();\n    frame.pc++;\n  }\n\n  public static lstore = Opcodes._store_64;\n  public static lstore_0 = Opcodes._store_0_64;\n  public static lstore_1 = Opcodes._store_1_64;\n  public static lstore_2 = Opcodes._store_2_64;\n  public static lstore_3 = Opcodes._store_3_64;\n  public static dstore = Opcodes._store_64;\n  public static dstore_0 = Opcodes._store_0_64;\n  public static dstore_1 = Opcodes._store_1_64;\n  public static dstore_2 = Opcodes._store_2_64;\n  public static dstore_3 = Opcodes._store_3_64;\n\n  /* Misc. */\n\n  public static sipush(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.opStack.push(code.readInt16BE(pc + 1));\n    frame.pc += 3;\n  }\n\n  public static bipush(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.opStack.push(code.readInt8(pc + 1));\n    frame.pc += 2;\n  }\n\n  public static pop(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.dropFromTop(1);\n    frame.pc++;\n  }\n\n  public static pop2(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    // http://i.imgur.com/MieF0KG.jpg\n    frame.opStack.dropFromTop(2);\n    frame.pc++;\n  }\n\n  public static dup(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.dup();\n    frame.pc++;\n  }\n\n  public static dup_x1(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.dup_x1();\n    frame.pc++;\n  }\n\n  public static dup_x2(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.dup_x2();\n    frame.pc++;\n  }\n\n  public static dup2(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.dup2();\n    frame.pc++;\n  }\n\n  public static dup2_x1(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.dup2_x1();\n    frame.pc++;\n  }\n\n  public static dup2_x2(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      v1 = opStack.pop(),\n      v2 = opStack.pop(),\n      v3 = opStack.pop(),\n      v4 = opStack.pop();\n    opStack.push6(v2, v1, v4, v3, v2, v1);\n    frame.pc++;\n  }\n\n  public static swap(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.swap();\n    frame.pc++;\n  }\n\n  /* Math Opcodes */\n  public static iadd(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push((opStack.pop() + opStack.pop()) | 0);\n    frame.pc++;\n  }\n\n  public static ladd(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().add(opStack.pop2()));\n    frame.pc++;\n  }\n\n  public static fadd(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(util.wrapFloat(opStack.pop() + opStack.pop()));\n    frame.pc++;\n  }\n\n  public static dadd(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2() + opStack.pop2());\n    frame.pc++;\n  }\n\n  public static isub(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push((-opStack.pop() + opStack.pop()) | 0);\n    frame.pc++;\n  }\n\n  public static fsub(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(util.wrapFloat(-opStack.pop() + opStack.pop()));\n    frame.pc++;\n  }\n\n  public static dsub(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(-opStack.pop2() + opStack.pop2());\n    frame.pc++;\n  }\n\n  public static lsub(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().negate().add(opStack.pop2()));\n    frame.pc++;\n  }\n\n  public static imul(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push((<any> Math).imul(opStack.pop(), opStack.pop()));\n    frame.pc++;\n  }\n\n  public static lmul(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().multiply(opStack.pop2()));\n    frame.pc++;\n  }\n\n  public static fmul(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(util.wrapFloat(opStack.pop() * opStack.pop()));\n    frame.pc++;\n  }\n\n  public static dmul(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2() * opStack.pop2());\n    frame.pc++;\n  }\n\n  public static idiv(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack, b: number = opStack.pop(), a: number = opStack.pop();\n    if (b === 0) {\n      throwException(thread, frame, 'Ljava/lang/ArithmeticException;', '/ by zero');\n    } else {\n      // spec: \"if the dividend is the negative integer of largest possible magnitude\n      // for the int type, and the divisor is -1, then overflow occurs, and the\n      // result is equal to the dividend.\"\n      if (a === enums.Constants.INT_MIN && b === -1) {\n        opStack.push(a);\n      } else {\n        opStack.push((a / b) | 0);\n      }\n      frame.pc++;\n    }\n  }\n\n  public static ldiv(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      b: gLong = opStack.pop2(),\n      a: gLong = opStack.pop2();\n    if (b.isZero()) {\n      throwException(thread, frame, 'Ljava/lang/ArithmeticException;', '/ by zero');\n    } else {\n      opStack.pushWithNull(a.div(b));\n      frame.pc++;\n    }\n  }\n\n  public static fdiv(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      a: number = opStack.pop();\n    opStack.push(util.wrapFloat(opStack.pop() / a));\n    frame.pc++;\n  }\n\n  public static ddiv(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      v: number = opStack.pop2();\n    opStack.pushWithNull(opStack.pop2() / v);\n    frame.pc++;\n  }\n\n  public static irem(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      b: number = opStack.pop(),\n      a: number = opStack.pop();\n    if (b === 0) {\n      throwException(thread, frame, 'Ljava/lang/ArithmeticException;', '/ by zero');\n    } else {\n      opStack.push(a % b);\n      frame.pc++;\n    }\n  }\n\n  public static lrem(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      b: gLong = opStack.pop2(),\n      a: gLong = opStack.pop2();\n    if (b.isZero()) {\n      throwException(thread, frame, 'Ljava/lang/ArithmeticException;', '/ by zero');\n    } else {\n      opStack.pushWithNull(a.modulo(b));\n      frame.pc++;\n    }\n  }\n\n  public static frem(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      b: number = opStack.pop();\n    opStack.push(opStack.pop() % b);\n    frame.pc++;\n  }\n\n  public static drem(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      b: number = opStack.pop2();\n    opStack.pushWithNull(opStack.pop2() % b);\n    frame.pc++;\n  }\n\n  public static ineg(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(-opStack.pop() | 0);\n    frame.pc++;\n  }\n\n  public static lneg(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().negate());\n    frame.pc++;\n  }\n\n  public static fneg(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(-opStack.pop());\n    frame.pc++;\n  }\n\n  public static dneg(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(-opStack.pop2());\n    frame.pc++;\n  }\n\n  /* Bitwise Operations */\n\n  public static ishl(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      s: number = opStack.pop();\n    opStack.push(opStack.pop() << s);\n    frame.pc++;\n  }\n\n  public static lshl(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      s: number = opStack.pop();\n    opStack.pushWithNull(opStack.pop2().shiftLeft(gLong.fromInt(s)));\n    frame.pc++;\n  }\n\n  public static ishr(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      s: number = opStack.pop();\n    opStack.push(opStack.pop() >> s);\n    frame.pc++;\n  }\n\n  public static lshr(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      s: number = opStack.pop();\n    opStack.pushWithNull(opStack.pop2().shiftRight(gLong.fromInt(s)));\n    frame.pc++;\n  }\n\n  public static iushr(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      s: number = opStack.pop();\n    opStack.push((opStack.pop() >>> s) | 0);\n    frame.pc++;\n  }\n\n  public static lushr(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      s: number = opStack.pop();\n    opStack.pushWithNull(opStack.pop2().shiftRightUnsigned(gLong.fromInt(s)));\n    frame.pc++;\n  }\n\n  public static iand(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(opStack.pop() & opStack.pop());\n    frame.pc++;\n  }\n\n  public static land(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().and(opStack.pop2()));\n    frame.pc++;\n  }\n\n  public static ior(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(opStack.pop() | opStack.pop());\n    frame.pc++;\n  }\n\n  public static lor(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().or(opStack.pop2()));\n    frame.pc++;\n  }\n\n  public static ixor(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(opStack.pop() ^ opStack.pop());\n    frame.pc++;\n  }\n\n  public static lxor(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().xor(opStack.pop2()));\n    frame.pc++;\n  }\n\n  public static iinc(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var idx = code.readUInt8(pc + 1),\n      val = code.readInt8(pc + 2);\n    frame.locals[idx] = (frame.locals[idx] + val) | 0;\n    frame.pc += 3;\n  }\n\n  public static i2l(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(gLong.fromInt(opStack.pop()));\n    frame.pc++;\n  }\n\n  public static i2f(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    // NOP; we represent ints as floats anyway.\n    // @todo What about quantities unexpressable as floats?\n    frame.pc++;\n  }\n\n  public static i2d(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(null);\n    frame.pc++;\n  }\n\n  public static l2i(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(opStack.pop2().toInt());\n    frame.pc++;\n  }\n\n  public static l2f(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(opStack.pop2().toNumber());\n    frame.pc++;\n  }\n\n  public static l2d(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(opStack.pop2().toNumber());\n    frame.pc++;\n  }\n\n  public static f2i(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(util.float2int(opStack.pop()));\n    frame.pc++;\n  }\n\n  public static f2l(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pushWithNull(gLong.fromNumber(opStack.pop()));\n    frame.pc++;\n  }\n\n  public static f2d(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.opStack.push(null);\n    frame.pc++;\n  }\n\n  public static d2i(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(util.float2int(opStack.pop2()));\n    frame.pc++;\n  }\n\n  public static d2l(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      d_val: number = opStack.pop2();\n    if (d_val === Number.POSITIVE_INFINITY) {\n      opStack.pushWithNull(gLong.MAX_VALUE);\n    } else if (d_val === Number.NEGATIVE_INFINITY) {\n      opStack.pushWithNull(gLong.MIN_VALUE);\n    } else {\n      opStack.pushWithNull(gLong.fromNumber(d_val));\n    }\n    frame.pc++;\n  }\n\n  public static d2f(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.pop();\n    opStack.push(util.wrapFloat(opStack.pop()));\n    frame.pc++;\n  }\n\n  public static i2b(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push((opStack.pop() << 24) >> 24);\n    frame.pc++;\n  }\n\n  public static i2c(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push(opStack.pop() & 0xFFFF);\n    frame.pc++;\n  }\n\n  public static i2s(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack;\n    opStack.push((opStack.pop() << 16) >> 16);\n    frame.pc++;\n  }\n\n  public static lcmp(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      v2: gLong = opStack.pop2();\n    opStack.push(opStack.pop2().compare(v2));\n    frame.pc++;\n  }\n\n  public static fcmpl(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      v2 = opStack.pop(),\n      v1 = opStack.pop();\n    if (v1 === v2) {\n      opStack.push(0);\n    } else if (v1 > v2) {\n      opStack.push(1);\n    } else {\n      // v1 < v2, and if v1 or v2 is NaN.\n      opStack.push(-1);\n    }\n    frame.pc++;\n  }\n\n  public static fcmpg(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      v2 = opStack.pop(),\n      v1 = opStack.pop();\n    if (v1 === v2) {\n      opStack.push(0);\n    } else if (v1 < v2) {\n      opStack.push(-1);\n    } else {\n      // v1 > v2, and if v1 or v2 is NaN.\n      opStack.push(1);\n    }\n    frame.pc++;\n  }\n\n  public static dcmpl(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      v2 = opStack.pop2(),\n      v1 = opStack.pop2();\n    if (v1 === v2) {\n      opStack.push(0);\n    } else if (v1 > v2) {\n      opStack.push(1);\n    } else {\n      // v1 < v2, and if v1 or v2 is NaN.\n      opStack.push(-1);\n    }\n    frame.pc++;\n  }\n\n  public static dcmpg(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack,\n      v2 = opStack.pop2(),\n      v1 = opStack.pop2();\n    if (v1 === v2) {\n      opStack.push(0);\n    } else if (v1 < v2) {\n      opStack.push(-1);\n    } else {\n      // v1 > v2, and if v1 or v2 is NaN.\n      opStack.push(1);\n    }\n    frame.pc++;\n  }\n\n  /* Unary branch opcodes */\n  public static ifeq(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() === 0) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static ifne(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() !== 0) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static iflt(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() < 0) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static ifge(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() >= 0) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static ifgt(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() > 0) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static ifle(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() <= 0) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  /* Binary branch opcodes */\n  public static if_icmpeq(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 === v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static if_icmpne(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 !== v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static if_icmplt(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 < v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static if_icmpge(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 >= v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static if_icmpgt(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 > v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static if_icmple(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 <= v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static if_acmpeq(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 === v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static if_acmpne(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var v2 = frame.opStack.pop();\n    var v1 = frame.opStack.pop();\n    if (v1 !== v2) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  /* Jump opcodes */\n  public static goto(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    const offset = code.readInt16BE(pc + 1);\n    frame.pc += offset;\n    if (offset < 0) {\n      frame.method.incrBBEntries();\n    }\n  }\n\n  public static jsr(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.opStack.push(pc + 3);\n    const offset = code.readInt16BE(pc + 1);\n    frame.pc += offset;\n    if (offset < 0) {\n      frame.method.incrBBEntries();\n    }\n  }\n\n  public static ret(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.pc = frame.locals[code.readUInt8(pc + 1)];\n  }\n\n  public static tableswitch(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    let pc = frame.pc;\n    // Ignore padding bytes. The +1 is to skip the opcode byte.\n    pc += ((4 - (pc + 1) % 4) % 4) + 1;\n    var defaultOffset = code.readInt32BE(pc),\n      low = code.readInt32BE(pc + 4),\n      high = code.readInt32BE(pc + 8),\n      offset = frame.opStack.pop();\n\n    if (offset >= low && offset <= high) {\n      frame.pc += code.readInt32BE(pc + 12 + ((offset - low) * 4));\n    } else {\n      frame.pc += defaultOffset;\n    }\n  }\n\n  public static lookupswitch(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    let pc = frame.pc;\n    // Skip padding bytes. The +1 is to skip the opcode byte.\n    pc += ((4 - (pc + 1) % 4) % 4) + 1;\n    var defaultOffset = code.readInt32BE(pc),\n      nPairs = code.readInt32BE(pc + 4),\n      i: number,\n      v: number = frame.opStack.pop();\n\n    pc += 8;\n    for (i = 0; i < nPairs; i++) {\n      if (code.readInt32BE(pc) === v) {\n        const offset = code.readInt32BE(pc + 4);\n        frame.pc += offset;\n        if (offset < 0) {\n          frame.method.incrBBEntries();\n        }\n        return;\n      }\n      pc += 8;\n    }\n    // No match found.\n    frame.pc += defaultOffset;\n  }\n\n  public static return(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.returnToThreadLoop = true;\n    if (frame.method.accessFlags.isSynchronized()) {\n      // monitorexit\n      if (!frame.method.methodLock(thread, frame).exit(thread)) {\n        // monitorexit threw an exception.\n        return;\n      }\n    }\n    thread.asyncReturn();\n  }\n\n  /* 32-bit return bytecodes */\n\n  private static _return_32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.returnToThreadLoop = true;\n    if (frame.method.accessFlags.isSynchronized()) {\n      // monitorexit\n      if (!frame.method.methodLock(thread, frame).exit(thread)) {\n        // monitorexit threw an exception.\n        return;\n      }\n    }\n    thread.asyncReturn(frame.opStack.bottom());\n  }\n\n  public static ireturn = Opcodes._return_32;\n  public static freturn = Opcodes._return_32;\n  public static areturn = Opcodes._return_32;\n\n  /* 64-bit return opcodes */\n\n  private static _return_64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.returnToThreadLoop = true;\n    if (frame.method.accessFlags.isSynchronized()) {\n      // monitorexit\n      if (!frame.method.methodLock(thread, frame).exit(thread)) {\n        // monitorexit threw an exception.\n        return;\n      }\n    }\n    thread.asyncReturn(frame.opStack.bottom(), null);\n  }\n\n  public static lreturn = Opcodes._return_64;\n  public static dreturn = Opcodes._return_64;\n\n  public static getstatic(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    assert(fieldInfo.getType() === enums.ConstantPoolItemType.FIELDREF);\n    if (fieldInfo.isResolved()) {\n      // Get the *actual* class that owns this field.\n      // This may not be initialized if it's an interface, so we need to check.\n      var fieldOwnerCls = fieldInfo.field.cls;\n      if (fieldOwnerCls.isInitialized(thread)) {\n        // Opcode is ready to execute! Rewrite to a 'fast' version,\n        // and run the fast version.\n        if (fieldInfo.nameAndTypeInfo.descriptor === 'J' || fieldInfo.nameAndTypeInfo.descriptor === 'D') {\n          code.writeUInt8(enums.OpCode.GETSTATIC_FAST64, pc);\n        } else {\n          code.writeUInt8(enums.OpCode.GETSTATIC_FAST32, pc);\n        }\n        // Stash the result of field lookup.\n        fieldInfo.fieldOwnerConstructor = fieldOwnerCls.getConstructor(thread);\n      } else {\n        // Initialize class and rerun opcode\n        initializeClassFromClass(thread, frame, fieldOwnerCls);\n      }\n    } else {\n      // Resolve the field.\n      resolveCPItem(thread, frame, fieldInfo);\n    }\n  }\n\n  /**\n   * A fast version of getstatic that assumes that relevant classes are\n   * initialized.\n   *\n   * Retrieves a 32-bit value.\n   */\n  public static getstatic_fast32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    frame.opStack.push(fieldInfo.fieldOwnerConstructor[fieldInfo.fullFieldName]);\n    frame.pc += 3;\n  }\n\n  /**\n   * A fast version of getstatic that assumes that relevant classes are\n   * initialized.\n   *\n   * Retrieves a 64-bit value.\n   */\n  public static getstatic_fast64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    frame.opStack.pushWithNull(fieldInfo.fieldOwnerConstructor[fieldInfo.fullFieldName]);\n    frame.pc += 3;\n  }\n\n  public static putstatic(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    assert(fieldInfo.getType() === enums.ConstantPoolItemType.FIELDREF);\n\n    if (fieldInfo.isResolved()) {\n      // Get the *actual* class that owns this field.\n      // This may not be initialized if it's an interface, so we need to check.\n      var fieldOwnerCls = fieldInfo.field.cls;\n      if (fieldOwnerCls.isInitialized(thread)) {\n        // Opcode is ready to execute! Rewrite to a 'fast' version,\n        // and run the fast version.\n        if (fieldInfo.nameAndTypeInfo.descriptor === 'J' || fieldInfo.nameAndTypeInfo.descriptor === 'D') {\n          code.writeUInt8(enums.OpCode.PUTSTATIC_FAST64, pc);\n        } else {\n          code.writeUInt8(enums.OpCode.PUTSTATIC_FAST32, pc);\n        }\n        // Stash the result of field lookup.\n        fieldInfo.fieldOwnerConstructor = fieldOwnerCls.getConstructor(thread);\n      } else {\n        // Initialize class and rerun opcode\n        initializeClassFromClass(thread, frame, fieldOwnerCls);\n      }\n    } else {\n      // Resolve the field.\n      resolveCPItem(thread, frame, fieldInfo);\n    }\n  }\n\n  /**\n   * A fast version of putstatic that assumes that relevant classes are\n   * initialized.\n   *\n   * Puts a 32-bit value.\n   */\n  public static putstatic_fast32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    fieldInfo.fieldOwnerConstructor[fieldInfo.fullFieldName] = frame.opStack.pop();\n    frame.pc += 3;\n  }\n\n  /**\n   * A fast version of putstatic that assumes that relevant classes are\n   * initialized.\n   *\n   * Puts a 64-bit value.\n   */\n  public static putstatic_fast64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    fieldInfo.fieldOwnerConstructor[fieldInfo.fullFieldName] = frame.opStack.pop2();\n    frame.pc += 3;\n  }\n\n  public static getfield(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      loader = frame.getLoader(),\n      obj = frame.opStack.top();\n    assert(fieldInfo.getType() === enums.ConstantPoolItemType.FIELDREF);\n    // Check if the object is null; if we do not do this before get_class, then\n    // we might try to get a class that we have not initialized!\n    if (!isNull(thread, frame, obj)) {\n      // cls is guaranteed to be in the inheritance hierarchy of obj, so it must be\n      // initialized. However, it may not be loaded in the current class's\n      // ClassLoader...\n      if (fieldInfo.isResolved()) {\n        var field = fieldInfo.field;\n        if (field.rawDescriptor == 'J' || field.rawDescriptor == 'D') {\n          code.writeUInt8(enums.OpCode.GETFIELD_FAST64, pc);\n        } else {\n          code.writeUInt8(enums.OpCode.GETFIELD_FAST32, pc);\n        }\n        // Rerun opcode\n      } else {\n        resolveCPItem(thread, frame, fieldInfo);\n      }\n    }\n  }\n\n  public static getfield_fast32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      opStack = frame.opStack, obj: JVMTypes.java_lang_Object = opStack.pop();\n    if (!isNull(thread, frame, obj)) {\n      opStack.push((<any> obj)[fieldInfo.fullFieldName]);\n      frame.pc += 3;\n    }\n  }\n\n  public static getfield_fast64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      opStack = frame.opStack, obj: JVMTypes.java_lang_Object = opStack.pop();\n    if (!isNull(thread, frame, obj)) {\n      opStack.pushWithNull((<any> obj)[fieldInfo.fullFieldName]);\n      frame.pc += 3;\n    }\n  }\n\n  public static putfield(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      loader = frame.getLoader(),\n      isLong = fieldInfo.nameAndTypeInfo.descriptor == 'J' || fieldInfo.nameAndTypeInfo.descriptor == 'D',\n      obj = frame.opStack.fromTop(isLong ? 2 : 1);\n    assert(fieldInfo.getType() === enums.ConstantPoolItemType.FIELDREF);\n\n    // Check if the object is null; if we do not do this before get_class, then\n    // we might try to get a class that we have not initialized!\n    if (!isNull(thread, frame, obj)) {\n      // cls is guaranteed to be in the inheritance hierarchy of obj, so it must be\n      // initialized. However, it may not be loaded in the current class's\n      // ClassLoader...\n      if (fieldInfo.isResolved()) {\n        var field = fieldInfo.field;\n        if (isLong) {\n          code.writeUInt8(enums.OpCode.PUTFIELD_FAST64, pc);\n        } else {\n          code.writeUInt8(enums.OpCode.PUTFIELD_FAST32, pc);\n        }\n        // Stash the resolved full field name.\n        fieldInfo.fullFieldName = `${util.descriptor2typestr(field.cls.getInternalName())}/${fieldInfo.nameAndTypeInfo.name}`;\n        // Rerun opcode\n      } else {\n        resolveCPItem(thread, frame, fieldInfo);\n      }\n    }\n  }\n\n  public static putfield_fast32(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var opStack = frame.opStack,\n      val = opStack.pop(),\n      obj: JVMTypes.java_lang_Object = opStack.pop(),\n      fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n\n    if (!isNull(thread, frame, obj)) {\n      (<any> obj)[fieldInfo.fullFieldName] = val;\n      frame.pc += 3;\n    }\n    // NPE has been thrown.\n  }\n\n  public static putfield_fast64(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var opStack = frame.opStack,\n      val = opStack.pop2(),\n      obj: JVMTypes.java_lang_Object = opStack.pop(),\n      fieldInfo = <ConstantPool.FieldReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n\n    if (!isNull(thread, frame, obj)) {\n      (<any> obj)[fieldInfo.fullFieldName] = val;\n      frame.pc += 3;\n    }\n    // NPE has been thrown.\n  }\n\n  public static invokevirtual(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n\n    // Ensure referenced class is loaded in the current classloader.\n    // Even though we don't use this class for anything, and we know that it\n    // must be loaded because it is in the object's inheritance hierarchy,\n    // it needs to be present in the current classloader.\n    if (methodReference.isResolved()) {\n      var m = methodReference.method;\n      if (m.isSignaturePolymorphic()) {\n        switch (m.name) {\n          case 'invokeBasic':\n            code.writeUInt8(enums.OpCode.INVOKEBASIC, pc);\n            break;\n          case 'invoke':\n          case 'invokeExact':\n            code.writeUInt8(enums.OpCode.INVOKEHANDLE, pc);\n            break;\n          default:\n            throwException(thread, frame, 'Ljava/lang/AbstractMethodError;', `Invalid signature polymorphic method: ${m.cls.getExternalName()}.${m.name}`);\n            break;\n        }\n      } else {\n        code.writeUInt8(enums.OpCode.INVOKEVIRTUAL_FAST, pc);\n      }\n    } else {\n      resolveCPItem(thread, frame, methodReference);\n    }\n  }\n\n  public static invokeinterface(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.InterfaceMethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (methodReference.isResolved()) {\n      if (methodReference.method.cls.isInitialized(thread)) {\n        // Rewrite to fast and rerun.\n        code.writeUInt8(enums.OpCode.INVOKEINTERFACE_FAST, pc);\n      } else {\n        // Initialize our class and rerun opcode.\n        // Note that the existance of an object of an interface type does *not*\n        // mean that the interface is initialized!\n        initializeClass(thread, frame, methodReference.classInfo);\n      }\n    } else {\n      resolveCPItem(thread, frame, methodReference);\n    }\n  }\n\n  public static invokedynamic(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var callSiteSpecifier = <ConstantPool.InvokeDynamic> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    thread.setStatus(enums.ThreadStatus.ASYNC_WAITING);\n    callSiteSpecifier.constructCallSiteObject(thread, frame.getLoader(), frame.method.cls, pc, (status: boolean) => {\n      if (status) {\n        assert(typeof(callSiteSpecifier.getCallSiteObject(pc)[0].vmtarget) === 'function', \"MethodName should be resolved...\");\n        code.writeUInt8(enums.OpCode.INVOKEDYNAMIC_FAST, pc);\n        // Resume and rerun fast opcode.\n        thread.setStatus(enums.ThreadStatus.RUNNABLE);\n      }\n    });\n    frame.returnToThreadLoop = true;\n  }\n\n  /**\n   * XXX: Actually perform superclass method lookup.\n   */\n  public static invokespecial(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (methodReference.isResolved()) {\n      // Rewrite and rerun.\n      code.writeUInt8(enums.OpCode.INVOKENONVIRTUAL_FAST, pc);\n    } else {\n      resolveCPItem(thread, frame, methodReference);\n    }\n  }\n\n  public static invokestatic(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (methodReference.isResolved()) {\n      var m = methodReference.method;\n      if (m.cls.isInitialized(thread)) {\n        var newOpcode: enums.OpCode = enums.OpCode.INVOKESTATIC_FAST;\n        if (methodReference.method.isSignaturePolymorphic()) {\n          switch (methodReference.method.name) {\n            case 'linkToInterface':\n            case 'linkToVirtual':\n              newOpcode = enums.OpCode.LINKTOVIRTUAL;\n              break;\n            case 'linkToStatic':\n            case 'linkToSpecial':\n              newOpcode = enums.OpCode.LINKTOSPECIAL;\n              break;\n            default:\n              assert(false, \"Should be impossible.\");\n              break;\n          }\n        }\n        // Rewrite and rerun.\n        code.writeUInt8(newOpcode, pc);\n      } else {\n        initializeClassFromClass(thread, frame, m.cls);\n      }\n    } else {\n      resolveCPItem(thread, frame, methodReference);\n    }\n  }\n\n  /// Fast invoke opcodes.\n\n  public static invokenonvirtual_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      opStack = frame.opStack, paramSize = methodReference.paramWordSize,\n      obj: JVMTypes.java_lang_Object = opStack.fromTop(paramSize);\n\n    if (!isNull(thread, frame, obj)) {\n      var args = opStack.sliceFromTop(paramSize);\n      opStack.dropFromTop(paramSize + 1);\n      assert(typeof (<any> obj)[methodReference.fullSignature] === 'function', `Resolved method ${methodReference.fullSignature} isn't defined?!`, thread);\n      (<any> obj)[methodReference.fullSignature](thread, args);\n      frame.returnToThreadLoop = true;\n    }\n  }\n\n  public static invokestatic_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      opStack = frame.opStack, paramSize = methodReference.paramWordSize,\n      args = opStack.sliceAndDropFromTop(paramSize);\n    assert(methodReference.jsConstructor != null, \"jsConstructor is missing?!\");\n    assert(typeof(methodReference.jsConstructor[methodReference.fullSignature]) === 'function', \"Resolved method isn't defined?!\");\n    methodReference.jsConstructor[methodReference.fullSignature](thread, args);\n    frame.returnToThreadLoop = true;\n  }\n\n  public static invokevirtual_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      count = methodReference.paramWordSize,\n      opStack = frame.opStack,\n      obj: JVMTypes.java_lang_Object = opStack.fromTop(count);\n    if (!isNull(thread, frame, obj)) {\n      // Use the class of the *object*.\n      assert(typeof (<any> obj)[methodReference.signature] === 'function', `Resolved method ${methodReference.signature} isn't defined?!`);\n      (<any> obj)[methodReference.signature](thread, opStack.sliceFromTop(count));\n      opStack.dropFromTop(count + 1);\n      frame.returnToThreadLoop = true;\n    }\n    // Object is NULL; NPE has been thrown.\n  }\n\n  public static invokeinterface_fast = Opcodes.invokevirtual_fast;\n\n  public static invokedynamic_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var callSiteSpecifier = <ConstantPool.InvokeDynamic> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      cso = callSiteSpecifier.getCallSiteObject(pc),\n      appendix = cso[1],\n      fcn = cso[0].vmtarget,\n      opStack = frame.opStack, paramSize = callSiteSpecifier.paramWordSize,\n      args = opStack.sliceAndDropFromTop(paramSize);\n\n    if (appendix !== null) {\n      args.push(appendix);\n    }\n    fcn(thread, null, args);\n    frame.returnToThreadLoop = true;\n  }\n\n  /**\n   * Opcode for MethodHandle.invoke and MethodHandle.invokeExact.\n   */\n  public static invokehandle(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      opStack = frame.opStack,\n      fcn = methodReference.memberName.vmtarget,\n      // Add in 1 for the method handle itself.\n      paramSize = methodReference.paramWordSize + 1,\n      appendix = methodReference.appendix,\n      args = opStack.sliceFromTop(paramSize);\n\n    if (appendix !== null) {\n      args.push(appendix);\n    }\n\n    if (!isNull(thread, frame, args[0])) {\n      opStack.dropFromTop(paramSize);\n      // fcn will handle invoking 'this' and such.\n      // TODO: If this can be varargs, pass in parameter types to the function.\n      fcn(thread, null, args);\n      frame.returnToThreadLoop = true;\n    }\n  }\n\n  /**\n   * Opcode for MethodHandle.invokeBasic.\n   * Unlike invoke/invokeExact, invokeBasic does not call a generated bytecode\n   * method. It calls the vmtarget embedded in the MethodHandler directly.\n   * This can cause crashes with malformed calls, thus it is only accesssible\n   * to trusted JDK code.\n   */\n  public static invokebasic(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      paramSize = methodReference.getParamWordSize(),\n      opStack = frame.opStack,\n      obj: JVMTypes.java_lang_invoke_MethodHandle = opStack.fromTop(paramSize),\n      // Need to include the MethodHandle in the arguments to vmtarget. vmtarget\n      // will appropriately invoke it.\n      args = opStack.sliceFromTop(paramSize + 1),\n      lmbdaForm: JVMTypes.java_lang_invoke_LambdaForm,\n      mn: JVMTypes.java_lang_invoke_MemberName,\n      m: methods.Method;\n\n    // obj is a MethodHandle.\n    if (!isNull(thread, frame, obj)) {\n      opStack.dropFromTop(paramSize + 1);\n      lmbdaForm = obj['java/lang/invoke/MethodHandle/form'];\n      mn = lmbdaForm['java/lang/invoke/LambdaForm/vmentry'];\n      assert(mn.vmtarget !== null && mn.vmtarget !== undefined, \"vmtarget must be defined\");\n      mn.vmtarget(thread, methodReference.nameAndTypeInfo.descriptor, args);\n      frame.returnToThreadLoop = true;\n    }\n  }\n\n  /**\n   * Also used for linkToStatic.\n   * TODO: De-conflate the two.\n   * TODO: Varargs functions.\n   */\n  public static linktospecial(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      opStack = frame.opStack, paramSize = methodReference.paramWordSize,\n      // Final argument is the relevant MemberName. Function args are right\n      // before it.\n      args = opStack.sliceFromTop(paramSize),\n      memberName: JVMTypes.java_lang_invoke_MemberName = args.pop(),\n      // TODO: Use parsed descriptor.\n      desc = methodReference.nameAndTypeInfo.descriptor;\n\n    if (!isNull(thread, frame, memberName)) {\n      opStack.dropFromTop(paramSize);\n      assert(memberName.getClass().getInternalName() === \"Ljava/lang/invoke/MemberName;\");\n      // parameterTypes for function are the same as the method reference, but without the trailing MemberName.\n      // TODO: Use parsed descriptor, avoid re-doing work here.\n      memberName.vmtarget(thread, desc.replace(\"Ljava/lang/invoke/MemberName;)\", \")\"), args);\n      frame.returnToThreadLoop = true;\n    }\n  }\n\n  // XXX: Varargs functions. We're supposed to box args if target is varargs.\n  public static linktovirtual(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var methodReference = <ConstantPool.MethodReference | ConstantPool.InterfaceMethodReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      paramSize = methodReference.paramWordSize,\n      opStack = frame.opStack,\n      args = opStack.sliceFromTop(paramSize),\n      // Final argument is the relevant MemberName. Function args are right\n      // before it.\n      memberName: JVMTypes.java_lang_invoke_MemberName = args.pop(),\n      desc = methodReference.nameAndTypeInfo.descriptor;\n\n    if (!isNull(thread, frame, memberName)) {\n      opStack.dropFromTop(paramSize);\n      assert(memberName.getClass().getInternalName() === \"Ljava/lang/invoke/MemberName;\");\n      // parameterTypes for function are the same as the method reference, but without the trailing MemberName.\n      memberName.vmtarget(thread, desc.replace(\"Ljava/lang/invoke/MemberName;)\", \")\"), args);\n      frame.returnToThreadLoop = true;\n    }\n  }\n\n  public static breakpoint(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    throwException(thread, frame, \"Ljava/lang/Error;\", \"breakpoint not implemented.\");\n  }\n\n  public static new(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (classRef.isResolved()) {\n      var cls = classRef.cls;\n      if (cls.isInitialized(thread)) {\n        code.writeUInt8(enums.OpCode.NEW_FAST, pc);\n        // Return to thread, rerun opcode.\n      } else {\n        initializeClassFromClass(thread, frame, cls);\n      }\n    } else {\n      resolveCPItem(thread, frame, classRef);\n    }\n  }\n\n  public static new_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    frame.opStack.push(new classRef.clsConstructor(thread));\n    frame.pc += 3;\n  }\n\n  public static newarray(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    // TODO: Stash all of these array types during JVM startup.\n    var opStack = frame.opStack,\n      type = \"[\" + ArrayTypes[code.readUInt8(pc + 1)],\n      cls = <ClassData.ArrayClassData<any>> frame.getLoader().getInitializedClass(thread, type),\n      length = opStack.pop();\n    if (length >= 0) {\n      opStack.push(new (cls.getConstructor(thread))(thread, length));\n      frame.pc += 2;\n    } else {\n      throwException(thread, frame, 'Ljava/lang/NegativeArraySizeException;', `Tried to init ${type} array with length ${length}`);\n    }\n  }\n\n  public static anewarray(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (classRef.isResolved()) {\n      // Rewrite and rerun.\n      code.writeUInt8(enums.OpCode.ANEWARRAY_FAST, pc);\n      classRef.arrayClass = <ClassData.ArrayClassData<any>> frame.getLoader().getInitializedClass(thread, `[${classRef.cls.getInternalName()}`);\n      classRef.arrayClassConstructor = classRef.arrayClass.getConstructor(thread);\n    } else {\n      resolveCPItem(thread, frame, classRef);\n    }\n  }\n\n  public static anewarray_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var opStack = frame.opStack,\n      classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      length = opStack.pop();\n\n    if (length >= 0) {\n      opStack.push(new classRef.arrayClassConstructor(thread, length));\n      frame.pc += 3;\n    } else {\n      throwException(thread, frame, 'Ljava/lang/NegativeArraySizeException;', `Tried to init ${classRef.arrayClass.getInternalName()} array with length ${length}`);\n    }\n  }\n\n  public static arraylength(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack, obj: JVMTypes.JVMArray<any> = opStack.pop();\n    if (!isNull(thread, frame, obj)) {\n      opStack.push(obj.array.length);\n      frame.pc++;\n    }\n    // obj is NULL. isNull threw an exception for us.\n  }\n\n  public static athrow(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    thread.throwException(frame.opStack.pop());\n    frame.returnToThreadLoop = true;\n  }\n\n  public static checkcast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (classRef.isResolved()) {\n      // Rewrite to fast version, and re-execute.\n      code.writeUInt8(enums.OpCode.CHECKCAST_FAST, pc);\n    } else {\n      resolveCPItem(thread, frame, classRef);\n    }\n  }\n\n  public static checkcast_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      cls = classRef.cls,\n      opStack = frame.opStack,\n      o: JVMTypes.java_lang_Object = opStack.top();\n    if ((o != null) && !o.getClass().isCastable(cls)) {\n      var targetClass = cls.getExternalName();\n      var candidateClass = o.getClass().getExternalName();\n      throwException(thread, frame, 'Ljava/lang/ClassCastException;', `${candidateClass} cannot be cast to ${targetClass}`);\n    } else {\n      // Success!\n      frame.pc += 3;\n    }\n  }\n\n  public static instanceof(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (classRef.isResolved()) {\n      // Rewrite and rerun.\n      code.writeUInt8(enums.OpCode.INSTANCEOF_FAST, pc);\n    } else {\n      // Fetch class and rerun opcode.\n      resolveCPItem(thread, frame, classRef);\n    }\n  }\n\n  public static instanceof_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      cls = classRef.cls,\n      opStack = frame.opStack,\n      o = <JVMTypes.java_lang_Object> opStack.pop();\n    opStack.push(o !== null ? (o.getClass().isCastable(cls) ? 1 : 0) : 0);\n    frame.pc += 3;\n  }\n\n  public static monitorenter(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var opStack = frame.opStack, monitorObj: JVMTypes.java_lang_Object = opStack.pop(),\n      monitorEntered = () => {\n        // [Note: Thread is now in the RUNNABLE state.]\n        // Increment the PC.\n        frame.pc++;\n      };\n\n    if (!monitorObj.getMonitor().enter(thread, monitorEntered)) {\n      // Opcode failed. monitorEntered will be run once we own the monitor.\n      // The thread is now in the BLOCKED state. Tell the frame to return to\n      // the thread loop.\n      frame.returnToThreadLoop = true;\n    } else {\n      monitorEntered();\n    }\n  }\n\n  public static monitorexit(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    var monitorObj: JVMTypes.java_lang_Object = frame.opStack.pop();\n    if (monitorObj.getMonitor().exit(thread)) {\n      frame.pc++;\n    } else {\n      // monitorexit failed, and threw an exception.\n      frame.returnToThreadLoop = true;\n    }\n  }\n\n  public static multianewarray(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (classRef.isResolved()) {\n      // Rewrite and rerun.\n      code.writeUInt8(enums.OpCode.MULTIANEWARRAY_FAST, pc);\n    } else {\n      resolveCPItem(thread, frame, classRef);\n    }\n  }\n\n  public static multianewarray_fast(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var classRef = <ConstantPool.ClassReference> frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1)),\n      opStack = frame.opStack,\n      dim = code.readUInt8(pc + 3),\n      i: number,\n      // Arguments to the constructor.\n      args = new Array<number>(dim), dimSize: number;\n\n    for (i = 0; i < dim; i++) {\n      dimSize = opStack.pop();\n      args[dim - i - 1] = dimSize;\n      if (dimSize < 0) {\n        throwException(thread, frame, 'Ljava/lang/NegativeArraySizeException;', `Tried to init ${classRef.cls.getInternalName()} array with a dimension of length ${dimSize}`);\n        return;\n      }\n    }\n    opStack.push(new (classRef.cls.getConstructor(thread))(thread, args));\n    frame.pc += 4;\n  }\n\n  public static ifnull(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() == null) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static ifnonnull(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    if (frame.opStack.pop() != null) {\n      const offset = code.readInt16BE(pc + 1);\n      frame.pc += offset;\n      if (offset < 0) {\n        frame.method.incrBBEntries();\n      }\n    } else {\n      frame.pc += 3;\n    }\n  }\n\n  public static goto_w(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    const offset = code.readInt32BE(pc + 1);\n    frame.pc += offset;\n    if (offset < 0) {\n      frame.method.incrBBEntries();\n    }\n  }\n\n  public static jsr_w(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    frame.opStack.push(frame.pc + 5);\n    frame.pc += code.readInt32BE(pc + 1);\n  }\n\n  public static nop(thread: threading.JVMThread, frame: threading.BytecodeStackFrame) {\n    frame.pc += 1;\n  }\n\n  public static ldc(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var constant = frame.method.cls.constantPool.get(code.readUInt8(pc + 1));\n    if (constant.isResolved()) {\n      assert((() => {\n        switch (constant.getType()) {\n          case enums.ConstantPoolItemType.STRING:\n          case enums.ConstantPoolItemType.CLASS:\n          case enums.ConstantPoolItemType.METHOD_HANDLE:\n          case enums.ConstantPoolItemType.METHOD_TYPE:\n          case enums.ConstantPoolItemType.INTEGER:\n          case enums.ConstantPoolItemType.FLOAT:\n            return true;\n          default:\n            return false;\n        }\n      })(), `Constant pool item ${enums.ConstantPoolItemType[constant.getType()]} is not appropriate for LDC.`);\n      frame.opStack.push(constant.getConstant(thread));\n      frame.pc += 2;\n    } else {\n      resolveCPItem(thread, frame, constant);\n    }\n  }\n\n  public static ldc_w(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var constant = frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    if (constant.isResolved()) {\n      assert((() => {\n        switch (constant.getType()) {\n          case enums.ConstantPoolItemType.STRING:\n          case enums.ConstantPoolItemType.CLASS:\n          case enums.ConstantPoolItemType.METHOD_HANDLE:\n          case enums.ConstantPoolItemType.METHOD_TYPE:\n          case enums.ConstantPoolItemType.INTEGER:\n          case enums.ConstantPoolItemType.FLOAT:\n            return true;\n          default:\n            return false;\n        }\n      })(), `Constant pool item ${enums.ConstantPoolItemType[constant.getType()]} is not appropriate for LDC_W.`);\n      frame.opStack.push(constant.getConstant(thread));\n      frame.pc += 3;\n    } else {\n      resolveCPItem(thread, frame, constant);\n    }\n  }\n\n  public static ldc2_w(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var constant = frame.method.cls.constantPool.get(code.readUInt16BE(pc + 1));\n    assert(constant.getType() === enums.ConstantPoolItemType.LONG\n      || constant.getType() === enums.ConstantPoolItemType.DOUBLE,\n      `Invalid ldc_w constant pool type: ${enums.ConstantPoolItemType[constant.getType()]}`);\n    frame.opStack.pushWithNull((<ConstantPool.ConstLong | ConstantPool.ConstDouble> constant).value);\n    frame.pc += 3;\n  }\n\n  public static wide(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, code: Buffer) {\n    const pc = frame.pc;\n    var index = code.readUInt16BE(pc + 2);\n    // Increment PC before switch to avoid issue where ret chances PC and we\n    // erroneously increment the PC further.\n    frame.pc += 4;\n    switch (code.readUInt8(pc + 1)) {\n      case enums.OpCode.ILOAD:\n      case enums.OpCode.FLOAD:\n      case enums.OpCode.ALOAD:\n        frame.opStack.push(frame.locals[index]);\n        break;\n      case enums.OpCode.LLOAD:\n      case enums.OpCode.DLOAD:\n        frame.opStack.pushWithNull(frame.locals[index]);\n        break;\n      case enums.OpCode.ISTORE:\n      case enums.OpCode.FSTORE:\n      case enums.OpCode.ASTORE:\n        frame.locals[index] = frame.opStack.pop();\n        break;\n      case enums.OpCode.LSTORE:\n      case enums.OpCode.DSTORE:\n        // NULL\n        frame.locals[index + 1] = frame.opStack.pop();\n        // The actual value.\n        frame.locals[index] = frame.opStack.pop();\n        break;\n      case enums.OpCode.RET:\n        frame.pc = frame.locals[index];\n        break;\n      case enums.OpCode.IINC:\n        var value = code.readInt16BE(pc + 4);\n        frame.locals[index] = (frame.locals[index] + value) | 0;\n        // wide iinc has 2 extra bytes.\n        frame.pc += 2;\n        break;\n      default:\n        assert(false, `Unknown wide opcode: ${code.readUInt8(pc + 1)}`);\n        break;\n    }\n  }\n}\n\nexport var LookupTable: IOpcodeImplementation[] = new Array(0xff);\n// Put in function closure to prevent scope pollution.\n(() => {\n  for (var i = 0; i < 0xff; i++) {\n    if (enums.OpCode.hasOwnProperty(\"\" + i)) {\n      LookupTable[i] = (<any> Opcodes)[enums.OpCode[i].toLowerCase()];\n      assert(LookupTable[i] != null, `Missing implementation of opcode ${enums.OpCode[i]}`);\n    }\n  }\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/opcodes.ts\n **/","\"use strict\";\nimport gLong = require('./gLong');\nimport enums = require('./enums');\n\n// default module: logging\n\n// used for debugging the stack and local variables\nexport function debug_var(e: any): string {\n  if (e === null) {\n    return '!';\n  } else if (e === void 0) {\n    return 'undef';\n  } else if (e.ref != null) {\n    return \"*\" + e.ref;\n  } else if (e instanceof gLong) {\n    return e + \"L\";\n  }\n  return e;\n}\n\n// used for debugging the stack and local variables\nexport function debug_vars(arr: any[]): string[] {\n  return arr.map<string>(debug_var);\n}\n\n// log levels\n// TODO: turn this into an enum, if possible\nexport var VTRACE = 10;\nexport var TRACE = 9;\nexport var DEBUG = 5;\nexport var ERROR = 1;\nexport var log_level = ERROR;\n\nfunction log(level: number, msgs: any[]): void {\n  if (level <= log_level) {\n    var msg = msgs.join(' ');\n    if (level == 1) {\n      console.error(msg);\n    } else {\n      console.log(msg);\n    }\n  }\n}\n\nexport function vtrace(...msgs: any[]): void {\n  log(VTRACE, msgs);\n}\n\nexport function trace(...msgs: any[]): void {\n  log(TRACE, msgs);\n}\n\nexport function debug(...msgs: any[]): void {\n  log(DEBUG, msgs);\n}\n\nexport function error(...msgs: any[]): void {\n  log(ERROR, msgs);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/logging.ts\n **/","/**\n * Utility class. \"stream\" out string data, and compile into a single string.\n */\nclass StringOutputStream {\n  private _data: string[] = [];\n  public write(data: string) { this._data.push(data); }\n  public flush(): string {\n    var rv = this._data.join(\"\");\n    this._data = [];\n    return rv;\n  }\n\n}\n\nexport = StringOutputStream;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/StringOutputStream.ts\n **/","\"use strict\";\n\nimport enums = require('./enums');\nimport opcodes = require('./opcodes');\nimport {Method} from './methods';\nimport ConstantPool = require('./ConstantPool');\n\n\nexport interface JitInfo {\n  pops: number,                 // If negative, then it is treated a request rather than a demand\n  pushes: number,\n  hasBranch: boolean,\n  emit: (pops: string[], pushes: string[], suffix: string, onSuccess: string, code: Buffer, pc: number, onErrorPushes: string[], method: Method) => string\n}\n\nfunction makeOnError(onErrorPushes: string[], pc: number) {\n  return onErrorPushes.length > 0 ? `f.pc=${pc};f.opStack.pushAll(${onErrorPushes.join(',')});` : `f.pc=${pc};`;\n}\n\nconst escapeStringRegEx = /\\\\/g;\n\nexport const opJitInfo: JitInfo[] = function() {\n\n// Intentionally indented higher: emitted code is shorter.\n\nconst table:JitInfo[] = [];\nconst OpCode = enums.OpCode;\n\ntable[OpCode.ACONST_NULL] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.ICONST_M1] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=-1;${onSuccess}`;\n}};\n\nconst load0_32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[0];${onSuccess}`;\n}};\n\nconst load1_32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[1];${onSuccess}`;\n}};\n\nconst load2_32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[2];${onSuccess}`;\n}};\n\nconst load3_32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[3];${onSuccess}`;\n}};\n\ntable[OpCode.ALOAD_0] = load0_32;\ntable[OpCode.ILOAD_0] = load0_32;\ntable[OpCode.FLOAD_0] = load0_32;\n\ntable[OpCode.ALOAD_1] = load1_32;\ntable[OpCode.ILOAD_1] = load1_32;\ntable[OpCode.FLOAD_1] = load1_32;\n\ntable[OpCode.ALOAD_2] = load2_32;\ntable[OpCode.ILOAD_2] = load2_32;\ntable[OpCode.FLOAD_2] = load2_32;\n\ntable[OpCode.ALOAD_3] = load3_32;\ntable[OpCode.ILOAD_3] = load3_32;\ntable[OpCode.FLOAD_3] = load3_32;\n\nconst load0_64: JitInfo = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[0],${pushes[1]}=null;${onSuccess}`;\n}};\n\nconst load1_64: JitInfo = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[1],${pushes[1]}=null;${onSuccess}`;\n}};\n\nconst load2_64: JitInfo = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[2],${pushes[1]}=null;${onSuccess}`;\n}};\n\nconst load3_64: JitInfo = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=f.locals[3],${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.LLOAD_0] = load0_64;\ntable[OpCode.DLOAD_0] = load0_64;\n\ntable[OpCode.LLOAD_1] = load1_64;\ntable[OpCode.DLOAD_1] = load1_64;\n\ntable[OpCode.LLOAD_2] = load2_64;\ntable[OpCode.DLOAD_2] = load2_64;\n\ntable[OpCode.LLOAD_3] = load3_64;\ntable[OpCode.DLOAD_3] = load3_64;\n\nconst store0_32: JitInfo = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[0]=${pops[0]};${onSuccess}`;\n}}\n\nconst store1_32: JitInfo = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[1]=${pops[0]};${onSuccess}`;\n}}\n\nconst store2_32: JitInfo = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[2]=${pops[0]};${onSuccess}`;\n}}\n\nconst store3_32: JitInfo = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[3]=${pops[0]};${onSuccess}`;\n}}\n\ntable[OpCode.ASTORE_0] = store0_32;\ntable[OpCode.ISTORE_0] = store0_32;\ntable[OpCode.FSTORE_0] = store0_32;\n\ntable[OpCode.ASTORE_1] = store1_32;\ntable[OpCode.ISTORE_1] = store1_32;\ntable[OpCode.FSTORE_1] = store1_32;\n\ntable[OpCode.ASTORE_2] = store2_32;\ntable[OpCode.ISTORE_2] = store2_32;\ntable[OpCode.FSTORE_2] = store2_32;\n\ntable[OpCode.ASTORE_3] = store3_32;\ntable[OpCode.ISTORE_3] = store3_32;\ntable[OpCode.FSTORE_3] = store3_32;\n\nconst store_64: JitInfo = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const offset = code.readUInt8(pc + 1);\n  return `f.locals[${offset+1}]=${pops[0]};f.locals[${offset}]=${pops[1]};${onSuccess}`;\n}}\n\nconst store0_64: JitInfo = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[1]=${pops[0]};f.locals[0]=${pops[1]};${onSuccess}`;\n}}\n\nconst store1_64: JitInfo = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[2]=${pops[0]};f.locals[1]=${pops[1]};${onSuccess}`;\n}}\n\nconst store2_64: JitInfo = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[3]=${pops[0]};f.locals[2]=${pops[1]};${onSuccess}`;\n}}\n\nconst store3_64: JitInfo = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `f.locals[4]=${pops[0]};f.locals[3]=${pops[1]};${onSuccess}`;\n}}\n\ntable[OpCode.LSTORE] = store_64;\ntable[OpCode.DSTORE] = store_64;\n\ntable[OpCode.LSTORE_0] = store0_64;\ntable[OpCode.DSTORE_0] = store0_64;\n\ntable[OpCode.LSTORE_1] = store1_64;\ntable[OpCode.DSTORE_1] = store1_64;\n\ntable[OpCode.LSTORE_2] = store2_64;\ntable[OpCode.DSTORE_2] = store2_64;\n\ntable[OpCode.LSTORE_3] = store3_64;\ntable[OpCode.DSTORE_3] = store3_64;\n\nconst const0_32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=0;${onSuccess}`;\n}}\nconst const1_32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=1;${onSuccess}`;\n}}\nconst const2_32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=2;${onSuccess}`;\n}}\n\n\ntable[OpCode.ICONST_0] = const0_32;\ntable[OpCode.ICONST_1] = const1_32;\ntable[OpCode.ICONST_2] = const2_32;\n\ntable[OpCode.FCONST_0] = const0_32;\ntable[OpCode.FCONST_1] = const1_32;\ntable[OpCode.FCONST_2] = const2_32;\n\ntable[OpCode.ICONST_3] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=3;${onSuccess}`;\n}}\n\ntable[OpCode.ICONST_4] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=4;${onSuccess}`;\n}}\n\ntable[OpCode.ICONST_5] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=5;${onSuccess}`;\n}}\n\ntable[OpCode.LCONST_0] = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=u.gLong.ZERO,${pushes[1]}=null;${onSuccess}`;\n}}\n\ntable[OpCode.LCONST_1] = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=u.gLong.ONE,${pushes[1]}=null;${onSuccess}`;\n}}\n\ntable[OpCode.DCONST_0] = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=0,${pushes[1]}=null;${onSuccess}`;\n}}\n\ntable[OpCode.DCONST_1] = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=1,${pushes[1]}=null;${onSuccess}`;\n}}\n\nconst aload32: JitInfo = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nif(!u.isNull(t,f,${pops[1]})){\nvar len${suffix}=${pops[1]}.array.length;\nif(${pops[0]}<0||${pops[0]}>=len${suffix}){\n${onError}\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\"\"+${pops[0]}+\" not in length \"+len${suffix}+\" array of type \"+${pops[1]}.getClass().getInternalName());\n}else{var ${pushes[0]}=${pops[1]}.array[${pops[0]}];${onSuccess}}\n}else{${onError}}`;\n}}\n\n\ntable[OpCode.IALOAD] = aload32;\ntable[OpCode.FALOAD] = aload32;\ntable[OpCode.AALOAD] = aload32;\ntable[OpCode.BALOAD] = aload32;\ntable[OpCode.CALOAD] = aload32;\ntable[OpCode.SALOAD] = aload32;\n\nconst aload64: JitInfo = {hasBranch: false, pops: 2, pushes: 2, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nif(!u.isNull(t,f,${pops[1]})){\nvar len${suffix}=${pops[1]}.array.length;\nif(${pops[0]}<0||${pops[0]}>=len${suffix}){\n${onError}\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\"\"+${pops[0]}+\" not in length \"+len${suffix}+\" array of type \"+${pops[1]}.getClass().getInternalName());\n}else{var ${pushes[0]}=${pops[1]}.array[${pops[0]}],${pushes[1]}=null;${onSuccess}}\n}else{${onError}}`;\n}}\n\n\ntable[OpCode.DALOAD] = aload64;\ntable[OpCode.LALOAD] = aload64;\n\nconst astore32: JitInfo = {hasBranch: false, pops: 3, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nif(!u.isNull(t,f,${pops[2]})){\nvar len${suffix}=${pops[2]}.array.length;\nif(${pops[1]}<0||${pops[1]}>=len${suffix}){\n${onError}\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\"\"+${pops[1]}+\" not in length \"+len${suffix}+\" array of type \"+${pops[2]}.getClass().getInternalName());\n}else{${pops[2]}.array[${pops[1]}]=${pops[0]};${onSuccess}}\n}else{${onError}}`;\n}}\n\n\ntable[OpCode.IASTORE] = astore32;\ntable[OpCode.FASTORE] = astore32;\ntable[OpCode.AASTORE] = astore32;\ntable[OpCode.BASTORE] = astore32;\ntable[OpCode.CASTORE] = astore32;\ntable[OpCode.SASTORE] = astore32;\n\nconst astore64: JitInfo = {hasBranch: false, pops: 4, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nif(!u.isNull(t,f,${pops[3]})){\nvar len${suffix}=${pops[3]}.array.length;\nif(${pops[2]}<0||${pops[2]}>=len${suffix}){\n${onError}\nu.throwException(t,f,'Ljava/lang/ArrayIndexOutOfBoundsException;',\"\"+${pops[2]}+\" not in length \"+len${suffix}+\" array of type \"+${pops[3]}.getClass().getInternalName());\n}else{${pops[3]}.array[${pops[2]}]=${pops[1]};${onSuccess}}\n}else{${onError}}`;\n}}\n\n\ntable[OpCode.DASTORE] = astore64;\ntable[OpCode.LASTORE] = astore64;\n\n// TODO: get the constant at JIT time ?\ntable[OpCode.LDC] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const index = code.readUInt8(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nvar cnst${suffix}=f.method.cls.constantPool.get(${index});\nif(cnst${suffix}.isResolved()){var ${pushes[0]}=cnst${suffix}.getConstant(t);${onSuccess}\n}else{${onError}u.resolveCPItem(t,f,cnst${suffix});}`;\n}};\n\n// TODO: get the constant at JIT time ?\ntable[OpCode.LDC_W] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const index = code.readUInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nvar cnst${suffix}=f.method.cls.constantPool.get(${index});\nif(cnst${suffix}.isResolved()){var ${pushes[0]}=cnst${suffix}.getConstant(t);${onSuccess}\n}else{${onError}u.resolveCPItem(t,f,cnst${suffix});}`;\n}};\n\n// TODO: get the constant at JIT time ?\ntable[OpCode.LDC2_W] = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt16BE(pc + 1);\n  return `var ${pushes[0]}=f.method.cls.constantPool.get(${index}).value,${pushes[1]}=null;${onSuccess}`;\n}};\n\n// TODO: get the field info at JIT time ?\ntable[OpCode.GETSTATIC_FAST32] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt16BE(pc + 1);\n  return `var fi${suffix}=f.method.cls.constantPool.get(${index}),${pushes[0]}=fi${suffix}.fieldOwnerConstructor[fi${suffix}.fullFieldName];${onSuccess}`;\n}};\n\n// TODO: get the field info at JIT time ?\ntable[OpCode.GETSTATIC_FAST64] = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt16BE(pc + 1);\n  return `\nvar fi${suffix}=f.method.cls.constantPool.get(${index}),${pushes[0]}=fi${suffix}.fieldOwnerConstructor[fi${suffix}.fullFieldName],\n${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.GETFIELD_FAST32] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  const index = code.readUInt16BE(pc + 1);\n  const fieldInfo = <ConstantPool.FieldReference> method.cls.constantPool.get(index);\n  const name = fieldInfo.fullFieldName.replace(escapeStringRegEx, \"\\\\\\\\\")\n  return `if(!u.isNull(t,f,${pops[0]})){var ${pushes[0]}=${pops[0]}['${name}'];${onSuccess}}else{${onError}}`;\n}};\n\ntable[OpCode.GETFIELD_FAST64] = {hasBranch: false, pops: 1, pushes: 2, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  const index = code.readUInt16BE(pc + 1);\n  const fieldInfo = <ConstantPool.FieldReference> method.cls.constantPool.get(index);\n  const name = fieldInfo.fullFieldName.replace(escapeStringRegEx, \"\\\\\\\\\")\n  return `if(!u.isNull(t,f,${pops[0]})){var ${pushes[0]}=${pops[0]}['${name}'],${pushes[1]}=null;${onSuccess}}else{${onError}}`;\n}};\n\ntable[OpCode.PUTFIELD_FAST32] = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  const index = code.readUInt16BE(pc + 1);\n  const fieldInfo = <ConstantPool.FieldReference> method.cls.constantPool.get(index);\n  const name = fieldInfo.fullFieldName.replace(escapeStringRegEx, \"\\\\\\\\\")\n  return `if(!u.isNull(t,f,${pops[1]})){${pops[1]}['${name}']=${pops[0]};${onSuccess}}else{${onError}}`;\n}};\n\ntable[OpCode.PUTFIELD_FAST64] = {hasBranch: false, pops: 3, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  const index = code.readUInt16BE(pc + 1);\n  const fieldInfo = <ConstantPool.FieldReference> method.cls.constantPool.get(index);\n  const name = fieldInfo.fullFieldName.replace(escapeStringRegEx, \"\\\\\\\\\")\n  return `if(!u.isNull(t,f,${pops[2]})){${pops[2]}['${name}']=${pops[1]};${onSuccess}}else{${onError}}`;\n}};\n\n// TODO: get the constant at JIT time ?\ntable[OpCode.INSTANCEOF_FAST] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt16BE(pc + 1);\n  return `var cls${suffix}=f.method.cls.constantPool.get(${index}).cls,${pushes[0]}=${pops[0]}!==null?(${pops[0]}.getClass().isCastable(cls${suffix})?1:0):0;${onSuccess}`;\n}};\n\ntable[OpCode.CHECKCAST_FAST] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  const index = code.readUInt16BE(pc + 1);\n  const classRef = <ConstantPool.ClassReference> method.cls.constantPool.get(index),\n    targetClass = classRef.cls.getExternalName();\n  return `var cls${suffix}=f.method.cls.constantPool.get(${index}).cls;\nif((${pops[0]}!=null)&&!${pops[0]}.getClass().isCastable(cls${suffix})){\nu.throwException(t,f,'Ljava/lang/ClassCastException;',${pops[0]}.getClass().getExternalName()+' cannot be cast to ${targetClass}');\n}else{var ${pushes[0]}=${pops[0]};${onSuccess}}`\n}};\n\ntable[OpCode.ARRAYLENGTH] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `if(!u.isNull(t,f,${pops[0]})){var ${pushes[0]}=${pops[0]}.array.length;${onSuccess}}else{${onError}}`;\n}};\n\nconst load32: JitInfo = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt8(pc + 1);\n  return `var ${pushes[0]}=f.locals[${index}];${onSuccess}`;\n}}\n\ntable[OpCode.ILOAD] = load32;\ntable[OpCode.ALOAD] = load32;\ntable[OpCode.FLOAD] = load32;\n\nconst load64: JitInfo = {hasBranch: false, pops: 0, pushes: 2, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt8(pc + 1);\n  return `var ${pushes[0]}=f.locals[${index}],${pushes[1]}=null;${onSuccess}`;\n}}\n\ntable[OpCode.LLOAD] = load64;\ntable[OpCode.DLOAD] = load64;\n\nconst store32: JitInfo = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt8(pc + 1);\n  return `f.locals[${index}]=${pops[0]};${onSuccess}`;\n}}\n\ntable[OpCode.ISTORE] = store32;\ntable[OpCode.ASTORE] = store32;\ntable[OpCode.FSTORE] = store32;\n\ntable[OpCode.BIPUSH] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const value = code.readInt8(pc + 1);\n  return `var ${pushes[0]}=${value};${onSuccess}`;\n}};\n\ntable[OpCode.SIPUSH] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const value = code.readInt16BE(pc + 1);\n  return `var ${pushes[0]}=${value};${onSuccess}`;\n}};\n\ntable[OpCode.IINC] = {hasBranch: false, pops: 0, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const idx = code.readUInt8(pc + 1);\n  const val = code.readInt8(pc + 2);\n  return `f.locals[${idx}]=(f.locals[${idx}]+${val})|0;${onSuccess}`;\n}};\n\n// This is marked as hasBranch: true to stop further opcode inclusion during JITC. The name of \"hasBranch\" ought to be changed.\ntable[OpCode.ATHROW] = {hasBranch: true, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `${onError}t.throwException(${pops[0]});f.returnToThreadLoop=true;`;\n}};\n\ntable[OpCode.GOTO] = {hasBranch: true, pops: 0, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const offset = code.readInt16BE(pc + 1);\n  return `f.pc=${pc + offset};${onSuccess}`;\n}};\n\ntable[OpCode.TABLESWITCH] = {hasBranch: true, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  // Ignore padding bytes. The +1 is to skip the opcode byte.\n  const alignedPC = pc + ((4 - (pc + 1) % 4) % 4) + 1;\n  const defaultOffset = code.readInt32BE(alignedPC),\n    low = code.readInt32BE(alignedPC + 4),\n    high = code.readInt32BE(alignedPC + 8);\n  if ((high - low) < 8) {\n    let emitted = `switch(${pops[0]}){`;\n    for (let i = low; i <= high; i++) {\n      const offset = code.readInt32BE(alignedPC + 12+((i-low)*4));\n      emitted += `case ${i}:f.pc=${pc + offset};break;`;\n    }\n    emitted += `default:f.pc=${pc + defaultOffset}}${onSuccess}`\n    return emitted;\n  } else {\n    return `if(${pops[0]}>=${low}&&${pops[0]}<=${high}){f.pc=${pc}+f.method.getCodeAttribute().getCode().readInt32BE(${alignedPC + 12}+((${pops[0]}-${low})*4))}else{f.pc=${pc + defaultOffset}}${onSuccess}`;\n  }\n}};\n\nconst cmpeq: JitInfo = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}===${pops[1]}){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IF_ICMPEQ] = cmpeq;\ntable[OpCode.IF_ACMPEQ] = cmpeq;\n\nconst cmpne: JitInfo = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}!==${pops[1]}){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IF_ICMPNE] = cmpne;\ntable[OpCode.IF_ACMPNE] = cmpne;\n\ntable[OpCode.IF_ICMPGE] = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[1]}>=${pops[0]}){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IF_ICMPGT] = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[1]}>${pops[0]}){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IF_ICMPLE] = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[1]}<=${pops[0]}){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IF_ICMPLT] = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[1]}<${pops[0]}){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFNULL] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}==null){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFNONNULL] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}!=null){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFEQ] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}===0){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFNE] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}!==0){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFGT] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}>0){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFLT] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}<0){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFGE] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}>=0){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.IFLE] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const offset = code.readInt16BE(pc + 1);\n  const onError = makeOnError(onErrorPushes, pc + offset);\n  return `if(${pops[0]}<=0){${onError}}else{${onSuccess}}`;\n}};\n\ntable[OpCode.LCMP] = {hasBranch: false, pops: 4, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}.compare(${pops[1]});${onSuccess}`;\n}};\n\ntable[OpCode.FCMPL] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]}===${pops[1]}?0:(${pops[1]}>${pops[0]}?1:-1);${onSuccess}`;\n}};\n\ntable[OpCode.DCMPL] = {hasBranch: false, pops: 4, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}===${pops[1]}?0:(${pops[3]}>${pops[1]}?1:-1);${onSuccess}`;\n}};\n\ntable[OpCode.FCMPG] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]}===${pops[1]}?0:(${pops[1]}<${pops[0]}?-1:1);${onSuccess}`;\n}};\n\ntable[OpCode.DCMPG] = {hasBranch: false, pops: 4, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}===${pops[1]}?0:(${pops[3]}<${pops[1]}?-1:1);${onSuccess}`;\n}};\n\ntable[OpCode.RETURN] = {hasBranch: true, pops: 0, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  // TODO: on error pushes\n  if (method.accessFlags.isSynchronized()) {\n    return `f.pc=${pc};f.returnToThreadLoop=true;if(!f.method.methodLock(t,f).exit(t)){return}t.asyncReturn();`;\n  } else {\n    return `f.pc=${pc};f.returnToThreadLoop=true;t.asyncReturn();`;\n  }\n}};\n\nconst return32: JitInfo = {hasBranch: true, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  // TODO: on error pushes\n  if (method.accessFlags.isSynchronized()) {\n    return `f.pc=${pc};f.returnToThreadLoop=true;if(!f.method.methodLock(t,f).exit(t)){return}t.asyncReturn(${pops[0]});`;\n  } else {\n    return `f.pc=${pc};f.returnToThreadLoop=true;t.asyncReturn(${pops[0]});`;\n  }\n}};\ntable[OpCode.IRETURN] = return32;\ntable[OpCode.FRETURN] = return32;\ntable[OpCode.ARETURN] = return32;\n\nconst return64: JitInfo = {hasBranch: true, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes, method) => {\n  // TODO: on error pushes\n  if (method.accessFlags.isSynchronized()) {\n    return `f.pc=${pc};f.returnToThreadLoop=true;if(!f.method.methodLock(t,f).exit(t)){return}t.asyncReturn(${pops[1]},null);`;\n  } else {\n    return `f.pc=${pc};f.returnToThreadLoop=true;t.asyncReturn(${pops[1]},null);`;\n  }\n}};\ntable[OpCode.LRETURN] = return64;\ntable[OpCode.DRETURN] = return64;\n\ntable[OpCode.MONITOREXIT] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `if(${pops[0]}.getMonitor().exit(t)){${onSuccess}}else{${onError}f.returnToThreadLoop=true;}`;\n}};\n\ntable[OpCode.IXOR] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]}^${pops[1]};${onSuccess}`;\n}};\n\ntable[OpCode.LXOR] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}.xor(${pops[3]}),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.IOR] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]}|${pops[1]};${onSuccess}`;\n}};\n\ntable[OpCode.LOR] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}.or(${pops[1]}),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.IAND] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]}&${pops[1]};${onSuccess}`;\n}};\n\ntable[OpCode.LAND] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}.and(${pops[1]}),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.IADD] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=(${pops[0]}+${pops[1]})|0;${onSuccess}`;\n}};\n\ntable[OpCode.LADD] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}.add(${pops[3]}),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.DADD] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}+${pops[3]},${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.IMUL] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=Math.imul(${pops[0]}, ${pops[1]});${onSuccess}`;\n}};\n\ntable[OpCode.FMUL] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=u.wrapFloat(${pops[0]}*${pops[1]});${onSuccess}`;\n}};\n\ntable[OpCode.LMUL] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}.multiply(${pops[1]}),${pushes[1]}= null;${onSuccess}`;\n}};\n\ntable[OpCode.DMUL] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}*${pops[1]},${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.IDIV] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nif(${pops[0]}===0){${onError}u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\n}else{var ${pushes[0]}=(${pops[1]}===u.Constants.INT_MIN&&${pops[0]}===-1)?${pops[1]}:((${pops[1]}/${pops[0]})|0);${onSuccess}}`;\n}};\n\ntable[OpCode.LDIV] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nif(${pops[1]}.isZero()){${onError}u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\n}else{var ${pushes[0]}=${pops[3]}.div(${pops[1]}),${pushes[1]}=null;${onSuccess}}`;\n}};\n\ntable[OpCode.DDIV] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}/${pops[1]},${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.ISUB] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=(${pops[1]}-${pops[0]})|0;${onSuccess}`;\n}};\n\ntable[OpCode.LSUB] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}.negate().add(${pops[3]}),${pushes[1]}= null;${onSuccess}`;\n}};\n\ntable[OpCode.DSUB] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}-${pops[1]},${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.IREM] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `if(${pops[0]}===0){${onError}u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\n}else{var ${pushes[0]}=${pops[1]}%${pops[0]};${onSuccess}}`;\n}};\n\ntable[OpCode.LREM] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const onError = makeOnError(onErrorPushes, pc);\n  return `if(${pops[1]}.isZero()){${onError}u.throwException(t,f,'Ljava/lang/ArithmeticException;','/ by zero');\n}else{var ${pushes[0]}=${pops[3]}.modulo(${pops[1]}),${pushes[1]}=null;${onSuccess}}`;\n}};\n\ntable[OpCode.DREM] = {hasBranch: false, pops: 4, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[3]}%${pops[1]},${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.INEG] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=(-${pops[0]})|0;${onSuccess}`;\n}};\n\ntable[OpCode.LNEG] = {hasBranch: false, pops: 2, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}.negate(),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.ISHL] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}<<${pops[0]};${onSuccess}`;\n}};\n\ntable[OpCode.LSHL] = {hasBranch: false, pops: 3, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[2]}.shiftLeft(u.gLong.fromInt(${pops[0]})),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.ISHR] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}>>${pops[0]};${onSuccess}`;\n}};\n\ntable[OpCode.LSHR] = {hasBranch: false, pops: 3, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[2]}.shiftRight(u.gLong.fromInt(${pops[0]})),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.IUSHR] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=(${pops[1]}>>>${pops[0]})|0;${onSuccess}`;\n}};\n\ntable[OpCode.LUSHR] = {hasBranch: false, pops: 3, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[2]}.shiftRightUnsigned(u.gLong.fromInt(${pops[0]})),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.I2B] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=(${pops[0]}<<24)>>24;${onSuccess}`;\n}};\n\ntable[OpCode.I2S] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=(${pops[0]}<<16)>>16;${onSuccess}`;\n}};\n\ntable[OpCode.I2C] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]}&0xFFFF;${onSuccess}`;\n}};\n\ntable[OpCode.I2L] = {hasBranch: false, pops: 1, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=u.gLong.fromInt(${pops[0]}),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.I2F] = {hasBranch: false, pops: 0, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `${onSuccess}`;\n}};\n\ntable[OpCode.I2D] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.F2I] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=u.float2int(${pops[0]});${onSuccess}`;\n}};\n\ntable[OpCode.F2D] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.L2I] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}.toInt();${onSuccess}`;\n}};\n\ntable[OpCode.L2D] = {hasBranch: false, pops: 2, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]}.toNumber(),${pushes[1]}=null;${onSuccess}`;\n}};\n\ntable[OpCode.D2I] = {hasBranch: false, pops: 2, pushes: 1, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=u.float2int(${pops[1]});${onSuccess}`;\n}};\n\n// TODO: update the DUPs when peeking is supported\ntable[OpCode.DUP] = {hasBranch: false, pops: 1, pushes: 2, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]},${pushes[1]}=${pops[0]};${onSuccess}`;\n}};\n\ntable[OpCode.DUP2] = {hasBranch: false, pops: 2, pushes: 4, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]},${pushes[1]}=${pops[0]},${pushes[2]}=${pops[1]},${pushes[3]}=${pops[0]};${onSuccess}`;\n}};\n\ntable[OpCode.DUP_X1] = {hasBranch: false, pops: 2, pushes: 3, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]},${pushes[1]}=${pops[1]},${pushes[2]}=${pops[0]};${onSuccess}`;\n}};\n\ntable[OpCode.DUP_X2] = {hasBranch: false, pops: 3, pushes: 4, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[0]},${pushes[1]}=${pops[2]},${pushes[2]}=${pops[1]},${pushes[3]}=${pops[0]};${onSuccess}`;\n}};\n\ntable[OpCode.DUP2_X1] = {hasBranch: false, pops: 3, pushes: 5, emit: (pops, pushes, suffix, onSuccess) => {\n  return `var ${pushes[0]}=${pops[1]},${pushes[1]}=${pops[0]},${pushes[2]}=${pops[2]},${pushes[3]}=${pops[1]},${pushes[4]}=${pops[0]};${onSuccess}`;\n}};\n\ntable[OpCode.NEW_FAST] = {hasBranch: false, pops: 0, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc) => {\n  const index = code.readUInt16BE(pc + 1);\n  return `var cr${suffix}=f.method.cls.constantPool.get(${index}),${pushes[0]}=(new cr${suffix}.clsConstructor(t));${onSuccess}`;\n}};\n\ntable[OpCode.NEWARRAY] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const index = code.readUInt8(pc + 1);\n  const arrayType = \"[\" + opcodes.ArrayTypes[index];\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nvar cls${suffix}=f.getLoader().getInitializedClass(t,'${arrayType}');\nif(${pops[0]}>=0){var ${pushes[0]}=new (cls${suffix}.getConstructor(t))(t,${pops[0]});${onSuccess}\n}else{${onError}u.throwException(t,f,'Ljava/lang/NegativeArraySizeException;','Tried to init ${arrayType} array with length '+${pops[0]});}`;\n}};\n\ntable[OpCode.ANEWARRAY_FAST] = {hasBranch: false, pops: 1, pushes: 1, emit: (pops, pushes, suffix, onSuccess, code, pc, onErrorPushes) => {\n  const index = code.readUInt16BE(pc + 1);\n  const arrayType = \"[\" + opcodes.ArrayTypes[index];\n  const onError = makeOnError(onErrorPushes, pc);\n  return `\nvar cr${suffix}=f.method.cls.constantPool.get(${index});\nif(${pops[0]}>=0){var ${pushes[0]}=new cr${suffix}.arrayClassConstructor(t,${pops[0]});${onSuccess}\n}else{${onError}u.throwException(t,f,'Ljava/lang/NegativeArraySizeException;','Tried to init '+cr${suffix}.arrayClass.getInternalName()+' array with length '+${pops[0]});}`;\n}};\n\ntable[OpCode.NOP] = {hasBranch: false, pops: 0, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `${onSuccess}`;\n}};\n\ntable[OpCode.POP] = {hasBranch: false, pops: 1, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `${onSuccess}`;\n}};\n\ntable[OpCode.POP2] = {hasBranch: false, pops: 2, pushes: 0, emit: (pops, pushes, suffix, onSuccess) => {\n  return `${onSuccess}`;\n}};\n\nreturn table;\n}();\n\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/jit.ts\n **/","import {ClassData, ReferenceClassData, ArrayClassData, PrimitiveClassData} from './ClassData';\nimport threading = require('./threading');\nimport ClassLock = require('./ClassLock');\nimport {IClasspathItem, ClasspathFactory} from './classpath';\nimport {TriState} from './enums';\nimport util = require('./util');\nimport methods = require('./methods');\nimport logging = require('./logging');\nimport assert = require('./assert');\nimport JAR = require('./jar');\nimport path = require('path');\nimport fs = require('fs');\nimport JVMTypes = require('../includes/JVMTypes');\nvar debug = logging.debug;\n\n/**\n * Used to lock classes for loading.\n */\nclass ClassLocks {\n  /**\n   * typrStr => array of callbacks to trigger when operation completes.\n   */\n  private locks: { [typeStr: string]: ClassLock } = {};\n\n  constructor() {}\n\n  /**\n   * Checks if the lock for the given class is already taken. If not, it takes\n   * the lock. If it is taken, we enqueue the callback.\n   * NOTE: For convenience, will handle triggering the owner's callback as well.\n   */\n  public tryLock(typeStr: string, thread: threading.JVMThread, cb: (cdata: ClassData) => void): boolean {\n    if (typeof this.locks[typeStr] === 'undefined') {\n      this.locks[typeStr] = new ClassLock();\n    }\n    return this.locks[typeStr].tryLock(thread, cb);\n  }\n\n  /**\n   * Releases the lock on the given string.\n   */\n  public unlock(typeStr: string, cdata: ClassData): void {\n    this.locks[typeStr].unlock(cdata);\n    // No need for this lock to remain.\n    delete this.locks[typeStr];\n  }\n\n  /**\n   * Returns the owning thread of a given lock. Returns null if the specified\n   * type string is not locked.\n   */\n  public getOwner(typeStr: string): threading.JVMThread {\n    if (this.locks[typeStr]) {\n      return this.locks[typeStr].getOwner();\n    }\n    return null;\n  }\n}\n\n/**\n * Base classloader class. Contains common class resolution and instantiation\n * logic.\n */\nexport abstract class ClassLoader {\n  /**\n   * Stores loaded *reference* and *array* classes.\n   */\n  private loadedClasses: { [typeStr: string]: ClassData } = {};\n  /**\n   * Stores callbacks that are waiting for another thread to finish loading\n   * the specified class.\n   */\n  private loadClassLocks: ClassLocks = new ClassLocks();\n\n  /**\n   * @param bootstrap The JVM's bootstrap classloader. ClassLoaders use it\n   *   to retrieve primitive types.\n   */\n  constructor(public bootstrap: BootstrapClassLoader) { }\n\n  /**\n   * Retrieve a listing of classes that are loaded in this class loader.\n   */\n  public getLoadedClassNames(): string[] {\n    return Object.keys(this.loadedClasses);\n  }\n\n  /**\n   * Adds the specified class to the classloader. As opposed to defineClass,\n   * which defines a new class from bytes with the classloader.\n   *\n   * What's the difference?\n   * * Classes created with defineClass are defined by this classloader.\n   * * Classes added with addClass may have been defined by a different\n   *   classloader. This happens when a custom class loader's loadClass\n   *   function proxies classloading to a different classloader.\n   *\n   * @param typeStr The type string of the class.\n   * @param classData The class data object representing the class.\n   */\n  public addClass(typeStr: string, classData: ClassData): void {\n    // If the class is already added, ensure it is the same class we are adding again.\n    assert(this.loadedClasses[typeStr] != null ? this.loadedClasses[typeStr] === classData : true);\n    this.loadedClasses[typeStr] = classData;\n  }\n\n  /**\n   * No-frills. Get the class if it's defined in the class loader, no matter\n   * what shape it is in.\n   *\n   * Should only be used internally by ClassLoader subclasses.\n   */\n  protected getClass(typeStr: string): ClassData {\n    return this.loadedClasses[typeStr];\n  }\n\n  /**\n   * Defines a new class with the class loader from an array of bytes.\n   * @param thread The thread that is currently in control when this class is\n   *   being defined. An exception may be thrown if there is an issue parsing\n   *   the class file.\n   * @param typeStr The type string of the class (e.g. \"Ljava/lang/Object;\")\n   * @param data The data associated with the class as a binary blob.\n   * @param protectionDomain The protection domain for the class (can be NULL).\n   * @return The defined class, or null if there was an issue.\n   */\n  public defineClass<T extends JVMTypes.java_lang_Object>(thread: threading.JVMThread, typeStr: string, data: Buffer, protectionDomain: JVMTypes.java_security_ProtectionDomain): ReferenceClassData<T> {\n    try {\n      var classData = new ReferenceClassData<T>(data, protectionDomain, this);\n      this.addClass(typeStr, classData);\n      if (this instanceof BootstrapClassLoader) {\n        debug(`[BOOTSTRAP] Defining class ${typeStr}`);\n      } else {\n        debug(`[CUSTOM] Defining class ${typeStr}`);\n      }\n      return classData;\n    } catch (e) {\n      if (thread === null) {\n        // This will only happen when we're loading java/lang/Thread for\n        // the very first time.\n        logging.error(`JVM initialization failed: ${e}`);\n        logging.error(e.stack);\n      } else {\n        thread.throwNewException('Ljava/lang/ClassFormatError;', e);\n      }\n      return null;\n    }\n  }\n\n  /**\n   * Defines a new array class with this loader.\n   */\n  protected defineArrayClass<T>(typeStr: string): ArrayClassData<T> {\n    assert(this.getLoadedClass(util.get_component_type(typeStr)) != null);\n    var arrayClass = new ArrayClassData<T>(util.get_component_type(typeStr), this);\n    this.addClass(typeStr, arrayClass);\n    return arrayClass;\n  }\n\n  /**\n   * Attempts to retrieve the given loaded class.\n   * @param typeStr The name of the class.\n   * @return Returns the loaded class, or null if no such class is currently\n   *   loaded.\n   */\n  public getLoadedClass(typeStr: string): ClassData {\n    var cls = this.loadedClasses[typeStr];\n    if (cls != null) {\n      return cls;\n    } else {\n      if (util.is_primitive_type(typeStr)) {\n        // Primitive classes must be fetched from the bootstrap classloader.\n        return this.bootstrap.getPrimitiveClass(typeStr);\n      } else if (util.is_array_type(typeStr)) {\n        // We might be able to load this array class synchronously.\n        // Component class must be loaded. And we must define the array class\n        // with the component class's loader.\n        var component = this.getLoadedClass(util.get_component_type(typeStr));\n        if (component != null) {\n          var componentCl = component.getLoader();\n          if (componentCl === this) {\n            // We're responsible for defining the array class.\n            return this.defineArrayClass(typeStr);\n          } else {\n            // Delegate to the other loader, then add the class to our loaded\n            // roster.\n            cls = componentCl.getLoadedClass(typeStr);\n            this.addClass(typeStr, cls);\n            return cls;\n          }\n        }\n      }\n      return null;\n    }\n  }\n\n  /**\n   * Attempts to retrieve the given resolved class.\n   * @param typeStr The name of the class.\n   * @return Returns the class if it is both loaded and resolved. Returns null\n   *   if this is not the case.\n   */\n  public getResolvedClass(typeStr: string): ClassData {\n    var cls = this.getLoadedClass(typeStr);\n    if (cls !== null) {\n      if (cls.isResolved() || cls.tryToResolve()) {\n        return cls;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Attempts to retrieve the given initialized class.\n   * @param typeStr The name of the class.\n   * @return Returns the class if it is initialized. Returns null if this is\n   *   not the case.\n   */\n  public getInitializedClass(thread: threading.JVMThread, typeStr: string): ClassData {\n    var cls = this.getLoadedClass(typeStr);\n    if (cls !== null) {\n      if (cls.isInitialized(thread) || cls.tryToInitialize()) {\n        return cls;\n      } else {\n        return null;\n      }\n    } else {\n      return cls;\n    }\n  }\n\n  /**\n   * Asynchronously loads the given class.\n   */\n  public loadClass(thread: threading.JVMThread, typeStr: string, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    // See if we can grab this synchronously first.\n    var cdata = this.getLoadedClass(typeStr);\n    if (cdata) {\n      setImmediate(() => {\n        cb(cdata);\n      });\n    } else {\n      // Check the loadClass lock for this class.\n      if (this.loadClassLocks.tryLock(typeStr, thread, cb)) {\n        // Async it is!\n        if (util.is_reference_type(typeStr)) {\n          this._loadClass(thread, typeStr, (cdata) => {\n            this.loadClassLocks.unlock(typeStr, cdata);\n          }, explicit);\n        } else {\n          // Array\n          this.loadClass(thread, util.get_component_type(typeStr), (cdata) => {\n            if (cdata != null) {\n              // Synchronously will work now.\n              this.loadClassLocks.unlock(typeStr, this.getLoadedClass(typeStr));\n            }\n          }, explicit);\n        }\n      }\n    }\n  }\n\n  /**\n   * Asynchronously loads the given class. Works differently for bootstrap and\n   * custom class loaders.\n   *\n   * Should never be invoked directly! Use loadClass.\n   */\n  protected abstract _loadClass(thread: threading.JVMThread, typeStr: string, cb: (cdata: ClassData) => void, explicit?: boolean): void;\n\n  /**\n   * Convenience function: Resolve many classes. Calls cb with null should\n   * an error occur.\n   */\n  public resolveClasses(thread: threading.JVMThread, typeStrs: string[], cb: (classes: { [typeStr: string]: ClassData }) => void) {\n    var classes: { [typeStr: string]: ClassData } = {};\n    util.asyncForEach<string>(typeStrs, (typeStr: string, next_item: (err?: any) => void) => {\n      this.resolveClass(thread, typeStr, (cdata) => {\n        if (cdata === null) {\n          next_item(`Error resolving class: ${typeStr}`);\n        } else {\n          classes[typeStr] = cdata;\n          next_item();\n        }\n      });\n    }, (err?: any): void => {\n      if (err) {\n        cb(null);\n      } else {\n        cb(classes);\n      }\n    });\n  }\n\n  /**\n   * Asynchronously *resolves* the given class by loading the class and\n   * resolving its super class, interfaces, and/or component classes.\n   */\n  public resolveClass(thread: threading.JVMThread, typeStr: string, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    this.loadClass(thread, typeStr, (cdata: ClassData) => {\n      if (cdata === null || cdata.isResolved()) {\n        // Nothing to do! Either cdata is null, an exception triggered, and we\n        // failed, or cdata is already resolved.\n        setImmediate(() => { cb(cdata); });\n      } else {\n        cdata.resolve(thread, cb, explicit);\n      }\n    }, explicit);\n  }\n\n  /**\n   * Asynchronously *initializes* the given class and its super classes.\n   */\n  public initializeClass(thread: threading.JVMThread, typeStr: string, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    // Get the resolved class.\n    this.resolveClass(thread, typeStr, (cdata: ClassData) => {\n      if (cdata === null || cdata.isInitialized(thread)) {\n        // Nothing to do! Either resolution failed and an exception has already\n        // been thrown, cdata is already initialized, or the current thread is\n        // initializing the class.\n        setImmediate(() => {\n          cb(cdata);\n        });\n      } else {\n        assert(util.is_reference_type(typeStr));\n        (<ReferenceClassData<JVMTypes.java_lang_Object>> cdata).initialize(thread, cb, explicit);\n      }\n    }, explicit);\n  }\n\n  /**\n   * Throws the appropriate exception/error for a class not being found.\n   * If loading was implicitly triggered by the JVM, we call NoClassDefFoundError.\n   * If the program explicitly called loadClass, then we throw the ClassNotFoundException.\n   */\n  protected throwClassNotFoundException(thread: threading.JVMThread, typeStr: string, explicit: boolean): void {\n    thread.throwNewException(explicit ? 'Ljava/lang/ClassNotFoundException;' : 'Ljava/lang/NoClassDefFoundError;', `Cannot load class: ${util.ext_classname(typeStr)}`);\n  }\n\n  /**\n   * Returns the JVM object corresponding to this ClassLoader.\n   */\n  public abstract getLoaderObject(): JVMTypes.java_lang_ClassLoader;\n}\n\n/**\n * The JVM's bootstrap class loader. Loads classes directly from files on the\n * file system.\n */\nexport class BootstrapClassLoader extends ClassLoader {\n  /**\n   * The classpath. The first path in the array is the first searched.\n   * Meaning: The *end* of this array is the bootstrap class loader, and the\n   *   *beginning* of the array is the classpath item added last.\n   */\n  private classpath: IClasspathItem[];\n  /**\n   * Keeps track of all loaded packages, and the classpath item(s) from\n   * whence their packages came.\n   *\n   * Note: Package separators are specified with slashes ('/'), not periods ('.').\n   */\n  private loadedPackages: {[pkgString: string]: IClasspathItem[]};\n\n  /**\n   * Constructs the bootstrap classloader with the given classpath.\n   * @param classPath The classpath, where the *first* item is the *last*\n   *   classpath searched. Meaning, the classPath[0] should be the bootstrap\n   *   class path.\n   * @param extractionPath The path where jar files should be extracted.\n   * @param cb Called once all of the classpath items have been checked.\n   *   Passes an error if one occurs.\n   */\n  constructor(javaHome: string, classpath: string[], cb: (e?: any) => void) {\n    // The correct way to do this would be super(this), but we cannot reference this before calling super()\n    super(null);\n    this.bootstrap = this;\n\n    this.classpath = null;\n    this.loadedPackages = {};\n\n    ClasspathFactory(javaHome, classpath, (items) => {\n      this.classpath = items.reverse();\n      cb();\n    });\n  }\n\n  /**\n   * Registers that a given class has successfully been loaded from the specified\n   * classpath item.\n   */\n  private _registerLoadedClass(clsType: string, cpItem: IClasspathItem): void {\n    let pkgName = clsType.slice(0, clsType.lastIndexOf('/')),\n      itemLoader = this.loadedPackages[pkgName];\n    if (!itemLoader) {\n      this.loadedPackages[pkgName] = [cpItem];\n    } else if (itemLoader[0] !== cpItem && itemLoader.indexOf(cpItem) === -1) {\n      // Common case optimization: Simply check the first array element.\n      itemLoader.push(cpItem);\n    }\n  }\n\n  /**\n   * Returns a listing of tuples containing:\n   * * The package name (e.g. java/lang)\n   * * Classpath locations where classes in the package were loaded.\n   */\n  public getPackages(): [string, string[]][] {\n    return Object.keys(this.loadedPackages).map((pkgName: string): [string, string[]] => {\n      return [pkgName, this.loadedPackages[pkgName].map((item) => item.getPath())];\n    });\n  }\n\n  /**\n   * Retrieves or defines the specified primitive class.\n   */\n  public getPrimitiveClass(typeStr: string): PrimitiveClassData {\n    var cdata = <PrimitiveClassData> this.getClass(typeStr);\n    if (cdata == null) {\n      cdata = new PrimitiveClassData(typeStr, this);\n      this.addClass(typeStr, cdata);\n    }\n    return cdata;\n  }\n\n  /**\n   * Asynchronously load the given class from the classpath.\n   *\n   * SHOULD ONLY BE INVOKED INTERNALLY BY THE CLASSLOADER.\n   */\n  protected _loadClass(thread: threading.JVMThread, typeStr: string, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    debug(`[BOOTSTRAP] Loading class ${typeStr}`);\n    // This method is only valid for reference types!\n    assert(util.is_reference_type(typeStr));\n    // Search the class path for the class.\n    let clsFilePath = util.descriptor2typestr(typeStr),\n      cPathLen = this.classpath.length,\n      toSearch: IClasspathItem[] = [],\n      clsData: Buffer;\n\n    searchLoop:\n    for (let i = 0; i < cPathLen; i++) {\n      let item = this.classpath[i];\n      switch (item.hasClass(clsFilePath)) {\n        case TriState.INDETERMINATE:\n          toSearch.push(item);\n          break;\n        case TriState.TRUE:\n          // Break out of the loop; TRUE paths are guaranteed to have the class.\n          toSearch.push(item);\n          break searchLoop;\n      }\n    }\n\n    util.asyncFind<IClasspathItem>(toSearch, (pItem: IClasspathItem, callback: (success: boolean) => void): void => {\n      pItem.loadClass(clsFilePath, (err: Error, data?: Buffer) => {\n        if (err) {\n          callback(false);\n        } else {\n          clsData = data;\n          callback(true);\n        }\n      });\n    }, (pItem?: IClasspathItem) => {\n      if (pItem) {\n        let cls = this.defineClass(thread, typeStr, clsData, null);\n        if (cls !== null) {\n          this._registerLoadedClass(clsFilePath, pItem);\n        }\n        cb(cls);\n      } else {\n        // No such class.\n        debug(`Could not find class ${typeStr}`);\n        this.throwClassNotFoundException(thread, typeStr, explicit);\n        cb(null);\n      }\n    });\n  }\n\n  /**\n   * Returns a listing of reference classes loaded in the bootstrap loader.\n   */\n  public getLoadedClassFiles(): string[] {\n    var loadedClasses = this.getLoadedClassNames();\n    return loadedClasses.filter((clsName: string) => util.is_reference_type(clsName));\n  }\n\n  /**\n   * Returns the JVM object corresponding to this ClassLoader.\n   * @todo Represent the bootstrap by something other than 'null'.\n   * @todo These should be one-in-the-same.\n   */\n  public getLoaderObject(): JVMTypes.java_lang_ClassLoader {\n    return null;\n  }\n\n  /**\n   * Returns the current classpath.\n   */\n  public getClassPath(): string[] {\n    let cpLen = this.classpath.length,\n      cpStrings: string[] = new Array<string>(cpLen);\n    for (let i = 0; i < cpLen; i++) {\n      // Reverse it so it is the expected order (last item is first search target)\n      cpStrings[i] = this.classpath[cpLen - i - 1].getPath();\n    }\n    return cpStrings;\n  }\n\n  /**\n   * Returns the classpath item objects in the classpath.\n   */\n  public getClassPathItems(): IClasspathItem[] {\n    return this.classpath.slice(0);\n  }\n}\n\n/**\n * A Custom ClassLoader. Loads classes by calling loadClass on the user-defined\n * loader.\n */\nexport class CustomClassLoader extends ClassLoader {\n  constructor(bootstrap: BootstrapClassLoader,\n    private loaderObj: JVMTypes.java_lang_ClassLoader) {\n    super(bootstrap);\n  }\n\n  /**\n   * Asynchronously load the given class from the classpath. Calls the\n   * classloader's loadClass method.\n   *\n   * SHOULD ONLY BE INVOKED BY THE CLASS LOADER.\n   *\n   * @param thread The thread that triggered the loading.\n   * @param typeStr The type string of the class.\n   * @param cb The callback that will be called with the loaded class. It will\n   *   be passed a null if there is an error -- which also indicates that it\n   *   threw an exception on the JVM thread.\n   * @param explicit 'True' if loadClass was explicitly invoked by the program,\n   *   false otherwise. This changes the exception/error that we throw.\n   */\n  protected _loadClass(thread: threading.JVMThread, typeStr: string, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    debug(`[CUSTOM] Loading class ${typeStr}`);\n    // This method is only valid for reference types!\n    assert(util.is_reference_type(typeStr));\n    // Invoke the custom class loader.\n    this.loaderObj['loadClass(Ljava/lang/String;)Ljava/lang/Class;'](thread, [util.initString(this.bootstrap, util.ext_classname(typeStr))], (e?: JVMTypes.java_lang_Throwable, jco?: JVMTypes.java_lang_Class) => {\n      if (e) {\n        // Exception! There was an issue defining the class.\n        this.throwClassNotFoundException(thread, typeStr, explicit);\n        cb(null);\n      } else {\n        // Add the class returned by loadClass, in case the classloader\n        // proxied loading to another classloader.\n        var cls = jco.$cls;\n        this.addClass(typeStr, cls);\n        cb(cls);\n      }\n    });\n  }\n\n  /**\n   * Returns the JVM object corresponding to this ClassLoader.\n   * @todo These should be one-in-the-same.\n   */\n  public getLoaderObject(): JVMTypes.java_lang_ClassLoader {\n    return this.loaderObj;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/ClassLoader.ts\n **/","\"use strict\";\nimport util = require('./util');\nimport ByteStream = require('./ByteStream');\nimport ConstantPool = require('./ConstantPool');\nimport attributes = require('./attributes');\nimport {JVMThread, InternalStackFrame, NativeStackFrame, BytecodeStackFrame} from './threading';\nimport logging = require('./logging');\nimport methods = require('./methods');\nimport ClassLoader = require('./ClassLoader');\nimport enums = require('./enums');\nimport ClassLock = require('./ClassLock');\nimport assert = require('./assert');\nimport gLong = require('./gLong');\nimport JVM = require('./jvm');\nimport StringOutputStream = require('./StringOutputStream');\nimport JVMTypes = require('../includes/JVMTypes');\nimport ClassState = enums.ClassState;\n\nimport trace = logging.trace;\nimport debug = logging.debug;\n\nimport global = require('./global');\n\ndeclare var RELEASE: boolean;\nif (typeof RELEASE === 'undefined') global.RELEASE = false;\n\n/**\n * Auto-incrementing reference number. Uniquely identifies each object allocated\n * by the JVM. Started at 1 because we use 0 to identify NULL.\n */\nvar ref: number = 1;\nfunction getRef() {\n  return ref++;\n}\n\n/**\n * Defines special JVM-injected fields. The map stores the TypeScript type of\n * the field and the default value for the field, which will be assigned in the\n * JavaScript constructor for the class.\n */\nvar injectedFields: {[className: string]: {[fieldName: string]: [string, string]}} = {\n  'Ljava/lang/invoke/MemberName;': {\n    vmtarget: [\"(thread: JVMThread, descriptor: string, args: any[], cb?: (e?: JVMTypes.java_lang_Throwable, rv?: any) => void) => void\", \"null\"],\n    vmindex: [\"number\", \"-1\"]\n  },\n  'Ljava/lang/Object;': {\n    'ref': [\"number\", \"getRef()\"],\n    '$monitor': [\"Monitor\", \"null\"]\n  },\n  'Ljava/net/PlainSocketImpl;': {\n    '$is_shutdown': ['boolean', 'false'],\n    '$ws': ['Interfaces.IWebsock', 'null']\n  },\n  'Ljava/io/FileDescriptor;': {\n    '$pos': ['number', '-1']\n  },\n  'Ljava/lang/Class;': {\n    '$cls': ['ClassData', 'null']\n  },\n  'Ljava/lang/ClassLoader;': {\n    '$loader': ['ClassLoader', 'new ClassLoader.CustomClassLoader(thread.getBsCl(), this);']\n  },\n  'Ljava/lang/Thread;': {\n    // Note: Need to handle initial case when thread is NULL.\n    '$thread': ['JVMThread', 'thread ? new thread.constructor(thread.getJVM(), thread.getThreadPool(), this) : null']\n  }\n};\n\n/**\n * Defines special JVM-injected method. The map stores the TypeScript type\n * signature of the method and the JavaScript body of the method, keyed on the\n * method's name. These are all instance methods (e.g. non-static).\n */\nvar injectedMethods: {[className: string]: {[methodName: string]: string[]}} = {\n  'Ljava/lang/Object;': {\n    'getClass': [\"(): ClassData\", `function() { return this.constructor.cls }`],\n    'getMonitor': [\"(): Monitor\", `function() {\n  if (this.$monitor === null) {\n    this.$monitor = new Monitor();\n  }\n  return this.$monitor;\n}`]\n  },\n  'Ljava/lang/String;': {\n    'toString': [\"(): string\", `function() { return util.chars2jsStr(this['java/lang/String/value']); }`]\n  },\n  'Ljava/lang/Byte;': {\n    'unbox': [\"(): number\", `function() { return this['java/lang/Byte/value']; }`]\n  },\n  'Ljava/lang/Character;': {\n    'unbox': [\"(): number\", `function() { return this['java/lang/Character/value']; }`]\n  },\n  'Ljava/lang/Double;': {\n    'unbox': [\"(): number\", `function() { return this['java/lang/Double/value']; }`]\n  },\n  'Ljava/lang/Float;': {\n    'unbox': [\"(): number\", `function() { return this['java/lang/Float/value']; }`]\n  },\n  'Ljava/lang/Integer;': {\n    'unbox': [\"(): number\", `function() { return this['java/lang/Integer/value']; }`]\n  },\n  'Ljava/lang/Long;': {\n    'unbox': [\"(): Long\", `function() { return this['java/lang/Long/value']; }`]\n  },\n  'Ljava/lang/Short;': {\n    'unbox': [\"(): number\", `function() { return this['java/lang/Short/value']; }`]\n  },\n  'Ljava/lang/Boolean;': {\n    'unbox': [\"(): number\", `function() { return this['java/lang/Boolean/value']; }`]\n  },\n  // To catch any errors. Should never actually happen; Voids don't show up in arg lists.\n  'Ljava/lang/Void;': {\n    'unbox': [\"(): number\", `function() { throw new Error(\"Cannot unbox a Void type.\"); }`]\n  },\n  'Ljava/lang/invoke/MethodType;': {\n    'toString': [\"(): string\", `function() { return \"(\" + this['java/lang/invoke/MethodType/ptypes'].array.map(function (type) { return type.$cls.getInternalName(); }).join(\"\") + \")\" + this['java/lang/invoke/MethodType/rtype'].$cls.getInternalName(); }`]\n  }\n};\n\n/**\n * Same as injected methods, but these are static.\n */\nvar injectedStaticMethods: {[className: string]: {[methodName: string]: [string, string]}} = {\n  'Ljava/lang/Byte;': {\n    'box': [\"(val: number): java_lang_Byte\", `function(val) { var rv = new this(null); rv['java/lang/Byte/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Character;': {\n    'box': [\"(val: number): java_lang_Character\", `function(val) { var rv = new this(null); rv['java/lang/Character/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Double;': {\n    'box': [\"(val: number): java_lang_Double\", `function(val) { var rv = new this(null); rv['java/lang/Double/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Float;': {\n    'box': [\"(val: number): java_lang_Float\", `function(val) { var rv = new this(null); rv['java/lang/Float/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Integer;': {\n    'box': [\"(val: number): java_lang_Integer\", `function(val) { var rv = new this(null); rv['java/lang/Integer/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Long;': {\n    'box': [\"(val: Long): java_lang_Long\", `function(val) { var rv = new this(null); rv['java/lang/Long/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Short;': {\n    'box': [\"(val: number): java_lang_Short\", `function(val) { var rv = new this(null); rv['java/lang/Short/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Boolean;': {\n    'box': [\"(val: number): java_lang_Boolean\", `function(val) { var rv = new this(null); rv['java/lang/Boolean/value'] = val; return rv; }`]\n  },\n  'Ljava/lang/Void;': {\n    'box': [\"(): java_lang_Void\", `function() { return new this(null); }`]\n  }\n};\n\nexport interface IJVMConstructor<T extends JVMTypes.java_lang_Object> {\n  /**\n   * Constructs a new object in the same manner as the JVM's \"new\" opcode.\n   * Does *NOT* run the JVM constructor!\n   * @param jvm The thread that is constructing the object.\n   * @param lengths... If this is an array type, the length of each dimension of the array. (Required if an array type.)\n   */\n  new(thread: JVMThread, lengths?: number[] | number): T;\n}\n\n/**\n * Extends a JVM class by making its prototype a blank instantiation of an\n * object with the super class's prototype as its prototype. Inspired from\n * TypeScript's __extend function.\n */\nfunction extendClass(cls: any, superCls: any) {\n  function __() { this.constructor = cls; }\n  __.prototype = superCls.prototype;\n  cls.prototype = new (<any> __)();\n}\n\n/**\n * Represents a single class in the JVM.\n */\nexport abstract class ClassData {\n  protected loader: ClassLoader.ClassLoader;\n  public accessFlags: util.Flags = null;\n  /**\n   * We make this private to *enforce* call sites to use our getter functions.\n   * The actual state of this class depends on the state of its parents, and\n   * parents do not inform their children when they change state.\n   */\n  private state: enums.ClassState = enums.ClassState.LOADED;\n  private jco: JVMTypes.java_lang_Class = null;\n  /**\n   * The class's canonical name, in internal form.\n   * Ljava/lang/Foo;\n   */\n  protected className: string;\n  protected superClass: ReferenceClassData<JVMTypes.java_lang_Object> = null;\n\n  /**\n   * Responsible for setting up all of the fields that are guaranteed to be\n   * present on any ClassData object.\n   */\n  constructor(loader: ClassLoader.ClassLoader) {\n    this.loader = loader;\n  }\n\n  /**\n   * Get the external form of this class's name (e.g. java.lang.String).\n   */\n  public getExternalName(): string {\n    return util.ext_classname(this.className);\n  }\n\n  /**\n   * Get the internal form of this class's name (e.g. Ljava/lang/String;).\n   */\n  public getInternalName(): string {\n    return this.className;\n  }\n\n  /**\n   * Get the name of the package that this class belongs to (e.g. java.lang).\n   */\n  public getPackageName(): string {\n    var extName = this.getExternalName(), i: number;\n    // Find the index of the last '.' in the name.\n    for (i = extName.length - 1; i >= 0 && extName[i] !== '.'; i--) {}\n    if (i >= 0) {\n      return extName.slice(0, i);\n    } else {\n      return \"\";\n    }\n  }\n\n  /**\n   * Returns the ClassLoader object of the classloader that initialized this\n   * class. Returns null for the default classloader.\n   */\n  public getLoader(): ClassLoader.ClassLoader {\n    return this.loader;\n  }\n\n  /**\n   * Get the class's super class, which is always going to be a reference\n   * class.\n   */\n  public getSuperClass(): ReferenceClassData<JVMTypes.java_lang_Object> {\n    return this.superClass;\n  }\n\n  /**\n   * Get all of the interfaces that the class implements.\n   */\n  public getInterfaces(): ReferenceClassData<JVMTypes.java_lang_Object>[] {\n    return [];\n  }\n\n  /**\n   * Get all of the injected fields for this class. The value for each field\n   * in the returned map is its type.\n   */\n  public getInjectedFields(): { [fieldName: string]: string } {\n    var rv: { [fieldName: string]: string } = {};\n    if (injectedFields[this.getInternalName()] !== undefined) {\n      var fields = injectedFields[this.getInternalName()];\n      Object.keys(fields).forEach((fieldName: string) => {\n        rv[fieldName] = fields[fieldName][0];\n      });\n    }\n    return rv;\n  }\n\n  /**\n   * Get all of the injected methods for this class. The value for each method\n   * in the returned map is its type.\n   */\n  public getInjectedMethods(): { [methodName: string]: string } {\n    var rv: { [methodName: string]: string } = {},\n      lookupName = this.getInternalName();\n    // All array classes share the same injected methods.\n    if (lookupName[0] === '[') {\n      lookupName = '[';\n    }\n\n    if (injectedMethods[lookupName] !== undefined) {\n      var methods = injectedMethods[lookupName];\n      Object.keys(methods).forEach((methodName: string) => {\n        rv[methodName] = methods[methodName][0];\n      });\n    }\n    return rv;\n  }\n\n  /**\n   * Get all of the injected static methods for this class. The value for each\n   * method in the returned map is its type.\n   */\n  public getInjectedStaticMethods(): { [methodName: string]: string } {\n    var rv: { [methodName: string]: string } = {},\n      lookupName = this.getInternalName();\n    // All array classes share the same injected methods.\n    if (lookupName[0] === '[') {\n      lookupName = '[';\n    }\n\n    if (injectedStaticMethods[lookupName] !== undefined) {\n      var methods = injectedStaticMethods[lookupName];\n      Object.keys(methods).forEach((methodName: string) => {\n        rv[methodName] = methods[methodName][0];\n      });\n    }\n    return rv;\n  }\n\n  /**\n   * Get a java.lang.Class object corresponding to this class.\n   */\n  public getClassObject(thread: JVMThread): JVMTypes.java_lang_Class {\n    if (this.jco === null) {\n      this.jco = new ((<ReferenceClassData<JVMTypes.java_lang_Class>> thread.getBsCl().getResolvedClass('Ljava/lang/Class;')).getConstructor(thread))(thread);\n      this.jco.$cls = this;\n      this.jco['java/lang/Class/classLoader'] = this.getLoader().getLoaderObject();\n    }\n    return this.jco;\n  }\n\n  /**\n   * Get the protection domain of this class.\n   * This value is NULL for all but reference classes loaded by app classloaders.\n   */\n  public getProtectionDomain(): JVMTypes.java_security_ProtectionDomain {\n    return null;\n  }\n\n  /**\n   * Retrieves the method defined in this particular class by the given method\n   * signature *without* invoking method lookup.\n   * @param methodSignature The method's full signature, e.g. <clinit>()V\n   */\n  public getMethod(methodSignature: string): methods.Method {\n    return null;\n  }\n\n  /**\n   * Retrieve all of the methods defined on this class.\n   */\n  public getMethods(): methods.Method[] {\n    return [];\n  }\n\n  /**\n   * Retrieve the set of fields defined on this class.\n   */\n  public getFields(): methods.Field[] {\n    return [];\n  }\n\n  /**\n   * Attempt to synchronously resolve this class using its loader. Should only\n   * be called on ClassData in the LOADED state.\n   */\n  public abstract tryToResolve(): boolean;\n\n  /**\n   * Attempt to synchronously initialize this class.\n   */\n  public abstract tryToInitialize(): boolean;\n\n  /**\n   * Set the state of this particular class to LOADED/RESOLVED/INITIALIZED.\n   */\n  public setState(state: enums.ClassState): void {\n    this.state = state;\n  }\n\n  /**\n   * Gets the current state of this class.\n   */\n  protected getState(): enums.ClassState {\n    if (this.state === ClassState.RESOLVED && this.getMethod('<clinit>()V') === null) {\n      // We can promote to INITIALIZED if this class has no static initialization\n      // logic, and its parent class is initialized.\n      var scls = this.getSuperClass();\n      if (scls !== null && scls.getState() === ClassState.INITIALIZED) {\n        this.state = ClassState.INITIALIZED;\n      }\n    }\n    return this.state;\n  }\n\n  /**\n   * Check if the class is initialized.\n   * @param thread The thread that is performing the check. If initialization\n   *   is in progress on that thread, then the class is, for all intents and\n   *   purposes, initialized.\n   */\n  public isInitialized(thread: JVMThread): boolean {\n    return this.getState() === ClassState.INITIALIZED;\n  }\n  // Convenience function.\n  public isResolved(): boolean { return this.getState() !== ClassState.LOADED; }\n\n  public isSubinterface(target: ClassData): boolean {\n    return false;\n  }\n\n  public isSubclass(target: ClassData): boolean {\n    if (this === target) {\n      return true;\n    }\n    if (this.getSuperClass() === null) {\n      return false;\n    }\n    return this.getSuperClass().isSubclass(target);\n  }\n\n  public abstract isCastable(target: ClassData): boolean;\n\n  public resolve(thread: JVMThread, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    throw new Error(\"Unimplemented.\");\n  }\n\n  public initialize(thread: JVMThread, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    throw new Error(\"Unimplemented.\");\n  }\n\n  protected outputInjectedMethods(jsClassName: string, outputStream: StringOutputStream) {\n    var lookupName = this.getInternalName();\n    if (lookupName[0] === '[') {\n      lookupName = '[';\n    }\n    if (injectedMethods[lookupName] !== undefined) {\n      var methods = injectedMethods[lookupName];\n      Object.keys(methods).forEach((methodName: string) => {\n        outputStream.write(`  ${jsClassName}.prototype.${methodName} = ${methods[methodName][1]};\\n`);\n      });\n    }\n\n    if (injectedStaticMethods[lookupName] !== undefined) {\n      var staticMethods = injectedStaticMethods[lookupName];\n      Object.keys(staticMethods).forEach((methodName: string) => {\n        outputStream.write(`  ${jsClassName}.${methodName} = ${staticMethods[methodName][1]};\\n`);\n      });\n    }\n  }\n}\n\nexport class PrimitiveClassData extends ClassData {\n  constructor(className: string, loader: ClassLoader.ClassLoader) {\n    super(loader);\n    this.className = className;\n    // PrimitiveClassData objects are ABSTRACT, FINAL, and PUBLIC.\n    this.accessFlags = new util.Flags(0x411);\n    this.setState(ClassState.INITIALIZED);\n  }\n\n  /**\n   * Returns a boolean indicating if this class is an instance of the target class.\n   * \"target\" is a ClassData object.\n   * The ClassData objects do not need to be initialized; just loaded.\n   */\n  public isCastable(target: ClassData): boolean {\n    return this.className === target.getInternalName();\n  }\n\n  /**\n   * Returns the internal class name for the corresponding boxed type.\n   */\n  public boxClassName(): string {\n    return util.boxClassName(this.className);\n  }\n\n  /**\n   * Returns a boxed version of the given primitive.\n   */\n  public createWrapperObject(thread: JVMThread, value: any): JVMTypes.java_lang_Object {\n    var boxName = this.boxClassName();\n    var boxCls = <ReferenceClassData<JVMTypes.java_lang_Object>> thread.getBsCl().getInitializedClass(thread, boxName);\n    // these are all initialized in preinit (for the BSCL, at least)\n    var boxCons = boxCls.getConstructor(thread);\n    var wrapped = new boxCons(thread);\n    if (boxName !== 'V') {\n      // XXX: all primitive wrappers store their value in a private static final field named 'value'\n      (<any> wrapped)[util.descriptor2typestr(boxName) + '/value'] = value;\n      assert(typeof value === \"number\" || typeof value === \"boolean\" || typeof value.low_ === \"number\", `Invalid primitive value: ${value}`);\n    }\n    return wrapped;\n  }\n\n  public tryToResolve(): boolean {\n    return true;\n  }\n\n  public tryToInitialize(): boolean {\n    return true;\n  }\n\n  /**\n   * Primitive classes are already resolved.\n   */\n  public resolve(thread: JVMThread, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    setImmediate(() => cb(this));\n  }\n}\n\nexport class ArrayClassData<T> extends ClassData {\n  private componentClassName: string;\n  private componentClass: ClassData;\n  private _constructor: IJVMConstructor<JVMTypes.JVMArray<T>> = null;\n\n  constructor(componentType: string, loader: ClassLoader.ClassLoader) {\n    super(loader);\n    this.className = `[${componentType}`;\n    // ArrayClassData objects are ABSTRACT, FINAL, and PUBLIC.\n    this.accessFlags = new util.Flags(0x411);\n    this.componentClassName = componentType;\n  }\n\n  /**\n   * Looks up a method with the given signature. Returns null if no method\n   * found.\n   */\n  public methodLookup(signature: string): methods.Method {\n    return this.superClass.methodLookup(signature);\n  }\n\n  public fieldLookup(name: string): methods.Field {\n    return this.superClass.fieldLookup(name);\n  }\n\n  /**\n   * Resolve the class.\n   */\n  public resolve(thread: JVMThread, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    if (this.isResolved()) {\n      // Short circuit.\n      setImmediate(() => cb(this));\n      return;\n    }\n    util.asyncForEach([\"Ljava/lang/Object;\", this.componentClassName], (cls: string, nextItem: (err?: any) => void) => {\n      this.loader.resolveClass(thread, cls, (cdata: ClassData) => {\n        if (cdata !== null) {\n          nextItem();\n        } else {\n          nextItem(\"Failed.\");\n        }\n      });\n    }, (err?: any) => {\n      if (!err) {\n        this.setResolved(<ReferenceClassData<JVMTypes.java_lang_Object>> this.loader.getResolvedClass(\"Ljava/lang/Object;\"), this.loader.getResolvedClass(this.componentClassName));\n        cb(this);\n      } else {\n        cb(null);\n      }\n    });\n  }\n\n  public getComponentClass(): ClassData {\n    return this.componentClass;\n  }\n\n  /**\n   * Resolved and initialized are the same for array types.\n   */\n  public setResolved<T extends JVMTypes.java_lang_Object>(super_class_cdata: ReferenceClassData<T>, component_class_cdata: ClassData): void {\n    this.superClass = super_class_cdata;\n    this.componentClass = component_class_cdata;\n    this.setState(ClassState.INITIALIZED);\n  }\n\n  public tryToResolve(): boolean {\n    var loader = this.loader,\n      superClassCdata = <ReferenceClassData<JVMTypes.java_lang_Object>> loader.getResolvedClass(\"Ljava/lang/Object;\"),\n      componentClassCdata = loader.getResolvedClass(this.componentClassName);\n\n    if (superClassCdata === null || componentClassCdata === null) {\n      return false;\n    } else {\n      this.setResolved(superClassCdata, componentClassCdata);\n      return true;\n    }\n  }\n\n  public tryToInitialize(): boolean {\n    // Arrays are initialized once resolved.\n    return this.tryToResolve();\n  }\n\n  /**\n   * Returns a boolean indicating if this class is an instance of the target class.\n   * \"target\" is a ClassData object.\n   * The ClassData objects do not need to be initialized; just loaded.\n   * See §2.6.7 for casting rules.\n   */\n  public isCastable(target: ClassData): boolean {\n    if (!(target instanceof ArrayClassData)) {\n      if (target instanceof PrimitiveClassData) {\n        return false;\n      }\n      // Must be a reference type.\n      if (target.accessFlags.isInterface()) {\n        // Interface reference type\n        var type = target.getInternalName();\n        return type === 'Ljava/lang/Cloneable;' || type === 'Ljava/io/Serializable;';\n      }\n      // Non-interface reference type\n      return target.getInternalName() === 'Ljava/lang/Object;';\n    }\n    // We are both array types, so it only matters if my component type can be\n    // cast to its component type.\n    return this.getComponentClass().isCastable((<ArrayClassData<any>> target).getComponentClass());\n  }\n\n  public initialize(thread: JVMThread, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    this.resolve(thread, cb, explicit);\n  }\n\n  /**\n   * Get the array constructor for this particular JVM array class.\n   * Uses typed arrays when available for primitive arrays.\n   */\n  private getJSArrayConstructor(): string {\n    if (!util.typedArraysSupported) {\n      return 'Array';\n    }\n    switch (this.componentClassName) {\n      case 'B':\n        return 'Int8Array';\n      case 'C':\n        return 'Uint16Array';\n      case 'S':\n        return 'Int16Array';\n      case 'I':\n        return 'Int32Array';\n      case 'F':\n        return 'Float32Array';\n      case 'D':\n        return 'Float64Array';\n      default:\n        return 'Array';\n    }\n  }\n\n  /**\n   * Get the initial value placed into each array element.\n   */\n  private getJSDefaultArrayElement(): string {\n    switch(this.componentClassName[0]) {\n      case '[':\n        return `new (cls.getComponentClass().getConstructor())(thread, otherLengths)`;\n      case 'L':\n        return \"null\";\n      case 'J':\n        return \"gLongZero\";\n      default:\n        return \"0\";\n    }\n  }\n\n  /**\n   * Creates a specialized `slice` method that creates a shallow slice of this\n   * array. Specialized to the type of array (JS or Typed).\n   */\n  private _getSliceMethod(): string {\n    var output = new StringOutputStream(),\n      jsArrCons = this.getJSArrayConstructor();\n    output.write(`function(start, end) {\n    var newObj = new this.constructor(null, 0);\\n`);\n    if (jsArrCons === 'Array') {\n      output.write(`    newObj.array = this.array.slice(start, end);\\n`);\n    } else {\n      var elementSize: number;\n      switch (jsArrCons) {\n        case 'Int8Array':\n          elementSize = 1;\n          break;\n        case 'Int16Array':\n        case 'Uint16Array':\n          elementSize = 2;\n          break;\n        case 'Int32Array':\n        case 'Float32Array':\n          elementSize = 4;\n          break;\n        case 'Float64Array':\n          elementSize = 8;\n          break;\n        default:\n          assert(false, \"Illegal array type returned??\");\n      }\n      // Although ArrayBuffer.slice has an optional end argument, we need to\n      // multiply it if it does exist.\n      output.write(`    if (end === undefined) end = this.array.length;\n      ${elementSize > 1 ? `start *= ${elementSize};\\nend *= ${elementSize};` : ''}\n      newObj.array = new ${jsArrCons}(this.array.buffer.slice(start, end));\\n`);\n    }\n    output.write(`    return newObj;\n  }`);\n    return output.flush();\n  }\n\n  private _constructConstructor(thread: JVMThread): IJVMConstructor<JVMTypes.JVMArray<T>> {\n    assert(this._constructor === null, `Tried to construct constructor twice for ${this.getExternalName()}!`);\n    var outputStream = new StringOutputStream(),\n      jsClassName = util.jvmName2JSName(this.getInternalName());\n      // Arguments: extendClass, cls, superCls, gLongZero, thread\n    outputStream.write(`extendClass(${jsClassName}, superCls.getConstructor(thread));\n  function ${jsClassName}(thread, lengths) {\\n`);\n    this.superClass.outputInjectedFields(outputStream);\n    // Initialize array.\n    if (this.componentClassName[0] !== '[') {\n      // Array elements are a non-array type.\n      outputStream.write(`    this.array = new ${this.getJSArrayConstructor()}(lengths);\\n`)\n      if (this.getJSArrayConstructor() === 'Array') {\n        // TypedArrays are already initialized to 0, so this check skips array\n        // initialization in that case.\n        outputStream.write(`    for (var i = 0; i < lengths; i++) {\n      this.array[i] = ${this.getJSDefaultArrayElement()};\n    }\\n`)\n      }\n    } else {\n      // Multi-dimensional array.\n      outputStream.write(`    if (typeof lengths === 'number') {\n        this.array = new ${this.getJSArrayConstructor()}(lengths);\n        for (var i = 0; i < length; i++) {\n          this.array[i] = null;\n        }\n      } else {\n        var length = lengths[0], otherLengths = lengths.length > 2 ? lengths.slice(1) : lengths[1];\n        this.array = new ${this.getJSArrayConstructor()}(length);\n        for (var i = 0; i < length; i++) {\n          this.array[i] = ${this.getJSDefaultArrayElement()};\n        }\n      }\\n`)\n    }\n    outputStream.write(`  }\n\n  ${jsClassName}.prototype.slice = ${this._getSliceMethod()};\n  ${jsClassName}.cls = cls;\\n`);\n    this.outputInjectedMethods(jsClassName, outputStream);\n    outputStream.write(`\n  return ${jsClassName};`);\n    // All arrays extend java/lang/Object\n    // function _create(extendClass, cls, superCls, gLongZero, thread) {\n    const fcn = new Function(\"extendClass\", \"cls\", \"superCls\", \"gLongZero\", \"thread\", \"getRef\", \"util\", outputStream.flush());\n    return fcn(extendClass, this, this.superClass, gLong.ZERO, thread, getRef, util);\n  }\n\n  public getConstructor(thread: JVMThread): IJVMConstructor<JVMTypes.JVMArray<T>> {\n    assert(this.isResolved(), `Tried to get constructor for class ${this.getInternalName()} before it was resolved.`);\n    if (this._constructor === null) {\n      this._constructor = this._constructConstructor(thread);\n    }\n    return this._constructor;\n  }\n}\n\n/**\n * Represents a \"reference\" Class -- that is, a class that neither represents a\n * primitive nor an array.\n */\nexport class ReferenceClassData<T extends JVMTypes.java_lang_Object> extends ClassData {\n  private minorVersion: number;\n  public majorVersion: number;\n  public constantPool: ConstantPool.ConstantPool;\n  /**\n   * All of the fields directly defined by this class.\n   */\n  private fields: methods.Field[];\n  /**\n   * All of the methods directly defined by this class.\n   */\n  private methods: methods.Method[];\n  private attrs: attributes.IAttribute[];\n  private interfaceClasses: ReferenceClassData<JVMTypes.java_lang_Object>[] = null;\n  private superClassRef: ConstantPool.ClassReference = null;\n  private interfaceRefs: ConstantPool.ClassReference[];\n  /**\n   * Initialization lock.\n   */\n  private initLock: ClassLock = new ClassLock();\n  /**\n   * Stores the JavaScript constructor for this class.\n   */\n  private _constructor: IJVMConstructor<T> = null;\n  /**\n   * Virtual field table\n   */\n  private _fieldLookup: { [name: string]: methods.Field } = {};\n  /**\n   * All fields in object instantiations. Fields from super classes are in front\n   * of fields from this class. A field's offset in the array is its *vmindex*.\n   */\n  protected _objectFields: methods.Field[] = [];\n  /**\n   * All static fields in this particular class. The field's offset in this\n   * array is its *vmindex*.\n   */\n  protected _staticFields: methods.Field[] = [];\n  /**\n   * Virtual method table, keyed by method signature. Unlike _vmTable,\n   * _methodLookup contains static methods and constructors, too.\n   */\n  private _methodLookup: { [signature: string]: methods.Method } = {};\n  /**\n   * Virtual method table, keyed by vmindex. Methods originally defined by\n   * super classes are in front of methods defined in this class. Overriding\n   * methods are placed into the vmindex of the originating method.\n   */\n  protected _vmTable: methods.Method[] = [];\n  /**\n   * Default method implementations that this class did *not* inherit, but are\n   * still invocable in the class via their full name (e.g. through an\n   * invokespecial bytecode).\n   */\n  protected _uninheritedDefaultMethods: methods.Method[] = [];\n  /**\n   * The ProtectionDomain for this class, specified by the application class\n   * loader. NULL for bootstrap classloaded items.\n   */\n  protected _protectionDomain: JVMTypes.java_security_ProtectionDomain;\n\n  constructor(buffer: Buffer, protectionDomain?: JVMTypes.java_security_ProtectionDomain, loader?: ClassLoader.ClassLoader, cpPatches?: JVMTypes.JVMArray<JVMTypes.java_lang_Object>) {\n    super(loader);\n    this._protectionDomain = protectionDomain ? protectionDomain : null;\n    var byteStream = new ByteStream(buffer),\n      i: number = 0;\n    if ((byteStream.getUint32()) !== 0xCAFEBABE) {\n      throw new Error(\"Magic number invalid\");\n    }\n    this.minorVersion = byteStream.getUint16();\n    this.majorVersion = byteStream.getUint16();\n    if (!(45 <= this.majorVersion && this.majorVersion <= 52)) {\n      throw new Error(\"Major version invalid\");\n    }\n    this.constantPool = new ConstantPool.ConstantPool();\n    this.constantPool.parse(byteStream, cpPatches);\n    // bitmask for {public,final,super,interface,abstract} class modifier\n    this.accessFlags = new util.Flags(byteStream.getUint16());\n\n    this.className = (<ConstantPool.ClassReference> this.constantPool.get(byteStream.getUint16())).name;\n    // super reference is 0 when there's no super (basically just java.lang.Object)\n    var superRef = byteStream.getUint16();\n    if (superRef !== 0) {\n      this.superClassRef = (<ConstantPool.ClassReference> this.constantPool.get(superRef));\n    }\n    // direct interfaces of this class\n    var isize = byteStream.getUint16();\n    this.interfaceRefs = new Array<ConstantPool.ClassReference>(isize);\n    for (i = 0; i < isize; ++i) {\n      this.interfaceRefs[i] = <ConstantPool.ClassReference> this.constantPool.get(byteStream.getUint16());\n    }\n    // fields of this class\n    var numFields = byteStream.getUint16();\n    this.fields = new Array<methods.Field>(numFields);\n    for (i = 0; i < numFields; ++i) {\n      this.fields[i] = new methods.Field(this, this.constantPool, i, byteStream);\n    }\n    // class methods\n    var numMethods = byteStream.getUint16();\n    this.methods = new Array<methods.Method>(numMethods);\n    for (i = 0; i < numMethods; i++) {\n      var m = new methods.Method(this, this.constantPool, i, byteStream);\n      this.methods[i] = m;\n    }\n    // class attributes\n    this.attrs = attributes.makeAttributes(byteStream, this.constantPool);\n    if (byteStream.hasBytes()) {\n      throw `Leftover bytes in classfile: ${byteStream}`;\n    }\n  }\n\n  public getSuperClassReference(): ConstantPool.ClassReference {\n    return this.superClassRef;\n  }\n\n  public getInterfaceClassReferences(): ConstantPool.ClassReference[] {\n    return this.interfaceRefs.slice(0);\n  }\n\n  /**\n   * Retrieve the set of interfaces that this class implements.\n   * DO NOT MUTATE!\n   */\n  public getInterfaces(): ReferenceClassData<JVMTypes.java_lang_Object>[] {\n    return this.interfaceClasses;\n  }\n\n  /**\n   * The set of fields that this class has.\n   * DO NOT MUTATE!\n   */\n  public getFields(): methods.Field[] {\n    return this.fields;\n  }\n\n  /**\n   * Get the Virtual Method table for this class.\n   */\n  public getVMTable(): methods.Method[] {\n    return this._vmTable;\n  }\n\n  /**\n   * Returns the VM index for the given method. Returns -1 if not present in the\n   * virtual method table (e.g. is static or a constructor).\n   */\n  public getVMIndexForMethod(m: methods.Method): number {\n    // Use M's signature, as we might override the method and use a different\n    // method object in the table for its vmindex.\n    return this._vmTable.indexOf(this.methodLookup(m.signature));\n  }\n\n  /**\n   * Returns the method corresponding to the given VMIndex.\n   */\n  public getMethodFromVMIndex(i: number): methods.Method {\n    if (this._vmTable[i] !== undefined) {\n      return this._vmTable[i];\n    }\n    return null;\n  }\n\n  /**\n   * Get the VM index for the given field\n   * NOTE: A static and non-static field can have the same vmindex! Caller must\n   * be able to differentiate between static and non-static behavior!\n   */\n  public getVMIndexForField(f: methods.Field): number {\n    if (f.accessFlags.isStatic()) {\n      assert(f.cls === this, \"Looks like we actually need to support static field lookups!\");\n      return this._staticFields.indexOf(f);\n    } else {\n      return this._objectFields.indexOf(f);\n    }\n  }\n\n  public getStaticFieldFromVMIndex(index: number): methods.Field {\n    var f = this._staticFields[index];\n    if (f !== undefined) {\n      return f;\n    }\n    return null;\n  }\n\n  public getObjectFieldFromVMIndex(index: number): methods.Field {\n    var f = this._objectFields[index];\n    if (f !== undefined) {\n      return f;\n    }\n    return null;\n  }\n\n  /**\n   * Get a field from its \"slot\". A \"slot\" is just the field's index in its\n   * defining class's field array.\n   */\n  public getFieldFromSlot(slot: number): methods.Field {\n    return this.fields[slot];\n  }\n\n  /**\n   * Get a method from its \"slot\". A \"slot\" is just the method's index in its\n   * defining class's method array.\n   */\n  public getMethodFromSlot(slot: number): methods.Method {\n    return this.methods[slot];\n  }\n\n  /**\n   * Retrieve a method with the given signature from this particular class.\n   * Does not search superclasses / interfaces.\n   */\n  public getMethod(sig: string): methods.Method {\n    var m = this._methodLookup[sig];\n    if (m.cls === this) {\n      return m;\n    }\n    return null;\n  }\n\n  public getSpecificMethod(definingCls: string, sig: string): methods.Method {\n    if (this.getInternalName() === definingCls) {\n      return this.getMethod(sig);\n    }\n    var searchClasses = this.interfaceClasses.slice(0), m: methods.Method;\n    if (this.superClass) {\n      searchClasses.push(this.superClass);\n    }\n    for (var i = 0; i < searchClasses.length; i++) {\n      if (null !== (m = searchClasses[i].getSpecificMethod(definingCls, sig))) {\n        return m;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the methods belonging to this particular class.\n   * DO NOT MUTATE!\n   */\n  public getMethods(): methods.Method[] {\n    return this.methods;\n  }\n\n  /**\n   * Get the set of default methods that are invocable on this object, but were\n   * not inherited in the virtual method table.\n   * DO NOT MUTATE!\n   */\n  public getUninheritedDefaultMethods(): methods.Method[] {\n    return this._uninheritedDefaultMethods;\n  }\n\n  public getProtectionDomain(): JVMTypes.java_security_ProtectionDomain {\n    return this._protectionDomain;\n  }\n\n  /**\n   * Resolves this class's virtual method table according to the JVM\n   * specification:\n   * http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3.3\n   */\n  private _resolveMethods(): void {\n    if (this.superClass !== null) {\n      // Start off with my parents' method table.\n      this._vmTable = this._vmTable.concat(this.superClass._vmTable);\n      Object.keys(this.superClass._methodLookup).forEach((m: string) => {\n        this._methodLookup[m] = this.superClass._methodLookup[m];\n      });\n    }\n\n    // My methods override my super class'.\n    this.methods.forEach((m: methods.Method) => {\n      var superM = this._methodLookup[m.signature];\n      if (!m.accessFlags.isStatic() && m.name !== \"<init>\") {\n        // Only non-static non-constructor methods are placed into the virtual\n        // method table.\n        if (superM === undefined) {\n          // New vmindex.\n          this._vmTable.push(m);\n        } else {\n          // Old vmindex. Inherit the super class method's vmindex.\n          this._vmTable[this._vmTable.indexOf(superM)] = m;\n        }\n      }\n      this._methodLookup[m.signature] = m;\n    });\n\n    // Root out any miranda / default / static interface methods. Only install\n    // them if there are no alternatives already in the table.\n    this.interfaceClasses.forEach((iface: ReferenceClassData<JVMTypes.java_lang_Object>) => {\n      Object.keys(iface._methodLookup).forEach((ifaceMethodSig: string) => {\n        var ifaceM = iface._methodLookup[ifaceMethodSig];\n        if (this._methodLookup[ifaceMethodSig] === undefined) {\n          if (!ifaceM.accessFlags.isStatic()) {\n            // New vmindex.\n            this._vmTable.push(ifaceM);\n          }\n          this._methodLookup[ifaceMethodSig] = ifaceM;\n        } else if (ifaceM.isDefault()) {\n          // Default method; uninherited, but still callable via full signature.\n          this._uninheritedDefaultMethods.push(ifaceM);\n        }\n      });\n    });\n  }\n\n  /**\n   * Resolves all of the fields for this class according to the JVM\n   * specification:\n   * http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3.2\n   */\n  private _resolveFields(): void {\n    if (this.superClass !== null) {\n      // Start off w/ my parent class' fields.\n      this._objectFields = this._objectFields.concat(this.superClass._objectFields);\n      Object.keys(this.superClass._fieldLookup).forEach((f: string) => {\n        this._fieldLookup[f] = this.superClass._fieldLookup[f];\n      });\n    }\n\n    // Superinterface fields trump superclass fields.\n    this.interfaceClasses.forEach((iface: ReferenceClassData<JVMTypes.java_lang_Object>) => {\n      Object.keys(iface._fieldLookup).forEach((ifaceFieldName: string) => {\n        var ifaceF = iface._fieldLookup[ifaceFieldName];\n        assert(ifaceF.accessFlags.isStatic(), \"Interface fields must be static.\");\n        this._fieldLookup[ifaceFieldName] = ifaceF;\n      });\n    });\n\n    // My fields override all other fields.\n    this.fields.forEach((f: methods.Field) => {\n      this._fieldLookup[f.name] = f;\n      if (f.accessFlags.isStatic()) {\n        this._staticFields.push(f);\n      } else {\n        this._objectFields.push(f);\n      }\n    });\n  }\n\n  /**\n   * Looks up a method with the given signature. Returns null if no method\n   * found.\n   */\n  public methodLookup(signature: string): methods.Method {\n    var m = this._methodLookup[signature];\n    if (m !== undefined) {\n      return m;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Performs method lookup, and includes signature polymorphic results if\n   * the method is signature polymorphic.\n   */\n  public signaturePolymorphicAwareMethodLookup(signature: string): methods.Method {\n    var m: methods.Method;\n    if (null !== (m = this.methodLookup(signature))) {\n      return m;\n    } else if (this.className === 'Ljava/lang/invoke/MethodHandle;') {\n      // Check if this is a signature polymorphic method.\n      // From S2.9:\n      // A method is signature polymorphic if and only if all of the following conditions hold :\n      // * It is declared in the java.lang.invoke.MethodHandle class.\n      // * It has a single formal parameter of type Object[].\n      // * It has a return type of Object.\n      // * It has the ACC_VARARGS and ACC_NATIVE flags set.\n      var polySig = `${signature.slice(0, signature.indexOf('('))}([Ljava/lang/Object;)Ljava/lang/Object;`,\n        m = this._methodLookup[polySig];\n      if (m !== undefined && m.accessFlags.isNative() && m.accessFlags.isVarArgs() && m.cls === this) {\n        return m;\n      }\n    } else if (this.superClass !== null) {\n      return this.superClass.signaturePolymorphicAwareMethodLookup(signature);\n    }\n    return null;\n  }\n\n  /**\n   * Looks up a field with the given name. Returns null if no method found.\n   */\n  public fieldLookup(name: string): methods.Field {\n    var f = this._fieldLookup[name];\n    if (f !== undefined) {\n      return f;\n    } else {\n      return null;\n    }\n  }\n\n  public getAttribute(name: string): attributes.IAttribute {\n    var attrs = this.attrs;\n    for (var i = 0; i < attrs.length; i++) {\n      var attr = attrs[i];\n      if (attr.getName() === name) {\n        return attr;\n      }\n    }\n    return null;\n  }\n\n  public getAttributes(name: string): attributes.IAttribute[] {\n    var attrs = this.attrs;\n    var results : attributes.IAttribute[] = [];\n    for (var i = 0; i < attrs.length; i++) {\n      var attr = attrs[i];\n      if (attr.getName() === name) {\n        results.push(attr);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the bootstrap method information for an InvokeDynamic opcode.\n   */\n  public getBootstrapMethod(idx: number): [ConstantPool.MethodHandle, ConstantPool.IConstantPoolItem[]] {\n    var bms = <attributes.BootstrapMethods> this.getAttribute('BootstrapMethods');\n    return bms.bootstrapMethods[idx];\n  }\n\n  /**\n   * Returns the initial value for a given static field in the class. Should\n   * only be called when the constructor is created.\n   */\n  private _getInitialStaticFieldValue(thread: JVMThread, name: string): any {\n    var f: methods.Field = this.fieldLookup(name);\n    if (f !== null && f.accessFlags.isStatic()) {\n      var cva = <attributes.ConstantValue> f.getAttribute('ConstantValue');\n      if (cva !== null) {\n        switch (cva.value.getType()) {\n          case enums.ConstantPoolItemType.STRING:\n            var stringCPI = <ConstantPool.ConstString> cva.value;\n            if (stringCPI.value === null) {\n              stringCPI.value = thread.getJVM().internString(stringCPI.stringValue);\n            }\n            return stringCPI.value;\n          default:\n            // TODO: Type better.\n            return (<any> cva.value).value;\n        }\n      } else {\n        return util.initialValue(f.rawDescriptor);\n      }\n    }\n    assert(false, `Tried to construct a static field value that ${f !== null ? \"isn't static\" : \"doesn't exist\"}: ${f !== null ? f.cls.getInternalName() : this.getInternalName()} ${name}`);\n  }\n\n  public setResolved(superClazz: ReferenceClassData<JVMTypes.java_lang_Object>, interfaceClazzes: ReferenceClassData<JVMTypes.java_lang_Object>[]): void {\n    this.superClass = superClazz;\n    trace(`Class ${this.getInternalName()} is now resolved.`);\n    this.interfaceClasses = interfaceClazzes;\n    // TODO: Assert we are not already resolved or initialized?\n    this._resolveMethods();\n    this._resolveFields();\n    this.setState(ClassState.RESOLVED);\n  }\n\n  public tryToResolve(): boolean {\n    if (this.getState() === ClassState.LOADED) {\n      // Need to grab the super class, and interfaces.\n      var loader = this.loader,\n        toResolve = this.superClassRef !== null ? this.interfaceRefs.concat(this.superClassRef) : this.interfaceRefs,\n        allGood = true,\n        resolvedItems: ReferenceClassData<JVMTypes.java_lang_Object>[] = [], i: number,\n        item: ConstantPool.ClassReference;\n      for (i = 0; i < toResolve.length; i++) {\n        item = toResolve[i];\n        if (item.tryResolve(loader)) {\n          resolvedItems.push(<ReferenceClassData<JVMTypes.java_lang_Object>> item.cls);\n        } else {\n          return false;\n        }\n      }\n\n      // It worked!\n      this.setResolved(this.superClassRef !== null ? resolvedItems.pop() : null, resolvedItems);\n    }\n    return true;\n  }\n\n  /**\n   * Attempt to synchronously initialize. This is possible if there is no\n   * static initializer, and the parent classes are properly initialized.\n   */\n  public tryToInitialize(): boolean {\n    if (this.getState() === ClassState.INITIALIZED) {\n      // Already initialized.\n      return true;\n    }\n\n    if (this.getState() === ClassState.RESOLVED || this.tryToResolve()) {\n      // Ensure parent is initialized.\n      if (this.superClass !== null && !this.superClass.tryToInitialize()) {\n        // Parent failed to initialize.\n        return false;\n      }\n\n      // Check if this class has a static initializer.\n      var clinit = this.getMethod('<clinit>()V');\n      if (clinit !== null) {\n        // Nope; this class needs to do the full initialization song-and-dance.\n        return false;\n      } else {\n        // No static initializer! This class is initialized!\n        this.setState(ClassState.INITIALIZED);\n        return true;\n      }\n    }\n\n    // This class is not resolved.\n    return false;\n  }\n\n  /**\n   * Returns a boolean indicating if this class is an instance of the target class.\n   * \"target\" is a ClassData object.\n   * The ClassData objects do not need to be initialized; just loaded.\n   * See §2.6.7 for casting rules.\n   * @todo Determine this statically to make this a constant time operation.\n   */\n  public isCastable(target: ClassData): boolean {\n    if (!(target instanceof ReferenceClassData)) {\n      return false;\n    }\n    if (this.accessFlags.isInterface()) {\n      // We are both interfaces\n      if (target.accessFlags.isInterface()) {\n        return this.isSubinterface(target);\n      }\n      // Only I am an interface\n      if (!target.accessFlags.isInterface()) {\n        return target.getInternalName() === 'Ljava/lang/Object;';\n      }\n    } else {\n      // I am a regular class, target is an interface\n      if (target.accessFlags.isInterface()) {\n        return this.isSubinterface(target);\n      }\n      // We are both regular classes\n      return this.isSubclass(target);\n    }\n  }\n\n  /**\n   * Returns 'true' if I implement the target interface.\n   */\n  public isSubinterface(target: ClassData): boolean {\n    if (this.className === target.getInternalName()) {\n      return true;\n    }\n    var ifaces = this.getInterfaces();\n    for (var i = 0; i < ifaces.length; i++) {\n      var superIface = ifaces[i];\n      if (superIface.isSubinterface(target)) {\n        return true;\n      }\n    }\n    if (this.getSuperClass() == null) {\n      return false;\n    }\n    return this.getSuperClass().isSubinterface(target);\n  }\n\n  /**\n   * Asynchronously *initializes* the class and its super classes.\n   * Throws a Java exception on the thread if initialization fails.\n   * @param thread The thread that is performing the initialization.\n   * @param cb Callback to invoke when completed. Contains a reference to the\n   *   class if it succeeds, or NULL if a failure occurs.\n   * @param [explicit] Defaults to true. If true, this class is being\n   *   *explicitly* initialized by a user. If false, the JVM is implicitly\n   *   initializing the class.\n   */\n  public initialize(thread: JVMThread, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    if (this.isResolved()) {\n      if (this.isInitialized(thread)) {\n        // Nothing to do! Either resolution failed and an exception has already\n        // been thrown, cdata is already initialized, or the current thread is\n        // initializing the class.\n        setImmediate(() => {\n          cb(this);\n        });\n      } else if (this.initLock.tryLock(thread, cb)) {\n        // Initialize the super class, and then this class.\n        if (this.superClass != null) {\n          this.superClass.initialize(thread, (cdata: ClassData) => {\n            if (cdata == null) {\n              // Nothing to do. Initializing the super class failed.\n              this.initLock.unlock(null);\n            } else {\n              // Initialize myself.\n              this._initialize(thread, (cdata: ClassData) => {\n                this.initLock.unlock(cdata);\n              });\n            }\n          }, explicit);\n        } else {\n          // java/lang/Object's parent is NULL.\n          // Continue initializing this class.\n          this._initialize(thread, (cdata: ClassData) => {\n            this.initLock.unlock(cdata);\n          });\n        }\n      }\n    } else {\n      // Resolve first, then initialize.\n      this.resolve(thread, (cdata: ClassData) => {\n        if (cdata !== null) {\n          this.initialize(thread, cb, explicit);\n        } else {\n          // Else: An exception was thrown.\n          cb(cdata);\n        }\n      }, explicit);\n    }\n  }\n\n  /**\n   * Helper function. Initializes this class alone. Assumes super class is\n   * already initialized.\n   */\n  private _initialize(thread: JVMThread, cb: (cdata: ClassData) => void): void {\n    var cons = <typeof JVMTypes.java_lang_Object> <any> this.getConstructor(thread);\n    if (cons['<clinit>()V'] !== undefined) {\n      debug(`T${thread.getRef()} Running static initialization for class ${this.className}...`);\n      cons['<clinit>()V'](thread, null, (e?: JVMTypes.java_lang_Throwable) => {\n        if (e) {\n          debug(`Initialization of class ${this.className} failed.`);\n          this.setState(enums.ClassState.RESOLVED);\n          /**\n           * \"The class or interface initialization method must have completed\n           *  abruptly by throwing some exception E. If the class of E is not\n           *  Error or one of its subclasses, then create a new instance of the\n           *  class ExceptionInInitializerError with E as the argument, and use\n           *  this object in place of E.\"\n           * @url http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-5.html#jvms-5.5\n           */\n          if (e.getClass().isCastable(thread.getBsCl().getResolvedClass('Ljava/lang/Error;'))) {\n            // 'e' is 'Error or one of its subclasses'.\n            thread.throwException(e);\n            cb(null);\n          } else {\n            // Wrap the error.\n            thread.getBsCl().initializeClass(thread, 'Ljava/lang/ExceptionInInitializerError;', (cdata: ReferenceClassData<JVMTypes.java_lang_ExceptionInInitializerError>) => {\n              if (cdata == null) {\n                // Exceptional failure right here: *We failed to construct ExceptionInInitializerError*!\n                // initializeClass will throw an exception on our behalf;\n                // nothing to do.\n                cb(null);\n              } else {\n                // Construct the object!\n                var eCons = cdata.getConstructor(thread),\n                  e2 = new eCons(thread);\n                // Construct the ExceptionInInitializerError!\n                e2[\"<init>(Ljava/lang/Throwable;)V\"](thread, [e], (e?: JVMTypes.java_lang_Throwable) => {\n                  // Throw the newly-constructed error!\n                  thread.throwException(e2);\n                  cb(null);\n                });\n              }\n            });\n          }\n        } else {\n          this.setState(enums.ClassState.INITIALIZED);\n          debug(`Initialization of class ${this.className} succeeded.`);\n          // Normal case! Initialization succeeded.\n          cb(this);\n        }\n      });\n    } else {\n      // Class doesn't have a static initializer.\n      this.setState(enums.ClassState.INITIALIZED);\n      cb(this);\n    }\n  }\n\n  /**\n   * A reference class can be treated as initialized in a thread if that thread\n   * is in the process of initializing it.\n   */\n  public isInitialized(thread: JVMThread): boolean {\n    return this.getState() === ClassState.INITIALIZED || this.initLock.getOwner() === thread;\n  }\n\n  /**\n   * Resolve the class.\n   */\n  public resolve(thread: JVMThread, cb: (cdata: ClassData) => void, explicit: boolean = true): void {\n    var toResolve: ConstantPool.ClassReference[] = this.interfaceRefs.slice(0);\n    if (this.superClassRef !== null) {\n      toResolve.push(this.superClassRef);\n    }\n    toResolve = toResolve.filter((item: ConstantPool.ClassReference) => !item.isResolved());\n    util.asyncForEach(toResolve, (clsRef: ConstantPool.ClassReference, nextItem: (err?: any) => void) => {\n      clsRef.resolve(thread, this.loader, this, (status: boolean) => {\n        if (!status) {\n          nextItem(\"Failed.\");\n        } else {\n          nextItem();\n        }\n      }, explicit);\n    }, (err?: any) => {\n      if (!err) {\n        this.setResolved(this.superClassRef !== null ? <ReferenceClassData<JVMTypes.java_lang_Object>> this.superClassRef.cls : null, this.interfaceRefs.map((ref: ConstantPool.ClassReference) => <ReferenceClassData<JVMTypes.java_lang_Object>> ref.cls));\n        cb(this);\n      } else {\n        cb(null);\n      }\n    });\n  }\n\n  /**\n   * Find Miranda and default interface methods in this class. These\n   * methods manifest as new vmindices in the virtual method table compared with\n   * the superclass, and are not defined in this class itself.\n   */\n  public getMirandaAndDefaultMethods(): methods.Method[] {\n    var superClsMethodTable: methods.Method[] = this.superClass !== null ? this.superClass.getVMTable() : [];\n    return this.getVMTable().slice(superClsMethodTable.length).filter((method: methods.Method) => method.cls !== this);\n  }\n\n  public outputInjectedFields(outputStream: StringOutputStream) {\n    if (this.superClass !== null) {\n      this.superClass.outputInjectedFields(outputStream);\n    }\n    var injected = injectedFields[this.getInternalName()];\n    if (injected !== undefined) {\n      Object.keys(injected).forEach((fieldName: string) => {\n        outputStream.write(`this.${fieldName} = ${injected[fieldName][1]};\\n`);\n      });\n    }\n  }\n\n  protected _constructConstructor(thread: JVMThread): IJVMConstructor<T> {\n    assert(this._constructor === null, `Attempted to construct constructor twice for class ${this.getExternalName()}!`);\n\n    var jsClassName = util.jvmName2JSName(this.getInternalName()),\n      outputStream = new StringOutputStream();\n\n    // Expects args: extendClass, cls, InternalStackFrame, NativeStackFrame, BytecodeStackFrame, gLongZero, ClassLoader, Monitor, thread\n    outputStream.write(`if (cls.superClass !== null) {\n    extendClass(${jsClassName}, cls.superClass.getConstructor(thread));\n  }\n  function ${jsClassName}(thread) {\\n`);\n    // Injected fields.\n    this.outputInjectedFields(outputStream);\n\n    // Output instance field assignments.\n    this._objectFields.forEach((f: methods.Field) => f.outputJavaScriptField(jsClassName, outputStream));\n    outputStream.write(`  }\n  ${jsClassName}.cls = cls;\\n`);\n\n    // Injected methods.\n    this.outputInjectedMethods(jsClassName, outputStream);\n\n    // Static fields.\n    this._staticFields.forEach((f: methods.Field) => f.outputJavaScriptField(jsClassName, outputStream));\n\n    // Static and instance methods.\n    this.getMethods().forEach((m: methods.Method) => m.outputJavaScriptFunction(jsClassName, outputStream));\n\n    // Miranda and default interface methods.\n    this.getMirandaAndDefaultMethods().forEach((m: methods.Method) => m.outputJavaScriptFunction(jsClassName, outputStream));\n\n    // Uninherited default methods.\n    this.getUninheritedDefaultMethods().forEach((m: methods.Method) => m.outputJavaScriptFunction(jsClassName, outputStream, true));\n\n    outputStream.write(`  return ${jsClassName};`);\n\n    var evalText = outputStream.flush();\n    // NOTE: Thread will be null during system bootstrapping.\n    if (typeof RELEASE === 'undefined' && thread !== null && thread.getJVM().shouldDumpCompiledCode()) {\n      thread.getJVM().dumpObjectDefinition(this, evalText);\n    }\n    const fcn = new Function(\"extendClass\", \"cls\", \"InternalStackFrame\", \"NativeStackFrame\", \"BytecodeStackFrame\", \"gLongZero\", \"ClassLoader\", \"Monitor\", \"thread\", \"getRef\", \"util\", evalText);\n    return fcn(extendClass, this, InternalStackFrame, NativeStackFrame, BytecodeStackFrame, gLong.ZERO, require('./ClassLoader'), require('./Monitor'), thread, getRef, util);\n  }\n\n  public getConstructor(thread: JVMThread): IJVMConstructor<T> {\n    if (this._constructor == null) {\n      assert(this.isResolved(), `Cannot construct ${this.getInternalName()}'s constructor until it is resolved.`);\n      this._constructor = this._constructConstructor(thread);\n    }\n    return this._constructor;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/ClassData.ts\n **/","﻿\"use strict\";\nimport gLong = require('./gLong');\nimport assert = require('./assert');\n\n/**\n * A ByteStream, implemented using a NodeBuffer.\n */\nclass ByteStream {\n  private _index: number = 0;\n\n  constructor(private buffer: NodeBuffer) {}\n\n  /**\n   * Returns the current read index, and increments the index by the indicated\n   * amount.\n   */\n  private incIndex(inc: number): number {\n    var readIndex = this._index;\n    this._index += inc;\n    return readIndex;\n  }\n\n  public rewind(): void {\n    this._index = 0;\n  }\n\n  public seek(idx: number) {\n    assert(idx >= 0 && idx < this.buffer.length, \"Invalid seek position.\");\n    this._index = idx;\n  }\n\n  public pos(): number {\n    return this._index;\n  }\n\n  public skip(bytesCount: number): void {\n    this._index += bytesCount;\n  }\n\n  public hasBytes(): boolean {\n    return this._index < this.buffer.length;\n  }\n\n  public getFloat(): number {\n    return this.buffer.readFloatBE(this.incIndex(4));\n  }\n\n  public getDouble(): number {\n    return this.buffer.readDoubleBE(this.incIndex(8));\n  }\n\n  public getUint(byteCount: number): number {\n    switch (byteCount) {\n      case 1:\n        return this.getUint8();\n      case 2:\n        return this.getUint16();\n      case 4:\n        return this.getUint32();\n      default:\n        throw new Error(\"Invalid byte count for getUint: \" + byteCount);\n    }\n  }\n\n  public getInt(byteCount: number): number {\n    switch (byteCount) {\n      case 1:\n        return this.getInt8();\n      case 2:\n        return this.getInt16();\n      case 4:\n        return this.getInt32();\n      default:\n        throw new Error(\"Invalid byte count for getUint: \" + byteCount);\n    }\n  }\n\n  public getUint8(): number {\n    return this.buffer.readUInt8(this.incIndex(1));\n  }\n\n  public getUint16(): number {\n    return this.buffer.readUInt16BE(this.incIndex(2));\n  }\n\n  public getUint32(): number {\n    return this.buffer.readUInt32BE(this.incIndex(4));\n  }\n\n  public getInt8(): number {\n    return this.buffer.readInt8(this.incIndex(1));\n  }\n\n  public getInt16(): number {\n    return this.buffer.readInt16BE(this.incIndex(2));\n  }\n\n  public getInt32(): number {\n    return this.buffer.readInt32BE(this.incIndex(4));\n  }\n\n  public getInt64(): gLong {\n    var high = this.getUint32();\n    var low = this.getUint32();\n    return gLong.fromBits(low, high);\n  }\n\n  public read(bytesCount: number): Buffer {\n    var rv = this.buffer.slice(this._index, this._index + bytesCount);\n    this._index += bytesCount;\n    return rv;\n  }\n\n  public peek(): number {\n    return this.buffer.readUInt8(this._index);\n  }\n\n  public size(): number {\n    return this.buffer.length - this._index;\n  }\n\n  public slice(len: number): ByteStream {\n    var arr = new ByteStream(this.buffer.slice(this._index, this._index + len));\n    this._index += len;\n    return arr;\n  }\n\n  public getBuffer(): NodeBuffer {\n    return this.buffer;\n  }\n}\n\nexport = ByteStream;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/ByteStream.ts\n **/","\"use strict\";\nimport gLong = require('./gLong');\nimport ByteStream = require('./ByteStream');\nimport util = require('./util');\nimport enums = require('./enums');\nimport assert = require('./assert');\nimport ClassData = require('./ClassData');\nimport methods = require('./methods');\nimport ClassLoader = require('./ClassLoader');\n// For type information.\nimport threading = require('./threading');\nimport JVMTypes = require('../includes/JVMTypes');\n\n/**\n * Represents a constant pool item. Use the item's type to discriminate among them.\n */\nexport interface IConstantPoolItem {\n  getType(): enums.ConstantPoolItemType;\n  /**\n   * Is this constant pool item resolved? Use to discriminate among resolved\n   * and unresolved reference types.\n   */\n  isResolved(): boolean;\n  /**\n   * Returns the constant associated with the constant pool item. The item *must*\n   * be resolved.\n   * Only defined on constant pool items that return values through LDC.\n   */\n  getConstant?(thread: threading.JVMThread): any;\n  /**\n   * Resolves an unresolved constant pool item. Can only be called if\n   * isResolved() returns false.\n   */\n  resolve?(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void, explicit?: boolean): void;\n}\n\n/**\n * All constant pool items have a static constructor function.\n */\nexport interface IConstantPoolType {\n  fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem;\n  /**\n   * The resulting size in the constant pool, in machine words.\n   */\n  size: number;\n  /**\n   * The bytesize on disk of the item's information past the tag byte.\n   */\n  infoByteSize: number;\n}\n/**\n * Stores all of the constant pool classes, keyed on their enum value.\n */\nvar CP_CLASSES: { [n: number]: IConstantPoolType } = {};\n\n// #region Tier 0\n\n/**\n * Represents a constant UTF-8 string.\n * ```\n * CONSTANT_Utf8_info {\n *   u1 tag;\n *   u2 length;\n *   u1 bytes[length];\n * }\n * ```\n */\nexport class ConstUTF8 implements IConstantPoolItem {\n  public value: string;\n  constructor(rawBytes: Buffer) {\n    this.value = this.bytes2str(rawBytes);\n  }\n\n  /**\n   * Parse Java's pseudo-UTF-8 strings into valid UTF-16 codepoints (spec 4.4.7)\n   * Note that Java uses UTF-16 internally by default for string representation,\n   * and the pseudo-UTF-8 strings are *only* used for serialization purposes.\n   * Thus, there is no reason for other parts of the code to call this routine!\n   * TODO: To avoid copying, create a character array for this data.\n   * http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7\n   */\n  private bytes2str(bytes: Buffer): string {\n    var y: number, z: number, v: number, w: number, x: number, charCode: number, idx = 0, rv = '';\n    while (idx < bytes.length) {\n      x = bytes.readUInt8(idx++) & 0xff;\n      // While the standard specifies that surrogate pairs should be handled, it seems like\n      // they are by default with the three byte format. See parsing code here:\n      // http://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/file/3623f1b29b58/src/share/classes/java/io/DataInputStream.java#l618\n\n      // One UTF-16 character.\n      if (x <= 0x7f) {\n        // One character, one byte.\n        charCode = x;\n      } else if (x <= 0xdf) {\n        // One character, two bytes.\n        y = bytes.readUInt8(idx++);\n        charCode = ((x & 0x1f) << 6) + (y & 0x3f);\n      } else {\n        // One character, three bytes.\n        y = bytes.readUInt8(idx++);\n        z = bytes.readUInt8(idx++);\n        charCode = ((x & 0xf) << 12) + ((y & 0x3f) << 6) + (z & 0x3f);\n      }\n      rv += String.fromCharCode(charCode);\n    }\n\n    return rv;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.UTF8;\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.value; }\n\n  public isResolved() { return true; }\n\n  public static size: number = 1;\n  // Variable-size.\n  public static infoByteSize: number = 0;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var strlen = byteStream.getUint16();\n    return new this(byteStream.read(strlen));\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.UTF8] = ConstUTF8;\n\n/**\n * Represents a constant 32-bit integer.\n * ```\n * CONSTANT_Integer_info {\n *   u1 tag;\n *   u4 bytes;\n * }\n * ```\n */\nexport class ConstInt32 implements IConstantPoolItem {\n  public value: number;\n  constructor(value: number) {\n    this.value = value;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.INTEGER;\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.value; }\n\n  public isResolved() { return true; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 4;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    return new this(byteStream.getInt32());\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.INTEGER] = ConstInt32;\n\n/**\n * Represents a constant 32-bit floating point number.\n * ```\n * CONSTANT_Float_info {\n *   u1 tag;\n *   u4 bytes;\n * }\n * ```\n */\nexport class ConstFloat implements IConstantPoolItem {\n  public value: number;\n  constructor(value: number) {\n    this.value = value;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.FLOAT;\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.value; }\n\n  public isResolved() { return true; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 4;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    return new this(byteStream.getFloat());\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.FLOAT] = ConstFloat;\n\n/**\n * Represents a constant 64-bit integer.\n * ```\n * CONSTANT_Long_info {\n *   u1 tag;\n *   u4 high_bytes;\n *   u4 low_bytes;\n * }\n * ```\n */\nexport class ConstLong implements IConstantPoolItem {\n  public value: gLong;\n  constructor(value: gLong) {\n    this.value = value;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.LONG;\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.value; }\n\n  public isResolved() { return true; }\n\n  public static size: number = 2;\n  public static infoByteSize: number = 8;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    return new this(byteStream.getInt64());\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.LONG] = ConstLong;\n\n/**\n * Represents a constant 64-bit floating point number.\n * ```\n * CONSTANT_Double_info {\n *   u1 tag;\n *   u4 high_bytes;\n *   u4 low_bytes;\n * }\n * ```\n */\nexport class ConstDouble implements IConstantPoolItem {\n  public value: number;\n  constructor(value: number) {\n    this.value = value;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.DOUBLE;\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.value; }\n\n  public isResolved() { return true; }\n\n  public static size: number = 2;\n  public static infoByteSize: number = 8;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    return new this(byteStream.getDouble());\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.DOUBLE] = ConstDouble;\n\n// #endregion\n\n// #region Tier 1\n\n/**\n * Represents a class or interface.\n * ```\n * CONSTANT_Class_info {\n *   u1 tag;\n *   u2 name_index;\n * }\n * ```\n * @todo Have a classloader-local cache of class reference objects.\n */\nexport class ClassReference implements IConstantPoolItem {\n  /**\n   * The name of the class, in full descriptor form, e.g.:\n   * Lfoo/bar/Baz;\n   */\n  public name: string;\n  /**\n   * The resolved class reference.\n   */\n  public cls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object> | ClassData.ArrayClassData<any> = null;\n  /**\n   * The JavaScript constructor for the referenced class.\n   */\n  public clsConstructor: ClassData.IJVMConstructor<JVMTypes.java_lang_Object> = null;\n  /**\n   * The array class for the resolved class reference.\n   */\n  public arrayClass: ClassData.ArrayClassData<any> = null;\n  /**\n   * The JavaScript constructor for the array class.\n   */\n  public arrayClassConstructor: ClassData.IJVMConstructor<JVMTypes.JVMArray<any>> = null;\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Attempt to synchronously resolve.\n   */\n  public tryResolve(loader: ClassLoader.ClassLoader): boolean {\n    if (this.cls === null) {\n      this.cls = <ClassData.ReferenceClassData<JVMTypes.java_lang_Object>> loader.getResolvedClass(this.name);\n    }\n    return this.cls !== null;\n  }\n\n  /**\n   * Resolves the class reference by resolving the class. Does not run\n   * class initialization.\n   */\n  public resolve(thread: threading.JVMThread, loader: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void, explicit: boolean = true) {\n    // Because of Java 8 anonymous classes, THIS CHECK IS REQUIRED FOR CORRECTNESS.\n    // (ClassLoaders do not know about anonymous classes, hence they are\n    //  'anonymous')\n    // (Anonymous classes are an 'Unsafe' feature, and are not part of the standard,\n    //  but they are employed for lambdas and such.)\n    // NOTE: Thread is 'null' during JVM bootstrapping.\n    if (thread !== null) {\n      var currentMethod = thread.currentMethod();\n      // The stack might be empty during resolution, which occurs during JVM bootup.\n      if (currentMethod !== null && this.name === currentMethod.cls.getInternalName()) {\n        this.setResolved(thread, thread.currentMethod().cls);\n        return cb(true);\n      }\n    }\n\n    loader.resolveClass(thread, this.name, (cdata: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>) => {\n      this.setResolved(thread, cdata);\n      cb(cdata !== null);\n    }, explicit);\n  }\n\n  private setResolved(thread: threading.JVMThread, cls: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>) {\n    this.cls = cls;\n    if (cls !== null) {\n      this.clsConstructor = cls.getConstructor(thread);\n    }\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.CLASS;\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.cls.getClassObject(thread); }\n\n  public isResolved() { return this.cls !== null; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 2;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var nameIndex = byteStream.getUint16(),\n      cpItem = constantPool.get(nameIndex);\n    assert(cpItem.getType() === enums.ConstantPoolItemType.UTF8,\n      'ConstantPool ClassReference type != UTF8');\n    // The ConstantPool stores class names without the L...; descriptor stuff\n    return new this(util.typestr2descriptor((<ConstUTF8> cpItem).value));\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.CLASS] = ClassReference;\n\n/**\n * Represents a field or method without indicating which class or interface\n * type it belongs to.\n * ```\n * CONSTANT_NameAndType_info {\n *   u1 tag;\n *   u2 name_index;\n *   u2 descriptor_index;\n * }\n * ```\n */\nexport class NameAndTypeInfo implements IConstantPoolItem {\n  public name: string;\n  public descriptor: string;\n  constructor(name: string, descriptor: string) {\n    this.name = name;\n    this.descriptor = descriptor;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.NAME_AND_TYPE;\n  }\n\n  public isResolved() { return true; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 4;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var nameIndex = byteStream.getUint16(),\n      descriptorIndex = byteStream.getUint16(),\n      nameConst = <ConstUTF8> constantPool.get(nameIndex),\n      descriptorConst = <ConstUTF8> constantPool.get(descriptorIndex);\n    assert(nameConst.getType() === enums.ConstantPoolItemType.UTF8 &&\n      descriptorConst.getType() === enums.ConstantPoolItemType.UTF8,\n      'ConstantPool NameAndTypeInfo types != UTF8');\n    return new this(nameConst.value, descriptorConst.value);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.NAME_AND_TYPE] = NameAndTypeInfo;\n\n/**\n * Represents constant objects of the type java.lang.String.\n * ```\n * CONSTANT_String_info {\n *   u1 tag;\n *   u2 string_index;\n * }\n * ```\n */\nexport class ConstString implements IConstantPoolItem {\n  public stringValue: string;\n  public value: JVMTypes.java_lang_String = null;\n  constructor(stringValue: string) {\n    this.stringValue = stringValue;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.STRING;\n  }\n\n  public resolve(thread: threading.JVMThread, loader: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void) {\n    this.value = thread.getJVM().internString(this.stringValue);\n    setImmediate(() => cb(true));\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.value; }\n\n  public isResolved() { return this.value !== null; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 2;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var stringIndex = byteStream.getUint16(),\n      utf8Info = <ConstUTF8> constantPool.get(stringIndex);\n    assert(utf8Info.getType() === enums.ConstantPoolItemType.UTF8,\n      'ConstantPool ConstString type != UTF8');\n    return new this(utf8Info.value);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.STRING] = ConstString;\n\n/**\n * Represents a given method type.\n * ```\n * CONSTANT_MethodType_info {\n *   u1 tag;\n *   u2 descriptor_index;\n * }\n * ```\n */\nexport class MethodType implements IConstantPoolItem {\n  private descriptor: string;\n  public methodType: JVMTypes.java_lang_invoke_MethodType = null;\n  constructor(descriptor: string) {\n    this.descriptor = descriptor;\n  }\n\n  public resolve(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void) {\n    util.createMethodType(thread, cl, this.descriptor, (e: JVMTypes.java_lang_Throwable, type: JVMTypes.java_lang_invoke_MethodType) => {\n      if (e) {\n        thread.throwException(e);\n        cb(false);\n      } else {\n        this.methodType = type;\n        cb(true);\n      }\n    });\n  }\n\n  public getConstant(thread: threading.JVMThread) { return this.methodType; }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.METHOD_TYPE;\n  }\n\n  public isResolved() { return this.methodType !== null; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 2;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var descriptorIndex = byteStream.getUint16(),\n      utf8Info = <ConstUTF8> constantPool.get(descriptorIndex);\n    assert(utf8Info.getType() === enums.ConstantPoolItemType.UTF8,\n      'ConstantPool MethodType type != UTF8');\n    return new this(utf8Info.value);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.METHOD_TYPE] = MethodType;\n\n// #endregion\n\n// #region Tier 2\n\n/**\n * Represents a particular method.\n * ```\n * CONSTANT_Methodref_info {\n *   u1 tag;\n *   u2 class_index;\n *   u2 name_and_type_index;\n * }\n * ```\n */\nexport class MethodReference implements IConstantPoolItem {\n  public classInfo: ClassReference;\n  public nameAndTypeInfo: NameAndTypeInfo;\n  public method: methods.Method = null;\n  /**\n   * The signature of the method, without the owning class.\n   * e.g. foo(IJ)V\n   */\n  public signature: string;\n  /**\n   * The signature of the method, including the owning class.\n   * e.g. bar/Baz/foo(IJ)V\n   */\n  public fullSignature: string = null;\n  public paramWordSize: number = -1;\n  /**\n   * Contains a reference to the MemberName object for the method that invokes\n   * the desired function.\n   */\n  public memberName: JVMTypes.java_lang_invoke_MemberName = null;\n  /**\n   * Contains an object that needs to be pushed onto the stack before invoking\n   * memberName.\n   */\n  public appendix: JVMTypes.java_lang_Object = null;\n  /**\n   * The JavaScript constructor for the class that the method belongs to.\n   */\n  public jsConstructor: any = null;\n\n  constructor(classInfo: ClassReference, nameAndTypeInfo: NameAndTypeInfo) {\n    this.classInfo = classInfo;\n    this.nameAndTypeInfo = nameAndTypeInfo;\n    this.signature = this.nameAndTypeInfo.name + this.nameAndTypeInfo.descriptor;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.METHODREF;\n  }\n\n  /**\n   * Checks the method referenced by this constant pool item in the specified\n   * bytecode context.\n   * Returns null if an error occurs.\n   * - Throws a NoSuchFieldError if missing.\n   * - Throws an IllegalAccessError if field is inaccessible.\n   * - Throws an IncompatibleClassChangeError if the field is an incorrect type\n   *   for the field access.\n   */\n  public hasAccess(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, isStatic: boolean): boolean {\n    var method = this.method, accessingCls = frame.method.cls;\n    if (method.accessFlags.isStatic() !== isStatic) {\n      thread.throwNewException('Ljava/lang/IncompatibleClassChangeError;', `Method ${method.name} from class ${method.cls.getExternalName()} is ${isStatic ? 'not ' : ''}static.`);\n      frame.returnToThreadLoop = true;\n      return false;\n    } else if (!util.checkAccess(accessingCls, method.cls, method.accessFlags)) {\n      thread.throwNewException('Ljava/lang/IllegalAccessError;', `${accessingCls.getExternalName()} cannot access ${method.cls.getExternalName()}.${method.name}`);\n      frame.returnToThreadLoop = true;\n      return false;\n    }\n    return true;\n  }\n\n  private resolveMemberName(method: methods.Method, thread: threading.JVMThread, cl: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void): void {\n    var memberHandleNatives = <typeof JVMTypes.java_lang_invoke_MethodHandleNatives>  (<ClassData.ReferenceClassData<JVMTypes.java_lang_invoke_MethodHandleNatives>> thread.getBsCl().getInitializedClass(thread, 'Ljava/lang/invoke/MethodHandleNatives;')).getConstructor(thread),\n      appendix = new ((<ClassData.ArrayClassData<JVMTypes.java_lang_Object>> thread.getBsCl().getInitializedClass(thread, '[Ljava/lang/Object;')).getConstructor(thread))(thread, 1);\n\n    util.createMethodType(thread, cl, this.nameAndTypeInfo.descriptor, (e: JVMTypes.java_lang_Throwable, type: JVMTypes.java_lang_invoke_MethodType) => {\n      if (e) {\n        thread.throwException(e);\n        cb(false);\n      } else {\n        /* MemberName linkMethod( int refKind, Class<?> defc,\n           String name, Object type,\n           Object[] appendixResult) */\n        memberHandleNatives['java/lang/invoke/MethodHandleNatives/linkMethod(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;'](\n          thread,\n          // Class callerClass\n          [caller.getClassObject(thread),\n          // int refKind\n           enums.MethodHandleReferenceKind.INVOKEVIRTUAL,\n          // Class defc\n           this.classInfo.cls.getClassObject(thread),\n          // String name\n           thread.getJVM().internString(this.nameAndTypeInfo.name),\n          // Object type, Object[] appendixResult\n           type, appendix],\n        (e?: JVMTypes.java_lang_Throwable, rv?: JVMTypes.java_lang_invoke_MemberName) => {\n          if (e !== null) {\n            thread.throwException(e);\n            cb(false);\n          } else {\n            this.appendix = appendix.array[0];\n            this.memberName = rv;\n            cb(true);\n          }\n        });\n      }\n    });\n  }\n\n  public resolve(thread: threading.JVMThread, loader: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void, explicit: boolean = true) {\n    if (!this.classInfo.isResolved()) {\n      this.classInfo.resolve(thread, loader, caller, (status: boolean) => {\n        if (!status) {\n          cb(false);\n        } else {\n          this.resolve(thread, loader, caller, cb, explicit);\n        }\n      }, explicit);\n    } else {\n      var cls = this.classInfo.cls,\n        method = cls.methodLookup(this.signature);\n      if (method === null) {\n        if (util.is_reference_type(cls.getInternalName())) {\n          // Signature polymorphic lookup.\n          method = (<ClassData.ReferenceClassData<JVMTypes.java_lang_Object>> cls).signaturePolymorphicAwareMethodLookup(this.signature);\n          if (method !== null && (method.name === 'invoke' || method.name === 'invokeExact')) {\n            // In order to completely resolve the signature polymorphic function,\n            // we need to resolve its MemberName object and Appendix.\n            return this.resolveMemberName(method, thread, loader, caller, (status: boolean) => {\n              if (status === true) {\n                this.setResolved(thread, method);\n              } else {\n                thread.throwNewException('Ljava/lang/NoSuchMethodError;', `Method ${this.signature} does not exist in class ${this.classInfo.cls.getExternalName()}.`);\n              }\n              cb(status);\n            });\n          }\n        }\n      }\n      if (method !== null) {\n        this.setResolved(thread, method);\n        cb(true);\n      } else {\n        thread.throwNewException('Ljava/lang/NoSuchMethodError;', `Method ${this.signature} does not exist in class ${this.classInfo.cls.getExternalName()}.`);\n        cb(false);\n      }\n    }\n  }\n\n  public setResolved(thread: threading.JVMThread, method: methods.Method): void {\n    this.method = method;\n    this.paramWordSize = util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor);\n    this.fullSignature = this.method.fullSignature;\n    this.jsConstructor = this.method.cls.getConstructor(thread);\n  }\n\n  public isResolved() { return this.method !== null; }\n  public getParamWordSize(): number {\n    if (this.paramWordSize === -1) {\n      this.paramWordSize = util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor);\n    }\n    return this.paramWordSize;\n  }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 4;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var classIndex = byteStream.getUint16(),\n      nameAndTypeIndex = byteStream.getUint16(),\n      classInfo = <ClassReference> constantPool.get(classIndex),\n      nameAndTypeInfo = <NameAndTypeInfo> constantPool.get(nameAndTypeIndex);\n    assert(classInfo.getType() === enums.ConstantPoolItemType.CLASS &&\n      nameAndTypeInfo.getType() === enums.ConstantPoolItemType.NAME_AND_TYPE,\n      'ConstantPool MethodReference types mismatch');\n    return new this(classInfo, nameAndTypeInfo);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.METHODREF] = MethodReference;\n\n/**\n * Represents a particular interface method.\n * ```\n * CONSTANT_InterfaceMethodref_info {\n *   u1 tag;\n *   u2 class_index;\n *   u2 name_and_type_index;\n * }\n * ```\n */\nexport class InterfaceMethodReference implements IConstantPoolItem {\n  public classInfo: ClassReference;\n  public nameAndTypeInfo: NameAndTypeInfo;\n  /**\n   * The signature of the method, without the owning class.\n   * e.g. foo(IJ)V\n   */\n  public signature: string;\n  /**\n   * The signature of the method, including the owning class.\n   * e.g. bar/Baz/foo(IJ)V\n   */\n  public fullSignature: string = null;\n  public method: methods.Method = null;\n  public paramWordSize: number = -1;\n  public jsConstructor: any = null;\n  constructor(classInfo: ClassReference, nameAndTypeInfo: NameAndTypeInfo) {\n    this.classInfo = classInfo;\n    this.nameAndTypeInfo = nameAndTypeInfo;\n    this.signature = this.nameAndTypeInfo.name + this.nameAndTypeInfo.descriptor;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.INTERFACE_METHODREF;\n  }\n\n  /**\n   * Checks the method referenced by this constant pool item in the specified\n   * bytecode context.\n   * Returns null if an error occurs.\n   * - Throws a NoSuchFieldError if missing.\n   * - Throws an IllegalAccessError if field is inaccessible.\n   * - Throws an IncompatibleClassChangeError if the field is an incorrect type\n   *   for the field access.\n   */\n  public hasAccess(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, isStatic: boolean): boolean {\n    var method = this.method, accessingCls = frame.method.cls;\n    if (method.accessFlags.isStatic() !== isStatic) {\n      thread.throwNewException('Ljava/lang/IncompatibleClassChangeError;', `Method ${method.name} from class ${method.cls.getExternalName()} is ${isStatic ? 'not ' : ''}static.`);\n      frame.returnToThreadLoop = true;\n      return false;\n    } else if (!util.checkAccess(accessingCls, method.cls, method.accessFlags)) {\n      thread.throwNewException('Ljava/lang/IllegalAccessError;', `${accessingCls.getExternalName()} cannot access ${method.cls.getExternalName()}.${method.name}`);\n      frame.returnToThreadLoop = true;\n      return false;\n    }\n    return true;\n  }\n\n  public resolve(thread: threading.JVMThread, loader: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void, explicit: boolean = true) {\n    if (!this.classInfo.isResolved()) {\n      this.classInfo.resolve(thread, loader, caller, (status: boolean) => {\n        if (!status) {\n          cb(false);\n        } else {\n          this.resolve(thread, loader, caller, cb, explicit);\n        }\n      }, explicit);\n    } else {\n      var cls = this.classInfo.cls,\n        method = cls.methodLookup(this.signature);\n      this.paramWordSize = util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor);\n      if (method !== null) {\n        this.setResolved(thread, method);\n        cb(true);\n      } else {\n        thread.throwNewException('Ljava/lang/NoSuchMethodError;', `Method ${this.signature} does not exist in class ${this.classInfo.cls.getExternalName()}.`);\n        cb(false);\n      }\n    }\n  }\n\n  public setResolved(thread: threading.JVMThread, method: methods.Method): void {\n    this.method = method;\n    this.paramWordSize = util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor);\n    this.fullSignature = this.method.fullSignature;\n    this.jsConstructor = this.method.cls.getConstructor(thread);\n  }\n\n  public getParamWordSize(): number {\n    if (this.paramWordSize === -1) {\n      this.paramWordSize = util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor);\n    }\n    return this.paramWordSize;\n  }\n\n  public isResolved() { return this.method !== null; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 4;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var classIndex = byteStream.getUint16(),\n      nameAndTypeIndex = byteStream.getUint16(),\n      classInfo = <ClassReference> constantPool.get(classIndex),\n      nameAndTypeInfo = <NameAndTypeInfo> constantPool.get(nameAndTypeIndex);\n    assert(classInfo.getType() === enums.ConstantPoolItemType.CLASS &&\n      nameAndTypeInfo.getType() === enums.ConstantPoolItemType.NAME_AND_TYPE,\n      'ConstantPool InterfaceMethodReference types mismatch');\n    return new this(classInfo, nameAndTypeInfo);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.INTERFACE_METHODREF] = InterfaceMethodReference;\n\n/**\n * Represents a particular field.\n * ```\n * CONSTANT_Fieldref_info {\n *   u1 tag;\n *   u2 class_index;\n *   u2 name_and_type_index;\n * }\n * ```\n */\nexport class FieldReference implements IConstantPoolItem {\n  public classInfo: ClassReference;\n  public nameAndTypeInfo: NameAndTypeInfo;\n  public field: methods.Field = null;\n  /**\n   * The full name of the field, including the owning class.\n   * e.g. java/lang/String/value\n   */\n  public fullFieldName: string = null;\n  /**\n   * The constructor for the field owner. Used for static fields.\n   */\n  public fieldOwnerConstructor: any = null;\n  constructor(classInfo: ClassReference, nameAndTypeInfo: NameAndTypeInfo) {\n    this.classInfo = classInfo;\n    this.nameAndTypeInfo = nameAndTypeInfo;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.FIELDREF;\n  }\n\n  /**\n   * Checks the field referenced by this constant pool item in the specified\n   * bytecode context.\n   * Returns null if an error occurs.\n   * - Throws a NoSuchFieldError if missing.\n   * - Throws an IllegalAccessError if field is inaccessible.\n   * - Throws an IncompatibleClassChangeError if the field is an incorrect type\n   *   for the field access.\n   */\n  public hasAccess(thread: threading.JVMThread, frame: threading.BytecodeStackFrame, isStatic: boolean): boolean {\n    var field = this.field, accessingCls = frame.method.cls;\n    if (field.accessFlags.isStatic() !== isStatic) {\n      thread.throwNewException('Ljava/lang/IncompatibleClassChangeError;', `Field ${name} from class ${field.cls.getExternalName()} is ${isStatic ? 'not ' : ''}static.`);\n      frame.returnToThreadLoop = true;\n      return false;\n    } else if (!util.checkAccess(accessingCls, field.cls, field.accessFlags)) {\n      thread.throwNewException('Ljava/lang/IllegalAccessError;', `${accessingCls.getExternalName()} cannot access ${field.cls.getExternalName()}.${name}`);\n      frame.returnToThreadLoop = true;\n      return false;\n    }\n    return true;\n  }\n\n  public resolve(thread: threading.JVMThread, loader: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void, explicit: boolean = true) {\n    if (!this.classInfo.isResolved()) {\n      this.classInfo.resolve(thread, loader, caller, (status: boolean) => {\n        if (!status) {\n          cb(false);\n        } else {\n          this.resolve(thread, loader, caller, cb, explicit);\n        }\n      }, explicit);\n    } else {\n      var cls = this.classInfo.cls,\n        field = cls.fieldLookup(this.nameAndTypeInfo.name);\n      if (field !== null) {\n        this.fullFieldName = `${util.descriptor2typestr(field.cls.getInternalName())}/${field.name}`;\n        this.field = field;\n        cb(true);\n      } else {\n        thread.throwNewException('Ljava/lang/NoSuchFieldError;', `Field ${this.nameAndTypeInfo.name} does not exist in class ${this.classInfo.cls.getExternalName()}.`);\n        cb(false);\n      }\n    }\n  }\n\n  public isResolved() { return this.field !== null; }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 4;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var classIndex = byteStream.getUint16(),\n      nameAndTypeIndex = byteStream.getUint16(),\n      classInfo = <ClassReference> constantPool.get(classIndex),\n      nameAndTypeInfo = <NameAndTypeInfo> constantPool.get(nameAndTypeIndex);\n    assert(classInfo.getType() === enums.ConstantPoolItemType.CLASS &&\n      nameAndTypeInfo.getType() === enums.ConstantPoolItemType.NAME_AND_TYPE,\n      'ConstantPool FieldReference types mismatch');\n    return new this(classInfo, nameAndTypeInfo);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.FIELDREF] = FieldReference;\n\n/**\n * Used by an invokedynamic instruction to specify a bootstrap method,\n * the dynamic invocation name, the argument and return types of the call,\n * and optionally, a sequence of additional constants called static arguments\n * to the bootstrap method.\n * ```\n * CONSTANT_InvokeDynamic_info {\n *   u1 tag;\n *   u2 bootstrap_method_attr_index;\n *   u2 name_and_type_index;\n * }\n * ```\n */\nexport class InvokeDynamic implements IConstantPoolItem {\n  public bootstrapMethodAttrIndex: number;\n  public nameAndTypeInfo: NameAndTypeInfo;\n  /**\n   * The parameter word size of the nameAndTypeInfo's descriptor.\n   * Does not take appendix into account; this is the static paramWordSize.\n   */\n  public paramWordSize: number;\n  /**\n   * Once a CallSite is defined for a particular lexical occurrence of\n   * InvokeDynamic, the CallSite will be reused for each future execution\n   * of that particular occurrence.\n   *\n   * We store the CallSite objects here for future retrieval, along with an\n   * optional 'appendix' argument.\n   */\n  private callSiteObjects: { [pc: number]: [JVMTypes.java_lang_invoke_MemberName, JVMTypes.java_lang_Object] } = {};\n  /**\n   * A MethodType object corresponding to this InvokeDynamic call's\n   * method descriptor.\n   */\n  private methodType: JVMTypes.java_lang_invoke_MethodType = null;\n\n  constructor(bootstrapMethodAttrIndex: number, nameAndTypeInfo: NameAndTypeInfo) {\n    this.bootstrapMethodAttrIndex = bootstrapMethodAttrIndex;\n    this.nameAndTypeInfo = nameAndTypeInfo;\n    this.paramWordSize = util.getMethodDescriptorWordSize(this.nameAndTypeInfo.descriptor);\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.INVOKE_DYNAMIC;\n  }\n  public isResolved(): boolean { return this.methodType !== null; }\n  public resolve(thread: threading.JVMThread, loader: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void) {\n    util.createMethodType(thread, loader, this.nameAndTypeInfo.descriptor, (e: JVMTypes.java_lang_Throwable, rv: JVMTypes.java_lang_invoke_MethodType) => {\n      if (e) {\n        thread.throwException(e);\n        cb(false);\n      } else {\n        this.methodType = rv;\n        cb(true);\n      }\n    });\n  }\n\n  public getCallSiteObject(pc: number): [JVMTypes.java_lang_invoke_MemberName, JVMTypes.java_lang_Object] {\n    var cso = this.callSiteObjects[pc]\n    if (cso) {\n      return cso;\n    } else {\n      return null;\n    }\n  }\n\n  public constructCallSiteObject(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, clazz: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, pc: number, cb: (status: boolean) => void, explicit: boolean = true): void {\n    /**\n     * A call site specifier gives a symbolic reference to a method handle which\n     * is to serve as the bootstrap method for a dynamic call site (§4.7.23).\n     * The method handle is resolved to obtain a reference to an instance of\n     * java.lang.invoke.MethodHandle (§5.4.3.5).\n     */\n    var bootstrapMethod = clazz.getBootstrapMethod(this.bootstrapMethodAttrIndex),\n      unresolvedItems: IConstantPoolItem[] = bootstrapMethod[1].concat(bootstrapMethod[0], this).filter((item: IConstantPoolItem) => !item.isResolved());\n\n    if (unresolvedItems.length > 0) {\n      // Resolve all needed constant pool items (including this one).\n      return util.asyncForEach(unresolvedItems, (cpItem: IConstantPoolItem, nextItem: (err?: any) => void) => {\n        cpItem.resolve(thread, cl, clazz, (status: boolean) => {\n          if (!status) {\n            nextItem(\"Failed.\");\n          } else {\n            nextItem();\n          }\n        }, explicit);\n      }, (err?: any) => {\n        if (err) {\n          cb(false);\n        } else {\n          // Rerun. This time, all items are resolved.\n          this.constructCallSiteObject(thread, cl, clazz, pc, cb, explicit);\n        }\n      });\n    }\n\n    /**\n     * A call site specifier gives zero or more static arguments, which\n     * communicate application-specific metadata to the bootstrap method. Any\n     * static arguments which are symbolic references to classes, method\n     * handles, or method types are resolved, as if by invocation of the ldc\n     * instruction (§ldc), to obtain references to Class objects,\n     * java.lang.invoke.MethodHandle objects, and java.lang.invoke.MethodType\n     * objects respectively. Any static arguments that are string literals are\n     * used to obtain references to String objects.\n     */\n    function getArguments(): JVMTypes.JVMArray<JVMTypes.java_lang_Object> {\n      var cpItems = bootstrapMethod[1],\n        i: number, cpItem: IConstantPoolItem,\n        rvObj = new ((<ClassData.ArrayClassData<JVMTypes.java_lang_Object>> thread.getBsCl().getInitializedClass(thread, '[Ljava/lang/Object;')).getConstructor(thread))(thread, cpItems.length),\n        rv = rvObj.array;\n      for (i = 0; i < cpItems.length; i++) {\n        cpItem = cpItems[i];\n        switch (cpItem.getType()) {\n          case enums.ConstantPoolItemType.CLASS:\n            rv[i] = (<ClassReference> cpItem).cls.getClassObject(thread);\n            break;\n          case enums.ConstantPoolItemType.METHOD_HANDLE:\n            rv[i] = (<MethodHandle> cpItem).methodHandle;\n            break;\n          case enums.ConstantPoolItemType.METHOD_TYPE:\n            rv[i] = (<MethodType> cpItem).methodType;\n            break;\n          case enums.ConstantPoolItemType.STRING:\n            rv[i] = (<ConstString> cpItem).value;\n            break;\n          case enums.ConstantPoolItemType.UTF8:\n            rv[i] = thread.getJVM().internString((<ConstUTF8> cpItem).value);\n            break;\n          case enums.ConstantPoolItemType.INTEGER:\n            rv[i] = (<ClassData.PrimitiveClassData> cl.getInitializedClass(thread, 'I')).createWrapperObject(thread, (<ConstInt32> cpItem).value);\n            break;\n          case enums.ConstantPoolItemType.LONG:\n            rv[i] = (<ClassData.PrimitiveClassData> cl.getInitializedClass(thread, 'J')).createWrapperObject(thread, (<ConstLong> cpItem).value);\n            break;\n          case enums.ConstantPoolItemType.FLOAT:\n            rv[i] = (<ClassData.PrimitiveClassData> cl.getInitializedClass(thread, 'F')).createWrapperObject(thread, (<ConstFloat> cpItem).value);\n            break;\n          case enums.ConstantPoolItemType.DOUBLE:\n            rv[i] = (<ClassData.PrimitiveClassData> cl.getInitializedClass(thread, 'D')).createWrapperObject(thread, (<ConstDouble> cpItem).value);\n            break;\n          default:\n            assert(false, \"Invalid CPItem for static args: \" + enums.ConstantPoolItemType[cpItem.getType()]);\n            break;\n        }\n      }\n      assert((() => {\n        var status = true;\n        cpItems.forEach((cpItem: IConstantPoolItem, i: number) => {\n          if (rv[i] === undefined) {\n            console.log(\"Undefined item at arg \" + i + \": \" + enums.ConstantPoolItemType[cpItem.getType()]);\n            status = false;\n          } else if (rv[i] === null) {\n            console.log(\"Null item at arg \" + i + \": \" + enums.ConstantPoolItemType[cpItem.getType()]);\n            status = false;\n          }\n        });\n        return status;\n      })(), \"Arguments cannot be undefined or null.\");\n\n      return rvObj;\n    }\n\n    /**\n     * A call site specifier gives a method descriptor, TD. A reference to an\n     * instance of java.lang.invoke.MethodType is obtained as if by resolution\n     * of a symbolic reference to a method type with the same parameter and\n     * return types as TD (§5.4.3.5).\n     *\n     * Do what all OpenJDK-based JVMs do: Call\n     * MethodHandleNatives.linkCallSite with:\n     * - The class w/ the invokedynamic instruction\n     * - The bootstrap method\n     * - The name string from the nameAndTypeInfo\n     * - The methodType object from the nameAndTypeInfo\n     * - The static arguments from the bootstrap method.\n     * - A 1-length appendix box.\n     */\n    var methodName = thread.getJVM().internString(this.nameAndTypeInfo.name),\n      appendixArr = new ((<ClassData.ArrayClassData<JVMTypes.java_lang_Object>> cl.getInitializedClass(thread, '[Ljava/lang/Object;')).getConstructor(thread))(thread, 1),\n      staticArgs = getArguments(),\n      mhn = <typeof JVMTypes.java_lang_invoke_MethodHandleNatives> (<ClassData.ReferenceClassData<JVMTypes.java_lang_invoke_MethodHandleNatives>> cl.getInitializedClass(thread, 'Ljava/lang/invoke/MethodHandleNatives;')).getConstructor(thread);\n\n\n    mhn['java/lang/invoke/MethodHandleNatives/linkCallSite(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;'](thread,\n      [clazz.getClassObject(thread), bootstrapMethod[0].methodHandle, methodName, this.methodType, staticArgs, appendixArr], (e?: JVMTypes.java_lang_Throwable, rv?: JVMTypes.java_lang_invoke_MemberName) => {\n      if (e) {\n        thread.throwException(e);\n        cb(false);\n      } else {\n        this.setResolved(pc, [rv, appendixArr.array[0]]);\n        cb(true);\n      }\n    });\n  }\n\n  private setResolved(pc: number, cso: [JVMTypes.java_lang_invoke_MemberName, JVMTypes.java_lang_Object]) {\n    // Prevent resolution races. It's OK to create multiple CSOs, but only one\n    // should ever be used!\n    if (this.callSiteObjects[pc] === undefined) {\n      this.callSiteObjects[pc] = cso;\n    }\n  }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 4;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var bootstrapMethodAttrIndex = byteStream.getUint16(),\n      nameAndTypeIndex = byteStream.getUint16(),\n      nameAndTypeInfo = <NameAndTypeInfo> constantPool.get(nameAndTypeIndex);\n    assert(nameAndTypeInfo.getType() === enums.ConstantPoolItemType.NAME_AND_TYPE,\n      'ConstantPool InvokeDynamic types mismatch');\n    return new this(bootstrapMethodAttrIndex, nameAndTypeInfo);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.INVOKE_DYNAMIC] = InvokeDynamic;\n\n// #endregion\n\n// #region Tier 3\n\nexport interface IConstantPoolReference extends IConstantPoolItem {\n  classInfo: ClassReference;\n  nameAndTypeInfo: NameAndTypeInfo;\n  getMethodHandleType(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, cb: (e: any, type: JVMTypes.java_lang_Object) => void): void;\n}\n\n/**\n * Represents a given method handle.\n * ```\n * CONSTANT_MethodHandle_info {\n *   u1 tag;\n *   u1 reference_kind;\n *   u2 reference_index;\n * }\n * ```\n */\nexport class MethodHandle implements IConstantPoolItem {\n  private reference: FieldReference | MethodReference | InterfaceMethodReference;\n  private referenceType: enums.MethodHandleReferenceKind;\n  /**\n   * The resolved MethodHandle object.\n   */\n  public methodHandle: JVMTypes.java_lang_invoke_MethodHandle = null;\n  constructor(reference: FieldReference | MethodReference | InterfaceMethodReference, referenceType: enums.MethodHandleReferenceKind) {\n    this.reference = reference;\n    this.referenceType = referenceType;\n  }\n\n  public getType(): enums.ConstantPoolItemType {\n    return enums.ConstantPoolItemType.METHOD_HANDLE;\n  }\n  public isResolved(): boolean { return this.methodHandle !== null; }\n  public getConstant(thread: threading.JVMThread) { return this.methodHandle; }\n\n  /**\n   * Asynchronously constructs a JVM-visible MethodHandle object for this\n   * MethodHandle.\n   *\n   * Requires producing the following, and passing it to a MethodHandle\n   * constructor:\n   * * [java.lang.Class] The defining class.\n   * * [java.lang.String] The name of the field/method/etc.\n   * * [java.lang.invoke.MethodType | java.lang.Class] The type of the field OR,\n   *   if a method, the type of the method descriptor.\n   *\n   * If needed, this function will resolve needed classes.\n   */\n  public resolve(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, caller: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>, cb: (status: boolean) => void, explicit: boolean) {\n    if (!this.reference.isResolved()) {\n      return this.reference.resolve(thread, cl, caller, (status: boolean) => {\n        if (!status) {\n          cb(false);\n        } else {\n          this.resolve(thread, cl, caller, cb, explicit);\n        }\n      }, explicit);\n    }\n\n    this.constructMethodHandleType(thread, cl, (type: JVMTypes.java_lang_Object) => {\n      if (type === null) {\n        cb(false);\n      } else {\n        var methodHandleNatives = <typeof JVMTypes.java_lang_invoke_MethodHandleNatives> (<ClassData.ReferenceClassData<JVMTypes.java_lang_invoke_MethodHandleNatives>> cl.getInitializedClass(thread, 'Ljava/lang/invoke/MethodHandleNatives;')).getConstructor(thread);\n        methodHandleNatives['linkMethodHandleConstant(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;'](\n          thread,\n          [caller.getClassObject(thread), this.referenceType, this.getDefiningClassObj(thread), thread.getJVM().internString(this.reference.nameAndTypeInfo.name), type], (e?: JVMTypes.java_lang_Throwable, methodHandle?: JVMTypes.java_lang_invoke_MethodHandle) => {\n          if (e) {\n            thread.throwException(e);\n            cb(false);\n          } else {\n            this.methodHandle = methodHandle;\n            cb(true);\n          }\n        });\n      }\n    });\n  }\n\n  private getDefiningClassObj(thread: threading.JVMThread): JVMTypes.java_lang_Class {\n    if (this.reference.getType() === enums.ConstantPoolItemType.FIELDREF) {\n      return (<FieldReference> this.reference).field.cls.getClassObject(thread);\n    } else {\n      return (<MethodReference> this.reference).method.cls.getClassObject(thread);\n    }\n  }\n\n  private constructMethodHandleType(thread: threading.JVMThread, cl: ClassLoader.ClassLoader, cb: (type: JVMTypes.java_lang_Object) => void): void {\n    if (this.reference.getType() === enums.ConstantPoolItemType.FIELDREF) {\n      var resolveObj: string = this.reference.nameAndTypeInfo.descriptor;\n      cl.resolveClass(thread, resolveObj, (cdata: ClassData.ReferenceClassData<JVMTypes.java_lang_Object>) => {\n        if (cdata !== null) {\n          cb(cdata.getClassObject(thread));\n        } else {\n          cb(null);\n        }\n      });\n    } else {\n      util.createMethodType(thread, cl, this.reference.nameAndTypeInfo.descriptor, (e: JVMTypes.java_lang_Throwable, rv: JVMTypes.java_lang_invoke_MethodType) => {\n        if (e) {\n          thread.throwException(e);\n          cb(null);\n        } else {\n          cb(rv);\n        }\n      });\n    }\n  }\n\n  public static size: number = 1;\n  public static infoByteSize: number = 3;\n  public static fromBytes(byteStream: ByteStream, constantPool: ConstantPool): IConstantPoolItem {\n    var referenceKind: enums.MethodHandleReferenceKind = byteStream.getUint8(),\n      referenceIndex = byteStream.getUint16(),\n      reference: FieldReference | MethodReference | InterfaceMethodReference = <any> constantPool.get(referenceIndex);\n\n    assert(0 < referenceKind && referenceKind < 10,\n      'ConstantPool MethodHandle invalid referenceKind: ' + referenceKind);\n    // Sanity check.\n    assert((() => {\n      switch (referenceKind) {\n        case enums.MethodHandleReferenceKind.GETFIELD:\n        case enums.MethodHandleReferenceKind.GETSTATIC:\n        case enums.MethodHandleReferenceKind.PUTFIELD:\n        case enums.MethodHandleReferenceKind.PUTSTATIC:\n          return reference.getType() === enums.ConstantPoolItemType.FIELDREF;\n        case enums.MethodHandleReferenceKind.INVOKEINTERFACE:\n          return reference.getType() === enums.ConstantPoolItemType.INTERFACE_METHODREF\n            && (<MethodReference>reference).nameAndTypeInfo.name[0] !== '<';\n        case enums.MethodHandleReferenceKind.INVOKEVIRTUAL:\n        case enums.MethodHandleReferenceKind.INVOKESTATIC:\n        case enums.MethodHandleReferenceKind.INVOKESPECIAL:\n          // NOTE: Spec says METHODREF, but I've found instances where\n          // INVOKESPECIAL is used on an INTERFACE_METHODREF.\n          return (reference.getType() === enums.ConstantPoolItemType.METHODREF\n            || reference.getType() === enums.ConstantPoolItemType.INTERFACE_METHODREF)\n            && (<MethodReference>reference).nameAndTypeInfo.name[0] !== '<';\n        case enums.MethodHandleReferenceKind.NEWINVOKESPECIAL:\n          return reference.getType() === enums.ConstantPoolItemType.METHODREF\n            && (<MethodReference>reference).nameAndTypeInfo.name === '<init>';\n      }\n      return true;\n    })(), \"Invalid constant pool reference for method handle reference type: \" + enums.MethodHandleReferenceKind[referenceKind]);\n\n    return new this(reference, referenceKind);\n  }\n}\nCP_CLASSES[enums.ConstantPoolItemType.METHOD_HANDLE] = MethodHandle;\n\n// #endregion\n\n/**\n * Constant pool type *resolution tiers*. Value is the tier, key is the\n * constant pool type.\n * Tier 0 has no references to other constant pool items, and can be resolved\n * first.\n * Tier 1 refers to tier 0 items.\n * Tier n refers to tier n-1 items and below.\n * Initialized in the given fashion to give the JS engine a tasty type hint.\n */\nvar CONSTANT_POOL_TIER: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n// Populate CONSTANT_POOL_TIER. Put into a closure to avoid scope pollution.\n((tierInfos: enums.ConstantPoolItemType[][]) => {\n  tierInfos.forEach((tierInfo: enums.ConstantPoolItemType[], index: number) => {\n    tierInfo.forEach((type: enums.ConstantPoolItemType) => {\n      CONSTANT_POOL_TIER[type] = index;\n    });\n  });\n})([\n    // Tier 0\n    [\n      enums.ConstantPoolItemType.UTF8,\n      enums.ConstantPoolItemType.INTEGER,\n      enums.ConstantPoolItemType.FLOAT,\n      enums.ConstantPoolItemType.LONG,\n      enums.ConstantPoolItemType.DOUBLE\n    ],\n    // Tier 1\n    [\n      enums.ConstantPoolItemType.CLASS,\n      enums.ConstantPoolItemType.STRING,\n      enums.ConstantPoolItemType.NAME_AND_TYPE,\n      enums.ConstantPoolItemType.METHOD_TYPE\n    ],\n    // Tier 2\n    [\n      enums.ConstantPoolItemType.FIELDREF,\n      enums.ConstantPoolItemType.METHODREF,\n      enums.ConstantPoolItemType.INTERFACE_METHODREF,\n      enums.ConstantPoolItemType.INVOKE_DYNAMIC\n    ],\n    // Tier 3\n    [\n      enums.ConstantPoolItemType.METHOD_HANDLE\n    ]\n  ]);\n\n/**\n * Represents a constant pool for a particular class.\n */\nexport class ConstantPool {\n  /**\n   * The core constant pool array. Note that some indices are undefined.\n   */\n  private constantPool: IConstantPoolItem[];\n\n  public parse(byteStream: ByteStream, cpPatches: JVMTypes.JVMArray<JVMTypes.java_lang_Object> = null): ByteStream {\n    var cpCount = byteStream.getUint16(),\n      // First key is the tier.\n      deferredQueue: { offset: number; index: number }[][] = [[], [], []],\n      // The ending offset of the constant pool items.\n      endIdx = 0, idx = 1,\n      // Tag of the currently-being-processed item.\n      tag = 0,\n      // Offset of the currently-being-processed item.\n      itemOffset = 0,\n      // Tier of the currently-being-processed item.\n      itemTier = 0;\n    this.constantPool = new Array<IConstantPoolItem>(cpCount);\n\n    // Scan for tier info.\n    while (idx < cpCount) {\n      itemOffset = byteStream.pos();\n      tag = byteStream.getUint8();\n      assert(CP_CLASSES[tag] !== null && CP_CLASSES[tag] !== undefined,\n        'Unknown ConstantPool tag: ' + tag);\n      itemTier = CONSTANT_POOL_TIER[tag];\n      if (itemTier > 0) {\n        deferredQueue[itemTier - 1].push({ offset: itemOffset, index: idx });\n        byteStream.skip(CP_CLASSES[tag].infoByteSize);\n      } else {\n        this.constantPool[idx] = CP_CLASSES[tag].fromBytes(byteStream, this);\n      }\n      idx += CP_CLASSES[tag].size;\n    }\n    endIdx = byteStream.pos();\n\n    // Process tiers.\n    deferredQueue.forEach((deferredItems: { offset: number; index: number; }[]) => {\n      deferredItems.forEach((item: { offset: number; index: number; }) => {\n        byteStream.seek(item.offset);\n        tag = byteStream.getUint8();\n        this.constantPool[item.index] = CP_CLASSES[tag].fromBytes(byteStream, this);\n        if (cpPatches !== null && cpPatches.array[item.index] !== null && cpPatches.array[item.index] !== undefined) {\n          /*\n           * For each CP entry, the corresponding CP patch must either be null or have\n           * the format that matches its tag:\n           *\n           * * Integer, Long, Float, Double: the corresponding wrapper object type from java.lang\n           * * Utf8: a string (must have suitable syntax if used as signature or name)\n           * * Class: any java.lang.Class object\n           * * String: any object (not just a java.lang.String)\n           * * InterfaceMethodRef: (NYI) a method handle to invoke on that call site's arguments\n           */\n          var patchObj: JVMTypes.java_lang_Object = cpPatches.array[item.index];\n          switch (patchObj.getClass().getInternalName()) {\n            case 'Ljava/lang/Integer;':\n              assert(tag === enums.ConstantPoolItemType.INTEGER);\n              (<ConstInt32> this.constantPool[item.index]).value = (<JVMTypes.java_lang_Integer> patchObj)['java/lang/Integer/value'];\n              break;\n            case 'Ljava/lang/Long;':\n              assert(tag === enums.ConstantPoolItemType.LONG);\n              (<ConstLong> this.constantPool[item.index]).value = (<JVMTypes.java_lang_Long> patchObj)['java/lang/Long/value'];\n              break;\n            case 'Ljava/lang/Float;':\n              assert(tag === enums.ConstantPoolItemType.FLOAT);\n              (<ConstFloat> this.constantPool[item.index]).value = (<JVMTypes.java_lang_Float> patchObj)['java/lang/Float/value'];\n              break;\n            case 'Ljava/lang/Double;':\n              assert(tag === enums.ConstantPoolItemType.DOUBLE);\n              (<ConstDouble> this.constantPool[item.index]).value = (<JVMTypes.java_lang_Double> patchObj)['java/lang/Double/value'];\n              break;\n            case 'Ljava/lang/String;':\n              assert(tag === enums.ConstantPoolItemType.UTF8);\n              (<ConstUTF8> this.constantPool[item.index]).value = (<JVMTypes.java_lang_String> patchObj).toString();\n              break;\n            case 'Ljava/lang/Class;':\n              assert(tag === enums.ConstantPoolItemType.CLASS);\n              (<ClassReference> this.constantPool[item.index]).name = (<JVMTypes.java_lang_Class> patchObj).$cls.getInternalName();\n              (<ClassReference> this.constantPool[item.index]).cls = <ClassData.ReferenceClassData<JVMTypes.java_lang_Object>> (<JVMTypes.java_lang_Class> patchObj).$cls;\n              break;\n            default:\n              assert(tag === enums.ConstantPoolItemType.STRING);\n              (<ConstString> this.constantPool[item.index]).stringValue = \"\";\n              // XXX: Not actually a string, but the JVM does this.\n              (<ConstString> this.constantPool[item.index]).value = <JVMTypes.java_lang_String> patchObj;\n              break;\n          }\n        }\n      });\n    });\n\n    // Return to the correct offset, at the end of the CP data.\n    byteStream.seek(endIdx);\n    return byteStream;\n  }\n\n  public get(idx: number): IConstantPoolItem {\n    assert(this.constantPool[idx] !== undefined, \"Invalid ConstantPool reference.\");\n    return this.constantPool[idx];\n  }\n\n  public each(fn: (idx: number, item: IConstantPoolItem) => void): void {\n    this.constantPool.forEach((item: IConstantPoolItem, idx: number) => {\n      if (item !== undefined) {\n        fn(idx, item);\n      }\n    });\n  }\n}\n\n/// Resolved forms of constant pool items.\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/ConstantPool.ts\n **/","import threading = require('./threading');\nimport ClassData = require('./ClassData');\n\n/**\n * A single class lock, used for load/initialization locks.\n */\nclass ClassLock {\n  private queue: { thread: threading.JVMThread; cb: (cdata: ClassData.ClassData) => void; }[] = [];\n\n  /**\n   * Checks if the lock is taken. If so, it enqueues the callback. Otherwise,\n   * it takes the lock and returns true.\n   */\n  public tryLock(thread: threading.JVMThread, cb: (cdata: ClassData.ClassData) => void): boolean {\n    // We're the owner if the queue was previously empty.\n    return this.queue.push({ thread: thread, cb: cb }) === 1;\n  }\n\n  /**\n   * Releases the lock on the class, and passes the object to all enqueued\n   * callbacks.\n   */\n  public unlock(cdata: ClassData.ClassData): void {\n    var i: number, num = this.queue.length;\n    for (i = 0; i < num; i++) {\n      this.queue[i].cb(cdata);\n    }\n    this.queue = [];\n  }\n\n  /**\n   * Get the owner of this lock.\n   */\n  public getOwner(): threading.JVMThread {\n    if (this.queue.length > 0) {\n      return this.queue[0].thread;\n    }\n    return null;\n  }\n}\n\nexport = ClassLock;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/ClassLock.ts\n **/","import threading = require('./threading');\nimport enums = require('./enums');\nimport assert = require('./assert');\n\n/**\n * Represents a JVM monitor.\n */\nclass Monitor {\n  /**\n   * The owner of the monitor.\n   */\n  private owner: threading.JVMThread = null;\n  /**\n   * Number of times that the current owner has locked this monitor.\n   */\n  private count: number = 0;\n  /**\n   * JVM threads that are waiting for the current owner to relinquish the\n   * monitor.\n   */\n  private blocked: {\n    [threadRef: number]: {\n      /**\n       * The blocked thread.\n       */\n      thread: threading.JVMThread;\n      /**\n       * A callback that should be triggered once the thread becomes the\n       * owner of the monitor.\n       */\n      cb: () => void;\n      /**\n       * The lock count to restore once the thread owns the lock.\n       */\n      count: number;\n    }\n  } = {};\n  /**\n   * Queue of JVM threads that are waiting for a JVM thread to notify them.\n   */\n  private waiting: {\n    [threadRef: number]: {\n      /**\n       * The blocked thread.\n       */\n      thread: threading.JVMThread;\n      /**\n       * A callback that should be triggered once the thread owns the monitor.\n       */\n      cb: (fromTimer: boolean) => void;\n      /**\n       * The thread's lock count at the time it invoked Object.wait.\n       */\n      count: number;\n      /**\n       * True if the thread issued waiting with a timeout.\n       */\n      isTimed: boolean;\n      /**\n       * The timer ID for the timeout callback, if isTimed is true. Allows us\n       * to revoke timeout timers before they execute.\n       */\n      timer?: number;\n    }\n  } = {};\n\n  /**\n   * Attempts to acquire the monitor.\n   *\n   * Thread transitions:\n   * * RUNNABLE => BLOCKED [If fails to acquire lock]\n   *\n   * @param thread The thread that is trying to acquire the monitor.\n   * @param cb If this method returns false, then this callback will be\n   *   triggered once the thread becomes owner of the monitor. At that time,\n   *   the thread will be in the RUNNABLE state.\n   * @return True if successfull, false if not. If not successful, the thread\n   *   becomes BLOCKED, and the input callback will be triggered once the\n   *   thread owns the monitor and is RUNNABLE.\n   */\n  public enter(thread: threading.JVMThread, cb: () => void): boolean {\n    if (this.owner === thread) {\n      this.count++;\n      return true;\n    } else {\n      return this.contendForLock(thread, 1, enums.ThreadStatus.BLOCKED, cb);\n    }\n  }\n\n  /**\n   * Generic version of Monitor.enter for contending for the lock.\n   *\n   * Thread transitions:\n   * * RUNNABLE => UNINTERRUPTIBLY_BLOCKED [If fails to acquire lock]\n   * * RUNNABLE => BLOCKED [If fails to acquire lock]\n   *\n   * @param thread The thread contending for the lock.\n   * @param count The lock count to use once the thread owns the lock.\n   * @param blockStatus The ThreadStatus to use should the thread need to\n   *   contend for the lock (either BLOCKED or UNINTERRUPTIBLY_BLOCKED).\n   * @param cb The callback to call once the thread becomes owner of the lock.\n   * @return True if the thread immediately acquired the lock, false if the\n   *   thread is now blocked on the lock.\n   */\n  private contendForLock(thread: threading.JVMThread, count: number, blockStatus: enums.ThreadStatus, cb: () => void): boolean {\n    var owner = this.owner;\n    assert(owner != thread, \"Thread attempting to contend for lock it already owns!\");\n    if (owner === null) {\n      assert(this.count === 0);\n      this.owner = thread;\n      this.count = count;\n      return true;\n    } else {\n      /**\n       * \"If another thread already owns the monitor associated with objectref,\n       *  the thread blocks until the monitor's entry count is zero, then tries\n       *  again to gain ownership.\"\n       * @from http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.monitorenter\n       */\n      this.blocked[thread.getRef()] = { thread: thread, cb: cb, count: count };\n      thread.setStatus(blockStatus, this);\n      return false;\n    }\n  }\n\n  /**\n   * Exits the monitor. Handles notifying the waiting threads if the lock\n   * becomes available.\n   *\n   * Thread transitions:\n   * * *NONE* on the argument thread.\n   * * A *BLOCKED* thread may be scheduled if the owner gives up the monitor.\n   *\n   * @param thread The thread that is exiting the monitor.\n   * @return True if exit succeeded, false if an exception occurred.\n   */\n  public exit(thread: threading.JVMThread): boolean {\n    var owner = this.owner;\n    if (owner === thread) {\n      if (--this.count === 0) {\n        this.owner = null;\n        this.appointNewOwner();\n      }\n    } else {\n      /**\n       * \"If the thread that executes monitorexit is not the owner of the\n       *  monitor associated with the instance referenced by objectref,\n       *  monitorexit throws an IllegalMonitorStateException.\"\n       * @from http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.monitorexit\n       */\n      thread.throwNewException('Ljava/lang/IllegalMonitorStateException;', \"Cannot exit a monitor that you do not own.\");\n    }\n    return owner === thread;\n  }\n\n  /**\n   * Chooses one of the blocked threads to become the monitor's owner.\n   */\n  private appointNewOwner() {\n    var blockedThreadRefs = Object.keys(this.blocked);\n    if (blockedThreadRefs.length > 0) {\n      // Unblock a random thread.\n      var unblockedRef = blockedThreadRefs[Math.floor(Math.random() * blockedThreadRefs.length)],\n        // XXX: Typing hack. Key must be a number.\n        unblocked = this.blocked[<number><any>unblockedRef];\n      this.unblock(unblocked.thread, false);\n    }\n  }\n\n  /**\n   * \"Causes the current thread to wait until another thread invokes the\n   *  notify() method or the notifyAll() method for this object, or some other\n   *  thread interrupts the current thread, or a certain amount of real time\n   *  has elapsed.\n   *\n   *  This method causes the current thread (call it T) to place itself in the\n   *  wait set for this object and then to relinquish any and all\n   *  synchronization claims on this object.\"\n   *\n   * We coalesce all possible wait configurations into this one function.\n   * @from http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait(long, int)\n   * @param thread The thread that wants to wait on this monitor.\n   * @param cb The callback triggered once the thread wakes up.\n   * @param timeoutMs? An optional timeout that specifies how long the thread\n   *   should wait, in milliseconds. If this value is 0, then we ignore it.\n   * @param timeoutNs? An optional timeout that specifies how long the thread\n   *   should wait, in nanosecond precision (currently ignored).\n   * @todo Use high-precision timers in browsers that support it.\n   * @return True if the wait succeeded, false if it triggered an exception.\n   */\n  public wait(thread: threading.JVMThread, cb: (fromTimer: boolean) => void, timeoutMs?: number, timeoutNs?: number): boolean {\n    if (this.getOwner() === thread) {\n      // INVARIANT: Thread shouldn't currently be blocked on a monitor.\n      assert(thread.getStatus() !== enums.ThreadStatus.BLOCKED);\n      this.waiting[thread.getRef()] = {\n        thread: thread,\n        cb: cb,\n        count: this.count,\n        isTimed: timeoutMs != null && timeoutMs !== 0\n      };\n\n      // Revoke ownership.\n      this.owner = null;\n      this.count = 0;\n\n      if (timeoutMs != null && timeoutMs !== 0) {\n        // Scheduler a timer that wakes up the thread.\n        // XXX: Casting to 'number', since NodeJS typings specify a Timer.\n        this.waiting[thread.getRef()].timer = <number><any> setTimeout(() => {\n          this.unwait(thread, true);\n        }, timeoutMs);\n        thread.setStatus(enums.ThreadStatus.TIMED_WAITING, this);\n      } else {\n        thread.setStatus(enums.ThreadStatus.WAITING, this);\n      }\n\n      // Select a new owner.\n      this.appointNewOwner();\n      return true;\n    } else {\n      /**\n       * \"The current thread must own this object's monitor\"\n       */\n      thread.throwNewException('Ljava/lang/IllegalMonitorStateException;', \"Cannot wait on an object that you do not own.\");\n      return false;\n    }\n  }\n\n  /**\n   * Removes the specified thread from the waiting set, and makes it compete\n   * for the monitor lock. Once it acquires the lock, we restore its lock\n   * count prior to triggering the wait callback.\n   *\n   * If the thread is interrupted, the wait callback is *not* triggered.\n   *\n   * @param thread The thread to remove.\n   * @param fromTimer Indicates if this function call was triggered from a\n   *   timer event.\n   * @param [interrupting] If true, then we are *interrupting* the wait. Do not\n   *   trigger the wait callback.\n   * @param [unwaitCb] If interrupting is true, then this callback is triggered\n   *   once the thread reacquires the lock.\n   */\n  public unwait(thread: threading.JVMThread, fromTimer: boolean, interrupting: boolean = false, unwaitCb: () => void = null): void {\n    // Step 1: Remove the thread from the waiting set.\n    var waitEntry = this.waiting[thread.getRef()],\n      // Interrupting a previously-waiting thread before it acquires a lock\n      // makes no semantic sense, as the thread is currently suspended in a\n      // synchronized block that requires ownership of the monitor.\n      blockStatus = enums.ThreadStatus.UNINTERRUPTABLY_BLOCKED,\n      blockCb = () => {\n        // Thread is RUNNABLE before we trigger the callback.\n        thread.setStatus(enums.ThreadStatus.RUNNABLE);\n        if (interrupting) {\n          unwaitCb();\n        } else {\n          waitEntry.cb(fromTimer);\n        }\n      };\n    assert(waitEntry != null);\n    delete this.waiting[thread.getRef()];\n    // Step 2: Remove the timer if the timer did not trigger this event.\n    if (thread.getStatus() === enums.ThreadStatus.TIMED_WAITING && !fromTimer) {\n      var timerId = waitEntry.timer;\n      assert(timerId != null);\n      clearTimeout(timerId);\n    }\n\n    // Step 3: Acquire the monitor [ASYNC]\n    if (this.contendForLock(thread, waitEntry.count, blockStatus, blockCb)) {\n      // Success! Trigger the blockCb anyway. If 'contendForLock' returns false,\n      // it will trigger blockCb once the thread acquires the lock.\n      blockCb();\n    }\n  }\n\n  /**\n   * Removes the specified thread from being blocked on the monitor so it can\n   * re-compete for ownership.\n   * @param [interrupting] If true, we are interrupting the monitor block. The\n   *   thread should not acquire the lock, and the block callback should not\n   *   be triggered.\n   */\n  public unblock(thread: threading.JVMThread, interrupting: boolean = false): void {\n    var blockEntry = this.blocked[thread.getRef()];\n    // Cannot interrupt an uninterruptibly blocked thread.\n    assert(interrupting ? thread.getStatus() === enums.ThreadStatus.BLOCKED : true);\n    if (blockEntry != null) {\n      delete this.blocked[thread.getRef()];\n      thread.setStatus(enums.ThreadStatus.RUNNABLE);\n      if (!interrupting) {\n        // No one else can own the monitor.\n        assert(this.owner == null && this.count === 0, \"T\" + thread.getRef() + \": We're not interrupting a block, but someone else owns the monitor?! Owned by \" + (this.owner == null ? \"[no one]\" : \"\" + this.owner.getRef()) + \" Count: \" + this.count);\n        // Assign this thread as the monitor owner.\n        this.owner = thread;\n        this.count = blockEntry.count;\n        // Trigger the callback.\n        blockEntry.cb();\n      }\n    }\n  }\n\n  /**\n   * Notifies a single waiting thread.\n   * @param thread The notifying thread. *MUST* be the owner.\n   */\n  public notify(thread: threading.JVMThread): void {\n    if (this.owner === thread) {\n      var waitingRefs = Object.keys(this.waiting);\n      if (waitingRefs.length > 0) {\n        // Notify a random thread.\n        this.unwait(this.waiting[<number><any>waitingRefs[Math.floor(Math.random() * waitingRefs.length)]].thread, false);\n      }\n    } else {\n      /**\n       * \"Throws IllegalMonitorStateException if the current thread is not the\n       *  owner of this object's monitor.\"\n       * @from http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#notify()\n       */\n      thread.throwNewException('Ljava/lang/IllegalMonitorStateException;', \"Cannot notify on a monitor that you do not own.\");\n    }\n  }\n\n  /**\n   * Notifies all waiting threads.\n   * @param thread The notifying thread. *MUST* be the owner.\n   */\n  public notifyAll(thread: threading.JVMThread): void {\n    if (this.owner === thread) {\n      var waitingRefs = Object.keys(this.waiting), i: number;\n      // Notify each thread.\n      for (i = 0; i < waitingRefs.length; i++) {\n        this.unwait(this.waiting[<number><any>waitingRefs[i]].thread, false);\n      }\n    } else {\n      /**\n       * \"Throws IllegalMonitorStateException if the current thread is not the\n       *  owner of this object's monitor.\"\n       * @from http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#notifyAll()\n       */\n      thread.throwNewException('Ljava/lang/IllegalMonitorStateException;', \"Cannot notifyAll on a monitor that you do not own.\");\n    }\n  }\n\n  /**\n   * @return The owner of the monitor.\n   */\n  public getOwner(): threading.JVMThread {\n    return this.owner;\n  }\n\n  public isWaiting(thread: threading.JVMThread): boolean {\n    // Waiting, but *not* timed waiting.\n    return this.waiting[thread.getRef()] != null && !this.waiting[thread.getRef()].isTimed;\n  }\n\n  public isTimedWaiting(thread: threading.JVMThread): boolean {\n    // Timed waiting, *not* waiting.\n    return this.waiting[thread.getRef()] != null && this.waiting[thread.getRef()].isTimed;\n  }\n\n  public isBlocked(thread: threading.JVMThread): boolean {\n    // Blocked.\n    return this.blocked[thread.getRef()] != null;\n  }\n}\n\nexport = Monitor;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/Monitor.ts\n **/","import {TriState} from './enums';\nimport assert = require('./assert');\nimport fs = require('fs');\nimport path = require('path');\nimport BrowserFS = require('browserfs');\nimport util = require('./util');\n// Type information only.\nimport TBFSFS from 'browserfs/dist/node/core/FS';\n// Export so it can be returned from ClasspathJar.\nexport type TZipFS = BrowserFS.FileSystem.ZipFS;\nlet BFSFS = BrowserFS.BFSRequire('fs');\nlet ZipFS = BrowserFS.FileSystem.ZipFS;\nexport type MetaIndex = {[pkgName: string]: boolean | MetaIndex};\n\n/**\n * Represents an item on the classpath. Used by the bootstrap classloader.\n */\nexport interface IClasspathItem {\n  /**\n   * Initializes this item on the classpath. Asynchronous, as the classpath\n   * item needs to populate its classlist.\n   */\n  initialize(cb: () => void): void;\n  /**\n   * Returns true if this classpath item has the given class.\n   * Reference types only.\n   * NOTE: Loading of said class is not guaranteed to succeed.\n   * @param type Class name in pkg/path/Name format.\n   * @returns True if it has the class, false if not, indeterminate if it\n   *   cannot be determined synchronously.\n   */\n  hasClass(type: string): TriState;\n  /**\n   * Attempt to load the given class synchronously. Returns a buffer,\n   * or returns NULL if unsuccessful.\n   * @param type Class name in pkg/path/Name format.\n   */\n  tryLoadClassSync(type: string): Buffer;\n  /**\n   * Load a class with the given type (e.g. Ljava/lang/String;).\n   * @param type Class name in pkg/path/Name format.\n   */\n  loadClass(type: string, cb: (err: Error, data?: Buffer) => void): void;\n  /**\n   * Get the path to this classpath item.\n   */\n  getPath(): string;\n  /**\n   * Stat a particular resource in the classpath.\n   */\n  statResource(p: string, cb: (e: Error, stat?: fs.Stats) => void): void\n  /**\n   * Read the given directory within the classpath item.\n   */\n  readdir(p: string, cb: (e: Error, list?: string[]) => void): void;\n  /**\n   * Tries to perform a readdir synchronously. Returns null if unsuccessful.\n   */\n  tryReaddirSync(p: string): string[];\n  /**\n   * Tries to perform a stat operation synchronously. Returns null if unsuccessful.\n   */\n  tryStatSync(p: string): fs.Stats;\n}\n\nfunction win2nix(p: string): string {\n  return p.replace(/\\\\/g, '/');\n}\n\n/**\n * Represents a JAR file on the classpath.\n */\nexport abstract class AbstractClasspathJar {\n  protected _fs = new BFSFS.FS();\n  /**\n   * Was the JAR file successfully read?\n   * - TRUE: JAR file is read and mounted in this._fs.\n   * - FALSE: JAR file could not be read.\n   * - INDETERMINATE: We have yet to try reading this JAR file.\n   */\n  protected _jarRead = TriState.INDETERMINATE;\n  protected _path: string;\n  constructor(path: string) {\n    this._path = path;\n  }\n\n  public getPath(): string { return this._path; }\n\n  public loadJar(cb: (e?: Error) => void): void {\n    if (this._jarRead !== TriState.TRUE) {\n      fs.readFile(this._path, (e, data) => {\n        if (e) {\n          this._jarRead = TriState.FALSE;\n          cb(e);\n        } else {\n          try {\n            ZipFS.computeIndex(data, (index) => {\n              try {\n                this._fs.initialize(new ZipFS(index, path.basename(this._path)));\n                this._jarRead = TriState.TRUE;\n                cb();\n              } catch (e) {\n                this._jarRead = TriState.FALSE;\n                cb(e);\n              }\n            });\n          } catch (e) {\n            this._jarRead = TriState.FALSE;\n            cb(e);\n          }\n        }\n      });\n    } else {\n      setImmediate(() => cb(this._jarRead === TriState.TRUE ? null : new Error(\"Failed to load JAR file.\")));\n    }\n  }\n\n  public abstract hasClass(type: string): TriState;\n\n  public tryLoadClassSync(type: string): Buffer {\n    if (this._jarRead === TriState.TRUE) {\n      if (this.hasClass(type) !== TriState.FALSE) {\n        try {\n          // NOTE: Path must be absolute, otherwise BrowserFS\n          // will try to use process.cwd().\n          return this._fs.readFileSync(`/${type}.class`);\n        } catch (e) {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      // Must go the async route.\n      return null;\n    }\n  }\n\n  /**\n   * Wrap an operation that depends on the jar being loaded.\n   */\n  private _wrapOp(op: () => void, failCb: (e: Error) => void): void {\n    switch (this._jarRead) {\n      case TriState.TRUE:\n        op();\n        break;\n      case TriState.FALSE:\n        setImmediate(() => failCb(new Error(\"Unable to load JAR file.\")));\n        break;\n      default:\n        this.loadJar(() => {\n          this._wrapOp(op, failCb);\n        });\n        break;\n    }\n  }\n\n  /**\n   * Wrap a synchronous operation that depends on the jar being loaded.\n   * Returns null if the jar isn't loaded, or if the operation fails.\n   */\n  private _wrapSyncOp<T>(op: () => T): T {\n    if (this._jarRead === TriState.TRUE) {\n      try {\n        return op();\n      } catch (e) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  public loadClass(type: string, cb: (err: Error, data?: Buffer) => void): void {\n    this._wrapOp(() => {\n      // Path must be absolute to avoid relative path issues.\n      this._fs.readFile(`/${type}.class`, cb);\n    }, cb);\n  }\n\n  public statResource(p: string, cb: (err: Error, stats?: fs.Stats) => void): void {\n    this._wrapOp(() => {\n      this._fs.stat(p, cb);\n    }, cb);\n  }\n\n  public readdir(p: string, cb: (e: Error, list?: string[]) => void): void {\n    this._wrapOp(() => {\n      this._fs.readdir(win2nix(p), cb);\n    }, cb);\n  }\n\n  public tryReaddirSync(p: string): string[] {\n    return this._wrapSyncOp<string[]>(() => {\n      return this._fs.readdirSync(win2nix(p));\n    });\n  }\n\n  public tryStatSync(p: string): fs.Stats {\n    return this._wrapSyncOp<fs.Stats>(() => {\n      return this._fs.statSync(win2nix(p));\n    });\n  }\n\n  public getFS(): TZipFS {\n    return <TZipFS> this._fs.getRootFS();\n  }\n}\n\n/**\n * A JAR item on the classpath that is not in the meta index.\n */\nexport class UnindexedClasspathJar extends AbstractClasspathJar implements IClasspathItem {\n  // Contains the list of classes accessible from this classpath item.\n  private _classList: {[className: string]: boolean} = null;\n\n  constructor(p: string) {\n    super(p);\n  }\n\n  public hasClass(type: string): TriState {\n    if (this._jarRead === TriState.FALSE) {\n      return TriState.FALSE;\n    } else {\n      return this._hasClass(type);\n    }\n  }\n\n  public _hasClass(type: string): TriState {\n    if (this._classList) {\n      return this._classList[type] ? TriState.TRUE : TriState.FALSE;\n    }\n    return TriState.INDETERMINATE;\n  }\n\n  /**\n   * Initialize this item on the classpath with the given classlist.\n   * @param classes List of classes in pkg/path/Name format.\n   */\n  public initializeWithClasslist(classes: string[]): void {\n    assert(this._classList === null, `Initializing a classpath item twice!`);\n    this._classList = {};\n    let len = classes.length;\n    for (let i = 0; i < len; i++) {\n      this._classList[classes[i]] = true;\n    }\n  }\n\n  public initialize(cb: (e?: Error) => void): void {\n    this.loadJar((err) => {\n      if (err) {\n        cb();\n      } else {\n        let pathStack: string[] = ['/'];\n        let classlist: string[] = [];\n        let fs = this._fs;\n        while (pathStack.length > 0) {\n          let p = pathStack.pop();\n          try {\n            let stat = fs.statSync(p);\n            if (stat.isDirectory()) {\n              let listing = fs.readdirSync(p);\n              for (let i = 0; i < listing.length; i++) {\n                pathStack.push(path.join(p, listing[i]));\n              }\n            } else if (path.extname(p) === '.class') {\n              // Cut off initial / from absolute path.\n              classlist.push(p.slice(1, p.length - 6));\n            }\n          } catch (e) {\n            // Ignore filesystem error and proceed.\n          }\n        }\n        this.initializeWithClasslist(classlist);\n        cb();\n      }\n    });\n  }\n}\n\n/**\n * A JAR file on the classpath that is in the meta-index.\n */\nexport class IndexedClasspathJar extends AbstractClasspathJar implements IClasspathItem {\n  private _metaIndex: MetaIndex;\n  private _metaName: string;\n\n  constructor(metaIndex: MetaIndex, p: string) {\n    super(p);\n    this._metaIndex = metaIndex;\n    this._metaName = path.basename(p);\n  }\n\n  public initialize(cb: (e?: Error) => void): void {\n    setImmediate(() => cb());\n  }\n\n  public hasClass(type: string): TriState {\n    if (this._jarRead === TriState.FALSE) {\n      return TriState.FALSE;\n    } else {\n      let pkgComponents = type.split('/');\n      let search: MetaIndex = this._metaIndex;\n      // Pop off class name.\n      pkgComponents.pop();\n      for (let i = 0; i < pkgComponents.length; i++) {\n        let item = search[pkgComponents[i]];\n        if (!item) {\n          // item === undefined or false.\n          return TriState.FALSE;\n        } else if (item === true) {\n          return TriState.INDETERMINATE;\n        } else {\n          // Must be an object.\n          search = <any> item;\n        }\n      }\n      // Assume meta-index is complete.\n      return TriState.FALSE;\n    }\n  }\n}\n\n/**\n * Represents a folder on the classpath.\n */\nexport class ClasspathFolder implements IClasspathItem {\n  private _path: string;\n  constructor(path: string) {\n    this._path = path;\n  }\n\n  public getPath(): string { return this._path; }\n\n  public hasClass(type: string): TriState {\n    return TriState.INDETERMINATE;\n  }\n\n  public initialize(cb: (e?: Error) => void): void {\n    // NOP.\n    setImmediate(cb);\n  }\n\n  public tryLoadClassSync(type: string): Buffer {\n    try {\n      return fs.readFileSync(path.resolve(this._path, `${type}.class`));\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public loadClass(type: string, cb: (err: Error, data?: Buffer) => void): void {\n    fs.readFile(path.resolve(this._path, `${type}.class`), cb);\n  }\n\n  public statResource(p: string, cb: (err: Error, stats?: fs.Stats) => void): void {\n    fs.stat(path.resolve(this._path, p), cb);\n  }\n\n  public readdir(p: string, cb: (e: Error, list?: string[]) => void): void {\n    fs.readdir(path.resolve(this._path, p), cb);\n  }\n\n  public tryReaddirSync(p: string): string[] {\n    try {\n      return fs.readdirSync(path.resolve(this._path, p));\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public tryStatSync(p: string): fs.Stats {\n    try {\n      return fs.statSync(path.resolve(this._path, p));\n    } catch (e) {\n      return null;\n    }\n  }\n}\n\n/**\n * Represents a classpath item that cannot be found.\n */\nexport class ClasspathNotFound implements IClasspathItem {\n  private _path: string;\n  constructor(path: string) {\n    this._path = path;\n  }\n\n  public getPath(): string { return this._path; }\n\n  public hasClass(type: string): TriState { return TriState.FALSE; }\n\n  public initialize(cb: (e?: Error) => void): void { setImmediate(cb); }\n\n  public initializeWithClasslist(classlist: string[]): void {}\n\n  public tryLoadClassSync(type: string): Buffer { return null; }\n\n  private _notFoundError(cb: (err: Error) => void): void { setImmediate(() => cb(new Error(\"Class cannot be found.\"))); }\n\n  public loadClass(type: string, cb: (err: Error, data?: Buffer) => void): void { this._notFoundError(cb); }\n\n  public statResource(p: string, cb: (err: Error, stats?: fs.Stats) => void): void { this._notFoundError(cb); }\n\n  public readdir(p: string, cb: (e: Error, list?: string[]) => void): void { this._notFoundError(cb); }\n\n  public tryReaddirSync(p: string): string[] { return null; }\n\n  public tryStatSync(p: string): fs.Stats { return null; }\n}\n\n/**\n * Parse the meta index into a lookup table from package name (with slashes) to JAR file.\n * Returns a tuple of JAR files in the meta index and the meta index.\n */\nfunction parseMetaIndex(metaIndex: string): {[jarFile: string]: MetaIndex} {\n  let lines = metaIndex.split(\"\\n\");\n  let rv: {[jarFile: string]: MetaIndex} = {};\n  let currentJar: MetaIndex = null;\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    if (line.length > 0) {\n      switch (line[0]) {\n        case '%':\n        case '@':\n          // Comment or resource-only JAR file.\n          continue;\n        case '!':\n        case '#':\n          // JAR file w/ classes.\n          // Skip symbol and space.\n          let jarName = line.slice(2);\n          rv[jarName] = currentJar = {};\n          break;\n        default:\n          // Package name. If it ends with /, then it's shared\n          // amongst multiple JAR files.\n          // We don't treat those separately, though, so standardize it.\n          if (line[line.length - 1] === '/') {\n            line = line.slice(0, line.length - 1);\n          }\n          let pkgComponents = line.split('/');\n          let current = currentJar;\n          let i: number;\n          for (i = 0; i < pkgComponents.length - 1; i++) {\n            let cmp = pkgComponents[i],\n              next = current[cmp];\n            if (!next) {\n              current = current[cmp] = {};\n            } else {\n              // Invariant: You can't list a package and its subpackages\n              // for same jar file. Thus, current[cmp] cannot be a boolean.\n              current = <any> current[cmp];\n            }\n          }\n          current[pkgComponents[i]] = true;\n          break;\n      }\n    }\n  }\n  return rv;\n}\n\n/**\n * Given a list of paths (which may or may not exist), produces a list of\n * classpath objects.\n */\nexport function ClasspathFactory(javaHomePath: string, paths: string[], cb: (items: IClasspathItem[]) => void): void {\n  let classpathItems: IClasspathItem[] = new Array<IClasspathItem>(paths.length),\n    i: number = 0;\n\n  fs.readFile(path.join(javaHomePath, 'lib', 'meta-index'), (err, data) => {\n    let metaIndex: {[jarName: string]: MetaIndex} = {};\n    if (!err) {\n      metaIndex = parseMetaIndex(data.toString());\n    }\n    util.asyncForEach(paths, (p, nextItem) => {\n      let pRelToHome = path.relative(`${javaHomePath}/lib`, p);\n      fs.stat(p, (err, stats) => {\n        let cpItem: IClasspathItem;\n        if (err) {\n          cpItem = new ClasspathNotFound(p);\n        } else if (stats.isDirectory()) {\n          cpItem = new ClasspathFolder(p);\n        } else {\n          if (metaIndex[pRelToHome]) {\n            cpItem = new IndexedClasspathJar(metaIndex[pRelToHome], p);\n          } else {\n            cpItem = new UnindexedClasspathJar(p);\n          }\n        }\n        classpathItems[i++] = cpItem;\n        cpItem.initialize(nextItem);\n      });\n    }, (e?) => {\n      cb(classpathItems);\n    });\n  })\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/classpath.ts\n **/","var BrowserFS = require('browserfs');module.exports=BrowserFS.BFSRequire('fs');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./shims/fs.js\n ** module id = 27\n ** module chunks = 0\n **/","var BrowserFS = require('browserfs');module.exports=BrowserFS.BFSRequire('path');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./shims/path.js\n ** module id = 28\n ** module chunks = 0\n **/","var BrowserFS = require('browserfs');module.exports=BrowserFS.BFSRequire('buffer');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./shims/buffer.js\n ** module id = 29\n ** module chunks = 0\n **/","// A power-of-two segregated freelist \"heap\",\n// for explicit memory management into a buffer.\n// by Emery Berger, www.cs.umass.edu/~emery\n\n\"use strict\";\n\ninterface HashTable<T> {\n  [key : number]: T;\n}\n\nclass Heap {\n\n  // size = total amount of memory for the heap.\n  constructor(private size: number) {\n    this._buffer    = new Buffer(size);\n    this._remaining = size;  // the whole thing is available.\n    this._offset    = 0;     // start of the buffer.\n    // Initialize the freelists.\n    this._freeLists = new Array<Array<number>>(Heap._numSizeClasses);\n    for (var i = 0; i < Heap._numSizeClasses; i++) {\n      this._freeLists[i] = [];\n    }\n  }\n\n  // Allocate size bytes, returning the \"address\".\n  malloc(size: number): number {\n    // if size is less than a word, round it up to a word (4 bytes).\n    if (size <= 4) {\n      size = 4;\n    }\n    // if we are out of memory, throw an exception.\n    if (this._remaining < size) {\n      // TODO: could actually scan larger freelists to see if there's\n      // free memory there.\n      throw \"out of memory\";\n    }\n    // compute the size class.\n    var addr : number;\n    var cl   : number;\n    cl   = Heap.size_to_class(size);\n    addr = this._freeLists[cl].pop();\n    // if there's no more memory, get some.\n    if (addr === undefined) {\n      addr = this.refill(cl);\n    }\n    return addr;\n  }\n\n  // Deallocate memory.\n  free(addr: number): void {\n    // push this address onto the appropriate freelist.\n    // first, mask the address.\n    var masked = addr & ~(Heap._chunkSize - 1);\n    // next, look up the class using the masked address.\n    var cl = this._sizeMap[masked];\n    // finally, push onto the appropriate free list.\n    // TODO: for sanity, we could check to see if this was *really* freed\n    // and drop it if not.\n    this._freeLists[cl].push(addr);\n  }\n\n  // Store a word (32-bits) at this address.\n  store_word(addr: number, value: number): void {\n    // TODO: add sanity checks?\n    this._buffer.writeInt32LE (value, addr);\n  }\n\n  // Access a byte at this location.\n  get_byte(addr: number): number {\n    // TODO: add sanity checks?\n    return this._buffer.readUInt8(addr);\n  }\n\n  get_word(addr: number): number {\n    return this._buffer.readInt32LE(addr);\n  }\n\n  get_buffer(addr: number, len: number): Buffer {\n    return this._buffer.slice(addr, addr + len);\n  }\n\n  get_signed_byte(addr: number): number {\n    return this._buffer.readInt8(addr);\n  }\n\n  set_byte(addr: number, value: number): void {\n    this._buffer.writeUInt8(value, addr);\n  }\n\n  set_signed_byte(addr: number, value: number): void {\n    this._buffer.writeInt8(value, addr);\n  }\n\n  /**\n   * Copy len bytes from srcAddr to dstAddr.\n   */\n  memcpy(srcAddr: number, dstAddr: number, len: number) {\n    this._buffer.copy(this._buffer, dstAddr, srcAddr, srcAddr + len);\n  }\n\n  // Get more memory for a particular size class.\n  private refill(cl: number): number {\n    // Get the largest size for this class.\n    var sz = this.cl_to_size(cl);\n    // Figure out how many objects we are going to \"allocate\".\n    var count : number = Math.floor(Heap._chunkSize / sz);\n    if (count < 1) {\n      count = 1;\n    }\n    // Now store the size class *for the first object* only.\n    // We will later look up this object via \"pointer arithmetic\".\n    var addr = this._offset;\n    this._sizeMap[addr] = cl;\n    // Add each one to the freelist.\n    for (var i = 0; i < count; i++) {\n      this._remaining -= sz;\n      addr = this._offset;\n      this._freeLists[cl].push (addr);\n      this._offset += sz;\n    }\n    return addr;\n  }\n\n  // Computes ceil(log2(num)).\n  private static ilog2(num: number): number {\n    var log2  = 0;\n    var value = 1;\n    while (value < num) {\n      value <<= (1);\n      log2++;\n    }\n    return (log2);\n  }\n\n  // power-of-two size classes (just a ref to ilog2).\n  private static size_to_class(size: number): number {\n    return Heap.ilog2(size);\n  }\n\n  // see above: classes are just powers of two.\n  private cl_to_size(cl: number): number {\n    return (1 << cl);\n  }\n\n  // Holds all memory, which we will allocate from via pointer bumping.\n  private _buffer : NodeBuffer;\n\n  // How much is left in the buffer, in bytes.\n  private _remaining : number;\n\n  // The current offset in the buffer.\n  private _offset : number;\n\n  // The total number of size classes.\n  private static _numSizeClasses : number = 64; // way more than we'll ever need.\n\n  // How much to grab at one time.\n  private static _chunkSize : number = 4096;    // should be a power of two.\n\n  // The size class array of stuff.\n  private _freeLists : Array<Array<number>>;\n\n  // A map of size classes per chunk (see above).\n  private _sizeMap : HashTable<number> = {};\n\n}\n\nexport = Heap;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/heap.ts\n **/","import {ThreadStatus} from './enums';\nimport {JVMThread} from './threading';\nimport assert = require('./assert');\n\n/**\n * Manages parked threads and their callbacks.\n */\nclass Parker {\n  private _parkCounts: { [threadRef: number]: number } = {};\n  private _parkCallbacks: { [threadRef: number]: () => void } = {};\n\n  public park(thread: JVMThread, cb: () => void) {\n    var ref = thread.getRef();\n    assert(!this._parkCallbacks[ref] && thread.getStatus() !== ThreadStatus.PARKED, `Thread ${ref} is doubly parked? Should be impossible.`);\n    this._parkCallbacks[ref] = cb;\n    this._mutateParkCount(thread, 1);\n    // It's possible the thread was instantly unparked due to a previously\n    // unbalancing park.\n    if (this.isParked(thread)) {\n      thread.setStatus(ThreadStatus.PARKED);\n    }\n  }\n\n  public unpark(thread: JVMThread): void {\n    this._mutateParkCount(thread, -1);\n  }\n\n  public completelyUnpark(thread: JVMThread): void {\n    var ref = thread.getRef(), count = this._parkCounts[ref];\n    if (count) {\n      this._mutateParkCount(thread, -count);\n    }\n  }\n\n  private _mutateParkCount(thread: JVMThread, delta: number): void {\n    var ref = thread.getRef(), cb: () => void;\n    // Initialize park count.\n    if (!this._parkCounts[ref]) {\n      this._parkCounts[ref] = 0;\n    }\n    if (0 === (this._parkCounts[ref] += delta)) {\n      assert(!!this._parkCallbacks[ref], `Balancing unpark for thread ${ref} with no callback? Should be impossible.`);\n      cb = this._parkCallbacks[ref];\n\n      // Cleanup.\n      delete this._parkCounts[ref];\n      delete this._parkCallbacks[ref];\n\n      // Avoid situations where a terminated thread's timeout wakes up\n      // and tries to revive its thread.\n      if (thread.getStatus() === ThreadStatus.PARKED) {\n        thread.setStatus(ThreadStatus.ASYNC_WAITING);\n        cb();\n      }\n    }\n  }\n\n  public isParked(thread: JVMThread): boolean {\n    return !!this._parkCounts[thread.getRef()];\n  }\n}\n\nexport = Parker;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/parker.ts\n **/","import {ThreadStatus} from './enums';\nimport assert = require('./assert');\n\n/**\n * Generic interface for a thread.\n */\nexport interface Thread {\n  getStatus(): ThreadStatus;\n  isDaemon(): boolean;\n  getPriority(): number;\n  setStatus(status: ThreadStatus): void;\n  run(): void;\n}\n\n/**\n * Checks if the given thread status indicates that the thread is scheduleable.\n */\nfunction isRunnable(status: ThreadStatus): boolean {\n  return status === ThreadStatus.RUNNABLE;\n}\n\n/**\n * Implements a thread scheduling algorithm\n */\nexport interface Scheduler<T extends Thread> {\n  /**\n   * Schedule the given thread to run.\n   */\n  scheduleThread(thread: T): void;\n  /**\n   * Signal that the given thread's priority has changed.\n   */\n  priorityChange(thread: T): void;\n  /**\n   * Unschedule the given thread to run. It is removed from\n   * the scheduler's queue.\n   */\n  unscheduleThread(thread: T): void;\n  /**\n   * Retrieve the currently running thread. Returns NULL if\n   * no threads are running.\n   */\n  getRunningThread(): T;\n  /**\n   * Called when a thread's quantum is over.\n   */\n  quantumOver(thread: T): void;\n}\n\n/**\n * A Weighted Round Robin thread scheduler.\n */\nclass WeightedRoundRobinScheduler<T extends Thread> implements Scheduler<T> {\n  // Number of quanta given to the current thread.\n  private _count: number = 0;\n  // The queue of threads.\n  private _queue: T[] = [];\n  // Read by runThread. Used as a lock.\n  private _threadScheduled: boolean = false;\n\n  public scheduleThread(thread: T): void {\n    this._queue.push(thread);\n    if (this._queue.length === 1) {\n      // There aren't any threads running. Run this thread.\n      this.runThread();\n    }\n  }\n\n  /**\n   * Run the thread at the head of the queue.\n   */\n  private runThread(): void {\n    if (this._threadScheduled) {\n      return;\n    }\n    this._threadScheduled = true;\n    setImmediate(() => {\n      let queue = this._queue;\n      this._threadScheduled = false;\n      if (queue.length > 0) {\n        let thread = this._queue[0];\n        assert(thread.getStatus() === ThreadStatus.RUNNABLE, `Attempted to run non-runnable thread.`);\n        thread.run();\n      }\n    });\n  }\n\n  public unscheduleThread(thread: T): void {\n    let queue = this._queue;\n    let isRunningThread = queue[0] === thread;\n    assert(queue.indexOf(thread) > -1, `Tried to unschedule thread that was not scheduled.`);\n    // Remove thread from queue.\n    if (isRunningThread) {\n      queue.shift();\n      this._count = 0;\n      // Schedule the next thread.\n      this.runThread();\n    } else {\n      queue.splice(queue.indexOf(thread), 1);\n    }\n  }\n\n  public getRunningThread(): T {\n    let queue = this._queue;\n    if (queue.length > 0) {\n      return queue[0];\n    } else {\n      return null;\n    }\n  }\n\n  public priorityChange(thread: T): void {\n    // Not important for the algorithm. We'll pick up the change\n    // next time we schedule.\n  }\n\n  public quantumOver(thread: T): void {\n    assert(this._queue[0] === thread, `A non-running thread has an expired quantum?`);\n    this._count++;\n    if (this._count >= thread.getPriority() || thread.getStatus() !== ThreadStatus.RUNNABLE) {\n      // Move to back of queue, reset count.\n      this._count = 0;\n      this._queue.push(this._queue.shift());\n    }\n    // Schedule the next thread.\n    this.runThread();\n  }\n}\n\n/**\n * Represents a thread pool. Handles scheduling duties.\n */\nexport default class ThreadPool<T extends Thread> {\n  private threads: T[] = [];\n  private runningThread: T;\n  private scheduler: Scheduler<T> = new WeightedRoundRobinScheduler<T>();\n  /**\n   * Called when the ThreadPool becomes empty. This is usually a sign that\n   * execution has finished.\n   *\n   * If the callback returns true it signals that this threadpool can free its resources.\n   */\n  private emptyCallback: () => boolean;\n\n  constructor(emptyCallback: () => boolean) {\n    this.emptyCallback = emptyCallback;\n  }\n\n  /**\n   * Retrieve all of the threads in the thread pool.\n   */\n  public getThreads(): T[] {\n    // Return a copy of our internal array.\n    return this.threads.slice(0);\n  }\n\n  /**\n   * Checks if any remaining threads are non-daemonic and could be runnable.\n   * If not, we can terminate execution.\n   *\n   * This check is invoked each time a thread terminates.\n   */\n  private anyNonDaemonicThreads(): boolean {\n    for (let i = 0; i < this.threads.length; i++) {\n      let t = this.threads[i];\n      if (t.isDaemon()) {\n        continue;\n      }\n      let status = t.getStatus();\n      if (status !== ThreadStatus.NEW &&\n          status !== ThreadStatus.TERMINATED) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private threadTerminated(thread: T): void {\n    var idx: number = this.threads.indexOf(thread);\n    assert(idx >= 0);\n    // Remove the specified thread from the threadpool.\n    this.threads.splice(idx, 1);\n\n    if (!this.anyNonDaemonicThreads()) {\n      const close = this.emptyCallback();\n      if (close) {\n        this.emptyCallback = null;\n      }\n    }\n  }\n\n  /**\n   * Called when a thread's status changes.\n   */\n  public statusChange(thread: T, oldStatus: ThreadStatus, newStatus: ThreadStatus): void {\n    var wasRunnable  = isRunnable(oldStatus),\n      nowRunnable = isRunnable(newStatus);\n\n    if (oldStatus === ThreadStatus.NEW || oldStatus === ThreadStatus.TERMINATED) {\n      if (this.threads.indexOf(thread) === -1) {\n        this.threads.push(thread);\n      }\n    }\n\n    // Inform scheduling algorithm if thread changes from runnable => unrunnable, or unrunnable => runnable.\n    if (wasRunnable !== nowRunnable) {\n      if (wasRunnable) {\n        this.scheduler.unscheduleThread(thread);\n      } else {\n        this.scheduler.scheduleThread(thread);\n      }\n    }\n\n    if (newStatus === ThreadStatus.TERMINATED) {\n      this.threadTerminated(thread);\n    }\n  }\n\n  /**\n   * Called when a thread's priority changes.\n   */\n  public priorityChange(thread: T): void {\n    this.scheduler.priorityChange(thread);\n  }\n\n  /**\n   * Called when a thread's quantum is over.\n   */\n  public quantumOver(thread: T): void {\n    this.scheduler.quantumOver(thread);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/threadpool.ts\n **/","module.exports = {\n\t\"url\": \"https://github.com/plasma-umass/doppio_jcl/releases/download/v3.2/java_home.tar.gz\",\n\t\"classpath\": [\n\t\t\"lib/rt.jar\",\n\t\t\"lib/charsets.jar\",\n\t\t\"lib/doppio.jar\",\n\t\t\"lib/dt.jar\",\n\t\t\"lib/jce.jar\",\n\t\t\"lib/jconsole.jar\",\n\t\t\"lib/jsse.jar\",\n\t\t\"lib/management-agent.jar\",\n\t\t\"lib/resources.jar\",\n\t\t\"lib/sa-jdi.jar\",\n\t\t\"lib/tools.jar\"\n\t]\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./vendor/java_home/jdk.json\n ** module id = 33\n ** module chunks = 0\n **/","'use strict';\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  s.d_buf = s.lit_bufsize >> 1;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/deflate.js\n ** module id = 34\n ** module chunks = 0\n **/","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/utils/common.js\n ** module id = 35\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/trees.js\n ** module id = 36\n ** module chunks = 0\n **/","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/adler32.js\n ** module id = 37\n ** module chunks = 0\n **/","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/crc32.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/messages.js\n ** module id = 39\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n    case HEAD:\n      if (state.wrap === 0) {\n        state.mode = TYPEDO;\n        break;\n      }\n      //=== NEEDBITS(16);\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = FLAGS;\n        break;\n      }\n      state.flags = 0;           /* expect zlib header */\n      if (state.head) {\n        state.head.done = false;\n      }\n      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n        strm.msg = 'incorrect header check';\n        state.mode = BAD;\n        break;\n      }\n      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n      if (state.wbits === 0) {\n        state.wbits = len;\n      }\n      else if (len > state.wbits) {\n        strm.msg = 'invalid window size';\n        state.mode = BAD;\n        break;\n      }\n      state.dmax = 1 << len;\n      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = hold & 0x200 ? DICTID : TYPE;\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      break;\n    case FLAGS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.flags = hold;\n      if ((state.flags & 0xff) !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      if (state.flags & 0xe000) {\n        strm.msg = 'unknown header flags set';\n        state.mode = BAD;\n        break;\n      }\n      if (state.head) {\n        state.head.text = ((hold >> 8) & 1);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = TIME;\n      /* falls through */\n    case TIME:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.time = hold;\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC4(state.check, hold)\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        hbuf[2] = (hold >>> 16) & 0xff;\n        hbuf[3] = (hold >>> 24) & 0xff;\n        state.check = crc32(state.check, hbuf, 4, 0);\n        //===\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = OS;\n      /* falls through */\n    case OS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.xflags = (hold & 0xff);\n        state.head.os = (hold >> 8);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = EXLEN;\n      /* falls through */\n    case EXLEN:\n      if (state.flags & 0x0400) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length = hold;\n        if (state.head) {\n          state.head.extra_len = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      else if (state.head) {\n        state.head.extra = null/*Z_NULL*/;\n      }\n      state.mode = EXTRA;\n      /* falls through */\n    case EXTRA:\n      if (state.flags & 0x0400) {\n        copy = state.length;\n        if (copy > have) { copy = have; }\n        if (copy) {\n          if (state.head) {\n            len = state.head.extra_len - state.length;\n            if (!state.head.extra) {\n              // Use untyped array for more conveniend processing later\n              state.head.extra = new Array(state.head.extra_len);\n            }\n            utils.arraySet(\n              state.head.extra,\n              input,\n              next,\n              // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len\n            );\n            //zmemcpy(state.head.extra + len, next,\n            //        len + copy > state.head.extra_max ?\n            //        state.head.extra_max - len : copy);\n          }\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          state.length -= copy;\n        }\n        if (state.length) { break inf_leave; }\n      }\n      state.length = 0;\n      state.mode = NAME;\n      /* falls through */\n    case NAME:\n      if (state.flags & 0x0800) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          // TODO: 2 or 1 bytes?\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.name_max*/)) {\n            state.head.name += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.name = null;\n      }\n      state.length = 0;\n      state.mode = COMMENT;\n      /* falls through */\n    case COMMENT:\n      if (state.flags & 0x1000) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.comm_max*/)) {\n            state.head.comment += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.comment = null;\n      }\n      state.mode = HCRC;\n      /* falls through */\n    case HCRC:\n      if (state.flags & 0x0200) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.check & 0xffff)) {\n          strm.msg = 'header crc mismatch';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      if (state.head) {\n        state.head.hcrc = ((state.flags >> 9) & 1);\n        state.head.done = true;\n      }\n      strm.adler = state.check = 0;\n      state.mode = TYPE;\n      break;\n    case DICTID:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      strm.adler = state.check = zswap32(hold);\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = DICT;\n      /* falls through */\n    case DICT:\n      if (state.havedict === 0) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        return Z_NEED_DICT;\n      }\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      /* falls through */\n    case TYPE:\n      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case TYPEDO:\n      if (state.last) {\n        //--- BYTEBITS() ---//\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        state.mode = CHECK;\n        break;\n      }\n      //=== NEEDBITS(3); */\n      while (bits < 3) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.last = (hold & 0x01)/*BITS(1)*/;\n      //--- DROPBITS(1) ---//\n      hold >>>= 1;\n      bits -= 1;\n      //---//\n\n      switch ((hold & 0x03)/*BITS(2)*/) {\n      case 0:                             /* stored block */\n        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = STORED;\n        break;\n      case 1:                             /* fixed block */\n        fixedtables(state);\n        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = LEN_;             /* decode codes */\n        if (flush === Z_TREES) {\n          //--- DROPBITS(2) ---//\n          hold >>>= 2;\n          bits -= 2;\n          //---//\n          break inf_leave;\n        }\n        break;\n      case 2:                             /* dynamic block */\n        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = TABLE;\n        break;\n      case 3:\n        strm.msg = 'invalid block type';\n        state.mode = BAD;\n      }\n      //--- DROPBITS(2) ---//\n      hold >>>= 2;\n      bits -= 2;\n      //---//\n      break;\n    case STORED:\n      //--- BYTEBITS() ---// /* go to byte boundary */\n      hold >>>= bits & 7;\n      bits -= bits & 7;\n      //---//\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n        strm.msg = 'invalid stored block lengths';\n        state.mode = BAD;\n        break;\n      }\n      state.length = hold & 0xffff;\n      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n      //        state.length));\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = COPY_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case COPY_:\n      state.mode = COPY;\n      /* falls through */\n    case COPY:\n      copy = state.length;\n      if (copy) {\n        if (copy > have) { copy = have; }\n        if (copy > left) { copy = left; }\n        if (copy === 0) { break inf_leave; }\n        //--- zmemcpy(put, next, copy); ---\n        utils.arraySet(output, input, next, copy, put);\n        //---//\n        have -= copy;\n        next += copy;\n        left -= copy;\n        put += copy;\n        state.length -= copy;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       stored end\\n\"));\n      state.mode = TYPE;\n      break;\n    case TABLE:\n      //=== NEEDBITS(14); */\n      while (bits < 14) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n      if (state.nlen > 286 || state.ndist > 30) {\n        strm.msg = 'too many length or distance symbols';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n      state.have = 0;\n      state.mode = LENLENS;\n      /* falls through */\n    case LENLENS:\n      while (state.have < state.ncode) {\n        //=== NEEDBITS(3);\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n        //--- DROPBITS(3) ---//\n        hold >>>= 3;\n        bits -= 3;\n        //---//\n      }\n      while (state.have < 19) {\n        state.lens[order[state.have++]] = 0;\n      }\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      //state.next = state.codes;\n      //state.lencode = state.next;\n      // Switch to use dynamic table\n      state.lencode = state.lendyn;\n      state.lenbits = 7;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n      state.lenbits = opts.bits;\n\n      if (ret) {\n        strm.msg = 'invalid code lengths set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n      state.have = 0;\n      state.mode = CODELENS;\n      /* falls through */\n    case CODELENS:\n      while (state.have < state.nlen + state.ndist) {\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_val < 16) {\n          //--- DROPBITS(here.bits) ---//\n          hold >>>= here_bits;\n          bits -= here_bits;\n          //---//\n          state.lens[state.have++] = here_val;\n        }\n        else {\n          if (here_val === 16) {\n            //=== NEEDBITS(here.bits + 2);\n            n = here_bits + 2;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            if (state.have === 0) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            len = state.lens[state.have - 1];\n            copy = 3 + (hold & 0x03);//BITS(2);\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n          }\n          else if (here_val === 17) {\n            //=== NEEDBITS(here.bits + 3);\n            n = here_bits + 3;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 3 + (hold & 0x07);//BITS(3);\n            //--- DROPBITS(3) ---//\n            hold >>>= 3;\n            bits -= 3;\n            //---//\n          }\n          else {\n            //=== NEEDBITS(here.bits + 7);\n            n = here_bits + 7;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 11 + (hold & 0x7f);//BITS(7);\n            //--- DROPBITS(7) ---//\n            hold >>>= 7;\n            bits -= 7;\n            //---//\n          }\n          if (state.have + copy > state.nlen + state.ndist) {\n            strm.msg = 'invalid bit length repeat';\n            state.mode = BAD;\n            break;\n          }\n          while (copy--) {\n            state.lens[state.have++] = len;\n          }\n        }\n      }\n\n      /* handle error breaks in while */\n      if (state.mode === BAD) { break; }\n\n      /* check for end-of-block code (better have one) */\n      if (state.lens[256] === 0) {\n        strm.msg = 'invalid code -- missing end-of-block';\n        state.mode = BAD;\n        break;\n      }\n\n      /* build code tables -- note: do not change the lenbits or distbits\n         values here (9 and 6) without reading the comments in inftrees.h\n         concerning the ENOUGH constants, which depend on those values */\n      state.lenbits = 9;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.lenbits = opts.bits;\n      // state.lencode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid literal/lengths set';\n        state.mode = BAD;\n        break;\n      }\n\n      state.distbits = 6;\n      //state.distcode.copy(state.codes);\n      // Switch to use dynamic table\n      state.distcode = state.distdyn;\n      opts = { bits: state.distbits };\n      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.distbits = opts.bits;\n      // state.distcode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid distances set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, 'inflate:       codes ok\\n'));\n      state.mode = LEN_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case LEN_:\n      state.mode = LEN;\n      /* falls through */\n    case LEN:\n      if (have >= 6 && left >= 258) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        inflate_fast(strm, _out);\n        //--- LOAD() ---\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        //---\n\n        if (state.mode === TYPE) {\n          state.back = -1;\n        }\n        break;\n      }\n      state.back = 0;\n      for (;;) {\n        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if (here_bits <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if (here_op && (here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.lencode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      state.length = here_val;\n      if (here_op === 0) {\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        state.mode = LIT;\n        break;\n      }\n      if (here_op & 32) {\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.back = -1;\n        state.mode = TYPE;\n        break;\n      }\n      if (here_op & 64) {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break;\n      }\n      state.extra = here_op & 15;\n      state.mode = LENEXT;\n      /* falls through */\n    case LENEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n      state.was = state.length;\n      state.mode = DIST;\n      /* falls through */\n    case DIST:\n      for (;;) {\n        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if ((here_bits) <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if ((here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.distcode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      if (here_op & 64) {\n        strm.msg = 'invalid distance code';\n        state.mode = BAD;\n        break;\n      }\n      state.offset = here_val;\n      state.extra = (here_op) & 15;\n      state.mode = DISTEXT;\n      /* falls through */\n    case DISTEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n//#ifdef INFLATE_STRICT\n      if (state.offset > state.dmax) {\n        strm.msg = 'invalid distance too far back';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n      state.mode = MATCH;\n      /* falls through */\n    case MATCH:\n      if (left === 0) { break inf_leave; }\n      copy = _out - left;\n      if (state.offset > copy) {         /* copy from window */\n        copy = state.offset - copy;\n        if (copy > state.whave) {\n          if (state.sane) {\n            strm.msg = 'invalid distance too far back';\n            state.mode = BAD;\n            break;\n          }\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n        }\n        if (copy > state.wnext) {\n          copy -= state.wnext;\n          from = state.wsize - copy;\n        }\n        else {\n          from = state.wnext - copy;\n        }\n        if (copy > state.length) { copy = state.length; }\n        from_source = state.window;\n      }\n      else {                              /* copy from output */\n        from_source = output;\n        from = put - state.offset;\n        copy = state.length;\n      }\n      if (copy > left) { copy = left; }\n      left -= copy;\n      state.length -= copy;\n      do {\n        output[put++] = from_source[from++];\n      } while (--copy);\n      if (state.length === 0) { state.mode = LEN; }\n      break;\n    case LIT:\n      if (left === 0) { break inf_leave; }\n      output[put++] = state.length;\n      left--;\n      state.mode = LEN;\n      break;\n    case CHECK:\n      if (state.wrap) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          // Use '|' insdead of '+' to make sure that result is signed\n          hold |= input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        _out -= left;\n        strm.total_out += _out;\n        state.total += _out;\n        if (_out) {\n          strm.adler = state.check =\n              /*UPDATE(state.check, put - _out, _out);*/\n              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n        }\n        _out = left;\n        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n        if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n          strm.msg = 'incorrect data check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n      }\n      state.mode = LENGTH;\n      /* falls through */\n    case LENGTH:\n      if (state.wrap && state.flags) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.total & 0xffffffff)) {\n          strm.msg = 'incorrect length check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n      }\n      state.mode = DONE;\n      /* falls through */\n    case DONE:\n      ret = Z_STREAM_END;\n      break inf_leave;\n    case BAD:\n      ret = Z_DATA_ERROR;\n      break inf_leave;\n    case MEM:\n      return Z_MEM_ERROR;\n    case SYNC:\n      /* falls through */\n    default:\n      return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/inflate.js\n ** module id = 40\n ** module chunks = 0\n **/","'use strict';\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/inffast.js\n ** module id = 41\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  var i = 0;\n  /* process all codes and make table entries */\n  for (;;) {\n    i++;\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/inftrees.js\n ** module id = 42\n ** module chunks = 0\n **/","'use strict';\n\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/zstream.js\n ** module id = 43\n ** module chunks = 0\n **/","module.exports = {\n\t\"name\": \"doppiojvm\",\n\t\"version\": \"0.3.1\",\n\t\"engine\": \"node >= 4.0.0\",\n\t\"license\": \"MIT\",\n\t\"main\": \"dist/release/doppio.js\",\n\t\"typings\": \"dist/typings/src/doppiojvm\",\n\t\"dependencies\": {\n\t\t\"async\": \"^1.5.2\",\n\t\t\"browserfs\": \"^0.5.12\",\n\t\t\"glob\": \"^7.0.3\",\n\t\t\"gunzip-maybe\": \"^1.3.1\",\n\t\t\"optimist\": \"~0.6\",\n\t\t\"pako\": \"^1.0.1\",\n\t\t\"rimraf\": \"^2.5.2\",\n\t\t\"source-map-support\": \"^0.4.0\",\n\t\t\"tar-fs\": \"^1.12.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"bfs-buffer\": \"^0.1.7\",\n\t\t\"bfs-path\": \"^0.1.2\",\n\t\t\"bfs-process\": \"^0.1.6\",\n\t\t\"body-parser\": \"^1.15.1\",\n\t\t\"cpr\": \"^1.1.1\",\n\t\t\"detect-browser\": \"^1.3.1\",\n\t\t\"escodegen\": \"^1.8.0\",\n\t\t\"esprima\": \"^2.7.2\",\n\t\t\"estraverse\": \"^4.2.0\",\n\t\t\"express\": \"^4.13.4\",\n\t\t\"grunt\": \"^1.0\",\n\t\t\"grunt-cli\": \"^1.2\",\n\t\t\"grunt-contrib-compress\": \"^1.2.0\",\n\t\t\"grunt-contrib-connect\": \"^1.0\",\n\t\t\"grunt-contrib-copy\": \"^1.0\",\n\t\t\"grunt-contrib-uglify\": \"^1.0\",\n\t\t\"grunt-karma\": \"^1.0\",\n\t\t\"grunt-lineending\": \"^0.2.4\",\n\t\t\"grunt-merge-source-maps\": \"^0.1.0\",\n\t\t\"grunt-newer\": \"^1.2.0\",\n\t\t\"grunt-ts\": \"^5.5\",\n\t\t\"grunt-webpack\": \"^1.0.11\",\n\t\t\"imports-loader\": \"^0.6.5\",\n\t\t\"jasmine-core\": \"^2.3.4\",\n\t\t\"json-loader\": \"^0.5.4\",\n\t\t\"karma\": \"^0.13.22\",\n\t\t\"karma-chrome-launcher\": \"^1.0\",\n\t\t\"karma-firefox-launcher\": \"^1.0\",\n\t\t\"karma-ie-launcher\": \"^1.0\",\n\t\t\"karma-jasmine\": \"^1.0\",\n\t\t\"karma-opera-launcher\": \"^1.0\",\n\t\t\"karma-safari-launcher\": \"^1.0\",\n\t\t\"locate-java-home\": \"^0.1.4\",\n\t\t\"semver\": \"^5.1.0\",\n\t\t\"source-map-loader\": \"^0.1.5\",\n\t\t\"typescript\": \"^1.8.10\",\n\t\t\"uglify-js\": \"^2.6.2\",\n\t\t\"underscore\": \"^1.8.3\",\n\t\t\"webpack\": \"^1.13.1\",\n\t\t\"webpack-dev-server\": \"^1.14.1\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"grunt test\",\n\t\t\"prepublish\": \"node ./prepublish.js\",\n\t\t\"install\": \"node ./install.js\",\n\t\t\"appveyor-test\": \"grunt test-browser-appveyor\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"http://github.com/plasma-umass/doppio.git\"\n\t},\n\t\"bin\": {\n\t\t\"doppio\": \"./bin/doppio\",\n\t\t\"doppioh\": \"./bin/doppioh\",\n\t\t\"doppio-dev\": \"./bin/doppio-dev\",\n\t\t\"doppio-fast-dev\": \"./bin/doppio-fast-dev\"\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./package.json\n ** module id = 44\n ** module chunks = 0\n **/","/***\nThis is modified from part of jsdifflib v1.0. <http://snowtide.com/jsdifflib>\n\nCopyright (c) 2007, Snowtide Informatics Systems, Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n\t* Redistributions of source code must retain the above copyright notice, this\n\t\tlist of conditions and the following disclaimer.\n\t* Redistributions in binary form must reproduce the above copyright notice,\n\t\tthis list of conditions and the following disclaimer in the documentation\n\t\tand/or other materials provided with the distribution.\n\t* Neither the name of the Snowtide Informatics Systems nor the names of its\n\t\tcontributors may be used to endorse or promote products derived from this\n\t\tsoftware without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\nSHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\nBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n***/\n/* Original author: Chas Emerick <cemerick@snowtide.com> */\nexport function text_diff(a_lines: string[], b_lines: string[], context: number): string[] {\n\treturn (new SequenceMatcher(a_lines, b_lines)).text_diff(context);\n}\n\n// comparison function for sorting lists of numeric tuples\nfunction __ntuplecomp(a: number[], b: number[]) {\n\tvar mlen = Math.max(a.length, b.length);\n\tfor (var i = 0; i < mlen; i++) {\n\t\tif (a[i] < b[i]) return -1;\n\t\tif (a[i] > b[i]) return 1;\n\t}\n\n\treturn a.length == b.length ? 0 : (a.length < b.length ? -1 : 1);\n}\n\n// replacement for python's dict.get function -- need easy default values\nfunction __dictget(dict: any, key: any, defaultValue: any): any {\n\treturn dict.hasOwnProperty(key) ? dict[key] : defaultValue;\n}\n\nexport class SequenceMatcher {\n\tprivate a : string[];\n\tprivate b : string[];\n\tprivate matching_blocks: number[][];\n\tprivate opcodes: any[];\n\tprivate b2j: {[elt: string]: number[]};\n\n\tconstructor(a: string[], b: string[]) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.b2j = {};\n\t\tfor (var i = 0; i < b.length; i++) {\n\t\t\tvar elt = b[i];\n\t\t\tif (this.b2j.hasOwnProperty(elt)) {\n\t\t\t\tthis.b2j[elt].push(i);\n\t\t\t} else {\n\t\t\t\tthis.b2j[elt] = [i];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate find_longest_match(alo: number, ahi: number,\n\t\t                       blo: number, bhi: number): [number,number,number] {\n\t\tvar a = this.a;\n\t\tvar b = this.b;\n\t\tvar b2j = this.b2j;\n\t\tvar besti = alo;\n\t\tvar bestj = blo;\n\t\tvar bestsize = 0;\n\n\t\tvar j2len = {};\n\t\tfor (var i = alo; i < ahi; i++) {\n\t\t\tvar newj2len: any = {};\n\t\t\tvar jdict = __dictget(b2j, a[i], []);\n\t\t\tfor (var jkey in jdict) {\n\t\t\t\tif (jdict.hasOwnProperty(jkey)) {\n\t\t\t\t\tvar j = jdict[jkey];\n\t\t\t\t\tif (j < blo) continue;\n\t\t\t\t\tif (j >= bhi) break;\n\t\t\t\t\tvar k = __dictget(j2len, j - 1, 0) + 1\n\t\t\t\t\tnewj2len[j] = k;\n\t\t\t\t\tif (k > bestsize) {\n\t\t\t\t\t\tbesti = i - k + 1;\n\t\t\t\t\t\tbestj = j - k + 1;\n\t\t\t\t\t\tbestsize = k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tj2len = newj2len;\n\t\t}\n\n\t\twhile (besti > alo && bestj > blo && a[besti - 1] == b[bestj - 1]) {\n\t\t\tbesti--;\n\t\t\tbestj--;\n\t\t\tbestsize++;\n\t\t}\n\n\t\twhile (besti + bestsize < ahi && bestj + bestsize < bhi &&\n\t\t\t\ta[besti + bestsize] == b[bestj + bestsize]) {\n\t\t\tbestsize++;\n\t\t}\n\n\t\treturn [besti, bestj, bestsize];\n\t}\n\n\tprivate get_matching_blocks(): number[][] {\n\t\tif (this.matching_blocks != null) return this.matching_blocks;\n\t\tvar la = this.a.length;\n\t\tvar lb = this.b.length;\n\n\t\tvar queue = [[0, la, 0, lb]];\n\t\tvar matching_blocks: Array<[number,number,number]> = [];\n\t\twhile (queue.length) {\n\t\t\tvar qi = queue.pop();\n\t\t\tvar alo = qi[0];\n\t\t\tvar ahi = qi[1];\n\t\t\tvar blo = qi[2];\n\t\t\tvar bhi = qi[3];\n\t\t\tvar x = this.find_longest_match(alo, ahi, blo, bhi);\n\t\t\tvar i = x[0];\n\t\t\tvar j = x[1];\n\t\t\tvar k = x[2];\n\n\t\t\tif (k) {\n\t\t\t\tmatching_blocks.push(x);\n\t\t\t\tif (alo < i && blo < j)\n\t\t\t\t\tqueue.push([alo, i, blo, j]);\n\t\t\t\tif (i+k < ahi && j+k < bhi)\n\t\t\t\t\tqueue.push([i + k, ahi, j + k, bhi]);\n\t\t\t}\n\t\t}\n\n\t\tmatching_blocks.sort(__ntuplecomp);\n\n\t\tvar i1 = 0,\n\t\t    j1 = 0,\n\t\t    k1 = 0;\n\t\tvar non_adjacent: Array<[number,number,number]> = [];\n\t\tfor (var idx=0; idx < matching_blocks.length; idx++) {\n\t\t\tvar block = matching_blocks[idx];\n\t\t\tvar i2 = block[0];\n\t\t\tvar j2 = block[1];\n\t\t\tvar k2 = block[2];\n\t\t\tif (i1 + k1 == i2 && j1 + k1 == j2) {\n\t\t\t\tk1 += k2;\n\t\t\t} else {\n\t\t\t\tif (k1) non_adjacent.push([i1, j1, k1]);\n\t\t\t\ti1 = i2;\n\t\t\t\tj1 = j2;\n\t\t\t\tk1 = k2;\n\t\t\t}\n\t\t}\n\n\t\tif (k1) non_adjacent.push([i1, j1, k1]);\n\n\t\tnon_adjacent.push([la, lb, 0]);\n\t\tthis.matching_blocks = non_adjacent;\n\t\treturn this.matching_blocks;\n\t}\n\n\tprivate get_opcodes(): any[] {\n\t\tif (this.opcodes != null) return this.opcodes;\n\t\tvar i = 0;\n\t\tvar j = 0;\n\t\tvar answer: any[] = [];\n\t\tthis.opcodes = answer;\n\t\tvar blocks = this.get_matching_blocks();\n\t\tfor (var idx=0; idx < blocks.length; idx++) {\n\t\t\tvar block = blocks[idx];\n\t\t\tvar ai = block[0];\n\t\t\tvar bj = block[1];\n\t\t\tvar size = block[2];\n\t\t\tvar tag = '';\n\t\t\tif (i < ai && j < bj) {\n\t\t\t\ttag = 'replace';\n\t\t\t} else if (i < ai) {\n\t\t\t\ttag = 'delete';\n\t\t\t} else if (j < bj) {\n\t\t\t\ttag = 'insert';\n\t\t\t}\n\t\t\tif (tag) answer.push([tag, i, ai, j, bj]);\n\t\t\ti = ai + size;\n\t\t\tj = bj + size;\n\n\t\t\tif (size) answer.push(['equal', ai, i, bj, j]);\n\t\t}\n\t\treturn answer;\n\t}\n\n\tpublic text_diff(context: number): string[] {\n\t\tvar opcodes = this.get_opcodes();\n\t\tvar diff: string[] = [];\n\t\tvar a_side: string[] = [];\n\t\tvar b_side: string[] = [];\n\t\tvar a_max_len = 0;\n\t\tvar last_seen = -1;\n\t\tfor (var op_idx=0; op_idx<opcodes.length; op_idx++) {\n\t\t\tvar op = opcodes[op_idx];\n\t\t\tif (op[0] === 'equal') continue;\n\t\t\tvar ai = op[1];\n\t\t\tvar bi = op[3];\n\t\t\tvar aj = op[2]-1;\n\t\t\tvar bj = op[4]-1;\n\t\t\tvar start = Math.min(ai,bi);\n\t\t\tvar end = Math.max(aj,bj);\n\t\t\tvar c = '';\n\t\t\tswitch (op[0]) {\n\t\t\tcase 'delete': c = ' < '; break;\n\t\t\tcase 'insert': c = ' > '; break;\n\t\t\tcase 'replace': c = ' | '; break;\n\t\t\t}\n\t\t\tfor (var i=Math.max(last_seen+1,start-context); i<start; i++) {\n\t\t\t\tvar prefix = i + ': ';\n\t\t\t\tif (i < this.a.length) {\n\t\t\t\t\ta_side.push(prefix + this.a[i]);\n\t\t\t\t\ta_max_len = Math.max(a_max_len, this.a[i].length + prefix.length);\n\t\t\t\t} else {\n\t\t\t\t\ta_side.push(prefix);\n\t\t\t\t}\n\t\t\t\tif (i < this.b.length) {\n\t\t\t\t\tb_side.push(this.b[i]);\n\t\t\t\t} else {\n\t\t\t\t\tb_side.push('');\n\t\t\t\t}\n\t\t\t\tdiff.push('   ');\n\t\t\t}\n\t\t\tfor (var i=start; i<=end; i++) {\n\t\t\t\tvar prefix = i + ': ';\n\t\t\t\tif (i >= ai && i <= aj) {\n\t\t\t\t\ta_side.push(prefix + this.a[i]);\n\t\t\t\t\ta_max_len = Math.max(a_max_len, this.a[i].length + prefix.length);\n\t\t\t\t} else {\n\t\t\t\t\ta_side.push(prefix);\n\t\t\t\t}\n\t\t\t\tif (i >= bi && i <= bj) {\n\t\t\t\t\tb_side.push(this.b[i]);\n\t\t\t\t} else {\n\t\t\t\t\tb_side.push('');\n\t\t\t\t}\n\t\t\t\tdiff.push(c);\n\t\t\t}\n\t\t\tlast_seen = end;\n\t\t}\n\t\tfor (var i=0; i<diff.length; i++) {\n\t\t\tvar a = a_side[i];\n\t\t\tvar b = b_side[i];\n\t\t\tif (a.length < a_max_len)\n\t\t\t\ta += (new Array(a_max_len - a.length + 1)).join(' ');\n\t\t\tdiff[i] = a + diff[i] + b;\n\t\t}\n\t\treturn diff;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/difflib.ts\n **/","/**\n * Top-level Doppio.VM API.\n */\nimport JVM = require('./jvm');\nimport CLI = require('./java_cli');\nimport * as ClassFile from './ClassFile';\nimport * as Threading from './threading';\nimport Long = require('./gLong');\nimport * as Util from './util';\nimport * as Enums from './enums';\nimport * as Interfaces from './interfaces';\nimport Monitor = require('./Monitor');\n\nexport {JVM, CLI, ClassFile, Threading, Long, Util, Enums, Interfaces, Monitor};\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/VM.ts\n **/","import {OptionParser, ParseType, PrefixParseResult} from './option_parser';\nimport JVM = require('./jvm');\nimport util = require('./util');\nimport logging = require('./logging');\nimport {JVMCLIOptions} from './interfaces';\n\nlet parser = new OptionParser({\n  default: {\n    classpath: {\n      type: ParseType.NORMAL_VALUE_SYNTAX,\n      alias: 'cp',\n      optDesc: ' <class search path of directories and zip/jar files>',\n      desc: 'A : separated list of directories, JAR archives, and ZIP archives to search for class files.',\n    },\n    D: {\n      type: ParseType.MAP_SYNTAX,\n      optDesc: '<name>=<value>',\n      desc: 'set a system property'\n    },\n    jar: {\n      type: ParseType.NORMAL_VALUE_SYNTAX,\n      stopParsing: true\n    },\n    help: { alias: '?', desc: 'print this help message' },\n    X: { desc: 'print help on non-standard options' },\n    enableassertions: {\n      type: ParseType.COLON_VALUE_OR_FLAG_SYNTAX,\n      optDesc: '[:<packagename>...|:<classname>]',\n      alias: 'ea',\n      desc: 'enable assertions with specified granularity'\n    },\n    disableassertions: {\n      type: ParseType.COLON_VALUE_OR_FLAG_SYNTAX,\n      optDesc: '[:<packagename>...|:<classname>]',\n      alias: 'da',\n      desc: 'disable assertions with specified granularity'\n    },\n    enablesystemassertions: { alias: 'esa', desc: 'enable system assertions' },\n    disablesystemassertions: { alias: 'dsa', desc: 'disable system assertions '}\n  },\n  X: {\n    'int': {\n      desc: 'interpreted mode execution only'\n    },\n    'dump-JIT-stats': {\n      desc: 'dump JIT statistics'\n    },\n    log: {\n      desc: 'log level, [0-10]|vtrace|trace|debug|error',\n      type: ParseType.NORMAL_VALUE_SYNTAX\n    },\n    'vtrace-methods': {\n      type: ParseType.NORMAL_VALUE_SYNTAX,\n      optDesc: ' <java/lang/Object/getHashCode()I:...>',\n      desc: 'specify particular methods to vtrace separated by colons'\n    },\n    'list-class-cache': {\n      desc: 'list all of the bootstrap loaded classes after execution'\n    },\n    'dump-compiled-code': {\n      type: ParseType.NORMAL_VALUE_SYNTAX,\n      optDesc: ' <directory>',\n      desc: 'location to dump compiled object definitions'\n    },\n    // TODO: Use -Djava.library.path\n    'native-classpath': {\n      type: ParseType.NORMAL_VALUE_SYNTAX,\n      optDesc: ' <class search path of directories>',\n      desc: 'A : separated list of directories to search for native mathods in JS files.'\n    },\n    'bootclasspath/a': {\n      type: ParseType.COLON_VALUE_SYNTAX,\n      optDesc: ':<directories and zip/jar files separated by :>',\n      desc: 'append to end of bootstrap class path'\n    },\n    'bootclasspath/p': {\n      type: ParseType.COLON_VALUE_SYNTAX,\n      optDesc: ':<directories and zip/jar files separated by :>',\n      desc: 'prepend in front of bootstrap class path'\n    },\n    'bootclasspath': {\n      type: ParseType.COLON_VALUE_SYNTAX,\n      optDesc: ':<directories and zip/jar files separated by :>',\n      desc: 'set search path for bootstrap classes and resources'\n    },\n    'X:+PrintCompilation': {\n      desc: 'Print JIT compilation details'\n    }\n  }\n});\n\n/**\n * Consumes a `java` command line string. Constructs a JVM, launches the command, and\n * returns the JVM object. Throws an exception if parsing fails.\n *\n * Returns `null` if no JVM needed to be constructed (e.g. -h flag).\n *\n * @param args Arguments to the 'java' command.\n * @param opts Default options.\n * @param doneCb Called when JVM execution finishes. Passes a\n *   number to the callback indicating the exit value.\n * @param [jvmStarted] Called with the JVM object once we have invoked it.\n */\nfunction java(args: string[], opts: JVMCLIOptions,\n                     doneCb: (status: number) => void,\n                     jvmStarted: (jvm: JVM) => void = function(jvm: JVM): void {}): void {\n  let parsedArgs = parser.parse(args),\n    standard = parsedArgs['default'],\n    nonStandard = parsedArgs['X'],\n    jvmState: JVM;\n\n  // System properties.\n  opts.properties = standard.mapOption('D');\n\n  if (standard.flag('help', false)) {\n    return printHelp(opts.launcherName, parser.help('default'), doneCb, 0);\n  } else if (standard.flag('X', false)) {\n    return printNonStandardHelp(opts.launcherName, parser.help('X'), doneCb, 0);\n  }\n\n  // GLOBAL CONFIGURATION\n  let logOption = nonStandard.stringOption('log', 'ERROR');\n\n  opts.intMode = nonStandard.flag('int', false);\n  opts.dumpJITStats = nonStandard.flag('dump-JIT-stats', false);\n\n  if (/^[0-9]+$/.test(logOption)) {\n    logging.log_level = parseInt(logOption, 10);\n  } else {\n    let level = (<any> logging)[logOption.toUpperCase()];\n    if (level == null) {\n      process.stderr.write(`Unrecognized log level: ${logOption}.`);\n      return printHelp(opts.launcherName, parser.help('default'), doneCb, 1);\n    }\n    logging.log_level = level;\n  }\n\n  if (nonStandard.flag('list-class-cache', false)) {\n    // Redefine done_cb so we print the loaded class files on JVM exit.\n    doneCb = ((old_done_cb: (arg: number) => void): (arg: number) => void => {\n      return (result: number): void => {\n        let fpaths = jvmState.getBootstrapClassLoader().getLoadedClassFiles();\n        process.stdout.write(fpaths.join('\\n') + '\\n');\n        old_done_cb(result);\n      };\n    })(doneCb);\n  }\n\n  if (standard.flag('enablesystemassertions', false)) {\n    opts.enableSystemAssertions = true;\n  }\n\n  if (standard.flag('disablesystemassertions', false)) {\n    opts.enableSystemAssertions = false;\n  }\n\n  if (standard.flag('enableassertions', false)) {\n    opts.enableAssertions = true;\n  } else if (standard.stringOption('enableassertions', null)) {\n    opts.enableAssertions = standard.stringOption('enableassertions', null).split(':');\n  }\n\n  if (standard.stringOption('disableassertions', null)) {\n    opts.disableAssertions = standard.stringOption('disableassertions', null).split(':');\n  }\n  // NOTE: Boolean form of -disableassertions is a NOP.\n\n  // Bootstrap classpath items.\n  let bscl = nonStandard.stringOption('bootclasspath', null);\n  if (bscl !== null) {\n    opts.bootstrapClasspath = bscl.split(':');\n  }\n  let bsClAppend = nonStandard.stringOption('bootclasspath/a', null);\n  if (bsClAppend) {\n    opts.bootstrapClasspath = opts.bootstrapClasspath.concat(bsClAppend.split(':'));\n  }\n  let bsClPrepend = nonStandard.stringOption('bootclasspath/p', null);\n  if (bsClPrepend) {\n    opts.bootstrapClasspath = bsClPrepend.split(':').concat(opts.bootstrapClasspath);\n  }\n\n  // User-supplied classpath items.\n  if (!opts.classpath) {\n    opts.classpath = [];\n  }\n\n  if (standard.stringOption('jar', null)) {\n    opts.classpath.push(standard.stringOption('jar', null));\n  } else if (standard.stringOption('classpath', null)) {\n    opts.classpath = opts.classpath.concat(standard.stringOption('classpath', null).split(':'));\n  } else {\n    // DEFAULT: If no user-supplied classpath, add the current directory to\n    // the class path.\n    opts.classpath.push(process.cwd());\n  }\n\n  // User-supplied native classpath.\n  let nativeClasspath = standard.stringOption('native-classpath', null);\n  if (nativeClasspath) {\n    opts.nativeClasspath = opts.nativeClasspath.concat(nativeClasspath.split(':'));\n  }\n\n  // Construct the JVM.\n  jvmState = new JVM(opts, (err?: any): void => {\n    if (err) {\n      process.stderr.write(\"Error constructing JVM:\\n\");\n      process.stderr.write(err.toString() + \"\\n\");\n      doneCb(1);\n    } else {\n      launchJvm(standard, opts, jvmState, doneCb, jvmStarted);\n    }\n  });\n\n  jvmState.setPrintJITCompilation(nonStandard.flag('X:+PrintCompilation', false));\n\n  let vtraceMethods = nonStandard.stringOption('vtrace-methods', null);\n  if (vtraceMethods) {\n    vtraceMethods.split(':').forEach((m: string) => jvmState.vtraceMethod(m));\n  }\n\n  let dumpCompiledCode = nonStandard.stringOption('dumpCompiledCode', null);\n  if (dumpCompiledCode) {\n    jvmState.dumpCompiledCode(dumpCompiledCode);\n  }\n}\n\n/**\n * Consumes a fully-configured JVM, parsed arguments, and a callback.\n * Figures out from this how to launch the JVM (e.g. using a JAR file or a\n * particular class).\n */\nfunction launchJvm(standardOptions: PrefixParseResult, opts: JVMCLIOptions, jvmState: JVM, doneCb: (status: number) => void,\n                    jvmStarted: (jvmState: JVM) => void): void {\n  let mainArgs = standardOptions.unparsedArgs();\n  if (standardOptions.stringOption('jar', null)) {\n    jvmState.runJar(mainArgs, doneCb);\n    jvmStarted(jvmState);\n  } else if (mainArgs.length > 0) {\n    let cname = mainArgs[0];\n    if (cname.slice(-6) === '.class') {\n      cname = cname.slice(0, -6);\n    }\n    if (cname.indexOf('.') !== -1) {\n      // hack: convert java.foo.Bar to java/foo/Bar\n      cname = util.descriptor2typestr(util.int_classname(cname));\n    }\n    jvmState.runClass(cname, mainArgs.slice(1), doneCb);\n    jvmStarted(jvmState);\n  } else {\n    // No class specified, no jar specified!\n    printHelp(opts.launcherName, parser.help('default'), doneCb, 0);\n  }\n}\n\nfunction printHelp(launcherName: string, str: string, doneCb: (arg: number) => void, rv: number): void {\n  process.stdout.write(\n`Usage: ${launcherName} [-options] class [args...]\n        (to execute a class)\nor  ${launcherName} [-options] -jar jarfile [args...]\n        (to execute a jar file)\nwhere options include:\\n${str}`);\n  doneCb(rv);\n}\n\nfunction printNonStandardHelp(launcherName: string, str: string, doneCb: (arg: number) => void, rv: number): void {\n  process.stdout.write(`${str}\\n\\nThe -X options are non-standard and subject to change without notice.\\n`);\n  doneCb(rv);\n}\n\nexport = java;\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/java_cli.ts\n **/","export const enum ParseType {\n  // A simple flag, e.g. -help\n  FLAG,\n  // An option that contains a value specified with colon syntax, e.g.\n  // -ea:myPkg....\n  COLON_VALUE_SYNTAX,\n  // An option that can specified as a flag, or with a value.\n  COLON_VALUE_OR_FLAG_SYNTAX,\n  // An option that contains a value specified in a normal fashion, e.g.\n  // -cp .\n  // These require that a value be set.\n  NORMAL_VALUE_SYNTAX,\n  // An option specified as a map, e.g. the option 'D': -Dkey=value\n  // These can be specified multiple times.\n  MAP_SYNTAX\n}\n\nexport interface Description {\n  [prefix: string]: DescriptionCategory\n}\n\nexport interface DescriptionCategory {\n  [optionName: string]: Option;\n}\n\nexport interface Option {\n  // Describes the option. Used for help text.\n  desc?: string;\n  // Describes how the option should be parsed. Defaults to 'FLAG'.\n  type?: ParseType\n  // For options that take an optional value, an example of the option.\n  // Used for help text.\n  optDesc?: string;\n  // Describes a short alias for the option.\n  alias?: string;\n  // After parsing this option, stop parsing. The remaining arguments\n  // should be passed in raw.\n  stopParsing?: boolean;\n  // [INTERNAL ONLY]\n  prefix?: string;\n  // [INTERNAL ONLY]\n  name?: string;\n}\n\nexport interface RawPrefixParseResult {\n  [optionName: string]: boolean | string | {[name: string]: string}\n}\n\n// Usage.\n\nexport class PrefixParseResult {\n  private _result: RawPrefixParseResult;\n  private _unparsedArgs: string[];\n  constructor(result: RawPrefixParseResult, unparsedArgs: string[] = []) {\n    this._result = result;\n    this._unparsedArgs = unparsedArgs;\n  }\n\n  public unparsedArgs(): string[] {\n    return this._unparsedArgs;\n  }\n\n  public flag(name: string, defaultVal: boolean): boolean {\n    let val = this._result[name];\n    if (typeof(val) === 'boolean') {\n      return <boolean> val;\n    }\n    return defaultVal;\n  }\n\n  public stringOption(name: string, defaultVal: string): string {\n    let val = this._result[name];\n    if (typeof(val) === 'string') {\n      return <string> val;\n    }\n    return defaultVal;\n  }\n\n  public mapOption(name: string): {[name: string]: string} {\n    let val = this._result[name];\n    if (typeof(val) === 'object') {\n      return <{[name: string]: string}> val;\n    }\n    return {};\n  }\n}\n\nexport interface ParseResult {\n  [prefix: string]: PrefixParseResult;\n}\n\nfunction getOptName(prefix: string, name: string): string {\n  return prefix !== 'default' ? `${prefix}${name}` : name\n}\n\n/**\n * Handles parsing for a specific options configuration.\n * Parses Java-style options.\n */\nexport class OptionParser {\n  private _parseMap: {[optName: string]: Option} = {};\n  private _prefixes: string[] = [];\n  private _mapArgs: string[] = [];\n  private _rawDesc: Description;\n\n  constructor(desc: Description) {\n    this._rawDesc = desc;\n    this._prefixes = Object.keys(desc);\n    this._prefixes.forEach((prefix) => {\n      let opts = desc[prefix];\n      let optNames = Object.keys(opts);\n      optNames.slice(0).forEach((optName) => {\n        let option = opts[optName];\n        if (!option.type) {\n          option.type = ParseType.FLAG;\n        }\n        if (option.type === ParseType.MAP_SYNTAX) {\n          // ASSUMPTION: These do not have aliases.\n          this._mapArgs.push(optName);\n        }\n        option.prefix = prefix;\n        option.name = optName;\n        this._parseMap[getOptName(prefix, optName)] = option;\n        if (option.alias) {\n          optNames.push(option.alias);\n          this._parseMap[getOptName(prefix, option.alias)] = option;\n        }\n      });\n    });\n  }\n\n  /**\n   * Parses the given arguments. Throws an exception on parsing failure.\n   */\n  public parse(argv: string[]): ParseResult {\n    let result: {[name: string]: RawPrefixParseResult} = {},\n      ptr: number = 0,\n      len: number;\n\n    this._prefixes.forEach((prefix) => result[prefix] = {});\n\n    argv = argv.map((arg) => arg.trim()).filter((arg) => arg !== '');\n    len = argv.length;\n\n    while (ptr < len) {\n      var arg = argv[ptr];\n      if (arg[0] === '-') {\n        arg = arg.slice(1);\n        var opt: Option;\n        if (opt = this._parseMap[arg]) {\n          switch (opt.type) {\n            case ParseType.FLAG:\n            case ParseType.COLON_VALUE_OR_FLAG_SYNTAX:\n              result[opt.prefix][opt.name] = true;\n              break;\n            case ParseType.NORMAL_VALUE_SYNTAX:\n            case ParseType.COLON_VALUE_SYNTAX:\n              ptr++;\n              if (ptr < len) {\n                result[opt.prefix][opt.name] = argv[ptr];\n              } else {\n                throw new Error(`-${arg} requires an argument.`);\n              }\n              break;\n            case ParseType.MAP_SYNTAX:\n              // NOP.\n              break;\n            default:\n              // Invalid.\n              throw new Error(`INTERNAL ERROR: Invalid parse type for -${arg}.`);\n          }\n        } else if (this._mapArgs.filter((mapArg) => {\n          if (arg.slice(0, mapArg.length) === mapArg) {\n            opt = this._parseMap[mapArg];\n            return true;\n          }\n          return false;\n        }).length > 0) {\n          // ASSUMPTION: Map args are mutually exclusive.\n          // Argument is -{mapArg}key=value\n          // If no value, set to ''.\n          let mapping = arg.slice(opt.name.length),\n            map = <{[name: string]: string}> result[opt.prefix][opt.name];\n          if (!map) {\n            map = result[opt.prefix][opt.name] = {};\n          }\n          let eqIdx = mapping.indexOf('=');\n          if (eqIdx !== -1) {\n            map[mapping.slice(0, eqIdx)] = mapping.slice(eqIdx + 1);\n          } else {\n            map[mapping] = \"\";\n          }\n        } else if (arg.indexOf(':') !== -1 && (opt = this._parseMap[arg.slice(0, arg.indexOf(':'))])) {\n          // Colon option.\n          if (opt.type === ParseType.COLON_VALUE_SYNTAX || opt.type === ParseType.COLON_VALUE_OR_FLAG_SYNTAX) {\n            result[opt.prefix][opt.name] = arg.slice(arg.indexOf(':') + 1);\n          } else {\n            // Unrecognized option.\n            throw new Error(`Unrecognized option: -${arg}`);\n          }\n        } else {\n          throw new Error(`Unrecognized option: -${arg}`);\n        }\n\n        if (opt.stopParsing) {\n          ptr++;\n          break;\n        }\n\n      } else {\n        break;\n      }\n\n      // Advance to next value.\n      ptr++;\n    }\n    // ptr is at raw args to program / JVM.\n    let unparsedArgs = argv.slice(ptr),\n      rv: ParseResult = {};\n    Object.keys(result).forEach((prefix) => {\n      rv[prefix] = new PrefixParseResult(result[prefix], unparsedArgs);\n    });\n    return rv;\n  }\n\n  /**\n   * Generates help text for the given prefixed options.\n   */\n  public help(prefix: string): string {\n    return _showHelp(this._rawDesc[prefix], prefix === 'default' ? '' : prefix);\n  }\n}\n\nfunction printCol(value: string, width: number): string {\n  var rv = value;\n  var padding = width - value.length;\n  while (padding-- > 0) {\n    rv += ' ';\n  }\n  return rv;\n}\n\nfunction _showHelp(category: DescriptionCategory, prefix: string): string {\n  var combinedKeys : {[k:string]:Option} = {};\n  var keyColWidth = 13;\n  Object.keys(category).forEach((key) => {\n    var opt = category[key];\n    // Ignored in help text.\n    if (opt.stopParsing) {\n      return;\n    }\n    var keys = [key];\n    if (opt.alias != null) {\n      keys.push(opt.alias);\n    }\n\n    let ckey: string;\n    if (opt.optDesc) {\n      ckey = keys.map((key: string) => `-${prefix}${key}${opt.optDesc}`).join(\"\\n\");\n    } else {\n      ckey = keys.map((key: string) => `-${prefix}${key}`).join(' | ');\n    }\n    combinedKeys[ckey] = opt;\n  });\n  return Object.keys(combinedKeys).map((key) => {\n    let option = combinedKeys[key];\n    if (option.optDesc) {\n      let cols = key.split('\\n');\n      let rv = cols.map((row) =>  `    ${row}`);\n      // Multiline.\n      return `${rv.join('\\n')}\\n                  ${option.desc}`;\n    } else {\n      let colText = printCol(key, keyColWidth);\n      if (colText.length === keyColWidth) {\n        return `    ${colText} ${option.desc}`;\n      } else {\n        return `    ${colText}\\n                  ${option.desc}`;\n      }\n    }\n  }).join('\\n') + '\\n';\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/option_parser.ts\n **/","/**\n * Aggregates .class file-related APIs under a single interface (Doppio.VM.ClassFile)\n */\n\nimport * as ConstantPool from './ConstantPool';\nimport * as Attributes from './attributes';\n\nexport * from './ClassData';\nexport * from './methods';\nexport * from './ClassLoader';\nexport * from './classpath';\nexport {ConstantPool, Attributes};\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/ClassFile.ts\n **/","/**\n * Top-level Doppio.Debug namespace.\n */\n\nimport Assert = require('./assert');\nimport * as Logging from './logging';\nimport * as Difflib from './difflib';\n\nexport {Assert, Logging, Difflib};\n\n\n\n/** WEBPACK FOOTER **\n ** ../../../src/Debug.ts\n **/"],"sourceRoot":""}